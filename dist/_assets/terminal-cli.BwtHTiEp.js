class t{constructor(t){this.containerId=t,this.container=null,this.inputElement=null,this.outputElement=null,this.historyElement=null,this.promptElement=null,this.commandHistory=[],this.historyIndex=-1,this.commandRegistry={},this.easterEggs={},this.isInitialized=!1,this.username="visitor",this.hostname="nosyt-labs",this.currentDirectory="/home/vault-tec",this.fileSystem=this.initializeFileSystem()}initialize(){"undefined"!=typeof document&&(this.container=document.getElementById(this.containerId),this.container||(this.container=document.createElement("div"),this.container.id=this.containerId,document.body.appendChild(this.container)),this.container.className="terminal-cli-container",this.createTerminalElements(),this.registerDefaultCommands(),this.addEventListeners(),this.isInitialized=!0,this.showWelcomeMessage())}createTerminalElements(){this.historyElement=document.createElement("div"),this.historyElement.className="terminal-cli-history",this.container.appendChild(this.historyElement);const t=document.createElement("div");t.className="terminal-cli-input-container",this.container.appendChild(t),this.promptElement=document.createElement("span"),this.promptElement.className="terminal-cli-prompt",this.updatePrompt(),t.appendChild(this.promptElement),this.inputElement=document.createElement("input"),this.inputElement.type="text",this.inputElement.className="terminal-cli-input",this.inputElement.setAttribute("autocomplete","off"),this.inputElement.setAttribute("autocorrect","off"),this.inputElement.setAttribute("autocapitalize","off"),this.inputElement.setAttribute("spellcheck","false"),t.appendChild(this.inputElement),this.outputElement=document.createElement("div"),this.outputElement.className="terminal-cli-output",this.container.appendChild(this.outputElement)}addEventListeners(){this.container.addEventListener("click",(()=>{this.inputElement.focus()})),this.inputElement.addEventListener("keydown",(t=>{if("Enter"===t.key){t.preventDefault();const e=this.inputElement.value.trim();e&&(this.executeCommand(e),this.commandHistory.push(e),this.historyIndex=this.commandHistory.length,this.inputElement.value="")}else"ArrowUp"===t.key?(t.preventDefault(),this.historyIndex>0&&(this.historyIndex--,this.inputElement.value=this.commandHistory[this.historyIndex])):"ArrowDown"===t.key?(t.preventDefault(),this.historyIndex<this.commandHistory.length-1?(this.historyIndex++,this.inputElement.value=this.commandHistory[this.historyIndex]):(this.historyIndex=this.commandHistory.length,this.inputElement.value="")):"Tab"===t.key&&(t.preventDefault(),this.autocompleteCommand())})),window.addEventListener("load",(()=>{this.inputElement.focus()}))}updatePrompt(){this.promptElement.innerHTML=`<span class="terminal-cli-username">${this.username}</span>@<span class="terminal-cli-hostname">${this.hostname}</span>:<span class="terminal-cli-directory">${this.currentDirectory}</span>$ `}showWelcomeMessage(){this.appendToHistory("\n      <div class=\"terminal-cli-welcome\">\n        <p>ROBCO INDUSTRIES (TM) TERMLINK PROTOCOL</p>\n        <p>NOSYT LABS SECURE TERMINAL v1.0.0</p>\n        <p>Type 'help' to see available commands.</p>\n      </div>\n    ")}executeCommand(t){this.appendToHistory(`<div class="terminal-cli-command"><span class="terminal-cli-prompt">${this.promptElement.innerHTML}</span>${t}</div>`);const e=t.split(" "),i=e.shift().toLowerCase();if(this.commandRegistry[i])try{const t=this.commandRegistry[i].execute(e);t&&this.appendToHistory(`<div class="terminal-cli-output">${t}</div>`)}catch(s){this.appendToHistory(`<div class="terminal-cli-error">Error executing command: ${s.message}</div>`)}else if(this.easterEggs[i]){const t=this.easterEggs[i]();t&&this.appendToHistory(`<div class="terminal-cli-easter-egg">${t}</div>`)}else this.appendToHistory(`<div class="terminal-cli-error">Command not found: ${i}</div>`);this.historyElement.scrollTop=this.historyElement.scrollHeight}appendToHistory(t){this.historyElement.innerHTML+=t,this.historyElement.scrollTop=this.historyElement.scrollHeight}registerCommand(t,e,i,s){this.commandRegistry[t]={execute:e,description:i,usage:s}}registerEasterEgg(t,e){this.easterEggs[t]=e}registerDefaultCommands(){this.registerCommand("system",(t=>{const e=t[0],i=t.slice(1);switch(e){case"help":return this.commandRegistry.help.execute(i);case"clear":return this.commandRegistry.clear.execute(i);case"echo":return this.commandRegistry.echo.execute(i);case"date":return this.commandRegistry.date.execute(i);case"whoami":return this.commandRegistry.whoami.execute(i);default:return"Unknown system command."}}),"System related commands","system [help|clear|echo|date|whoami]"),this.registerCommand("file",(t=>{const e=t[0],i=t.slice(1);switch(e){case"ls":return this.commandRegistry.ls.execute(i);case"cd":return this.commandRegistry.cd.execute(i);case"cat":return this.commandRegistry.cat.execute(i);default:return"Unknown file command."}}),"File system commands","file [ls|cd|cat]"),this.registerCommand("navigate",(t=>{const e=t[0],i=t.slice(1);switch(e){case"vault":return this.commandRegistry.vault.execute(i);case"projects":return this.commandRegistry.projects.execute(i);case"about":return this.commandRegistry.about.execute(i);case"contact":return this.commandRegistry.contact.execute(i);default:return"Unknown navigation command."}}),"Navigation commands","navigate [vault|projects|about|contact]");const t=(t,e,i)=>{this.registerCommand(t,(t=>this.commandRegistry[e].execute([i,...t])),this.commandRegistry[t]?.description||"",`${t} [args]`)};this.registerCommand("help",(t=>{if(t.length>0){const e=t[0].toLowerCase();return this.commandRegistry[e]?`\n            <div class="terminal-cli-help">\n              <h3>${e}</h3>\n              <p>${this.commandRegistry[e].description}</p>\n              <p>Usage: ${this.commandRegistry[e].usage}</p>\n            </div>\n          `:`Command not found: ${e}`}let e='<div class="terminal-cli-help"><h3>Available Commands:</h3>';return e+="<h4>System</h4><ul>",["help","clear","echo","date","whoami"].forEach((t=>{this.commandRegistry[t]&&(e+=`<li><strong>${t}</strong> - ${this.commandRegistry[t].description}</li>`)})),e+="</ul>",e+="<h4>File</h4><ul>",["ls","cd","cat"].forEach((t=>{this.commandRegistry[t]&&(e+=`<li><strong>${t}</strong> - ${this.commandRegistry[t].description}</li>`)})),e+="</ul>",e+="<h4>Navigation</h4><ul>",["vault","projects","about","contact"].forEach((t=>{this.commandRegistry[t]&&(e+=`<li><strong>${t}</strong> - ${this.commandRegistry[t].description}</li>`)})),e+="</ul>",e+='<p>Type "help [command]" for more information about a specific command.</p>',e+='<p class="terminal-hint">Psst... some secrets await the curious explorer.</p>',e+="</div>",e}),"Display help information","help [command]"),this.registerCommand("clear",(()=>(this.historyElement.innerHTML="","")),"Clear the terminal screen","clear"),this.registerCommand("echo",(t=>t.join(" ")),"Display a line of text","echo [text]"),this.registerCommand("date",(()=>(new Date).toString()),"Display the current date and time","date"),this.registerCommand("whoami",(()=>this.username),"Display current user","whoami"),this.registerCommand("ls",(t=>{const e=t[0]||this.currentDirectory,i=this.getDirectoryFromPath(e);if(!i)return`ls: cannot access '${e}': No such file or directory`;let s='<div class="terminal-cli-ls">';for(const n in i.directories)s+=`<div class="terminal-cli-directory-item">${n}/</div>`;for(const n in i.files)s+=`<div class="terminal-cli-file-item">${n}</div>`;return s+="</div>",s}),"List directory contents","ls [directory]"),this.registerCommand("cd",(t=>{const e=t[0]||"/home/vault-tec";if(".."===e){const t=this.currentDirectory.split("/");return t.pop(),this.currentDirectory=t.join("/")||"/",this.updatePrompt(),""}return this.getDirectoryFromPath(e)?(e.startsWith("/")?this.currentDirectory=e:this.currentDirectory="/"===this.currentDirectory?`/${e}`:`${this.currentDirectory}/${e}`,this.updatePrompt(),""):`cd: no such directory: ${e}`}),"Change the current directory","cd [directory]"),this.registerCommand("cat",(t=>{if(0===t.length)return"Usage: cat [file]";const e=t[0],i=this.getFileFromPath(e);return i?i.content:`cat: ${e}: No such file or directory`}),"Display file content","cat [file]"),this.registerCommand("projects",(()=>(window.location.href="/projects","Loading Nosyt Labs projects...")),"View Nosyt Labs projects","projects"),this.registerCommand("about",(()=>(window.location.href="/about","Loading information about Nosyt Labs...")),"View information about Nosyt Labs","about"),this.registerCommand("contact",(()=>(window.location.href="/contact","Loading contact information...")),"Contact Nosyt Labs","contact"),t("ls","file","ls"),t("cd","file","cd"),t("cat","file","cat"),t("help","system","help"),t("clear","system","clear"),t("echo","system","echo"),t("date","system","date"),t("whoami","system","whoami"),t("vault","navigate","vault"),t("projects","navigate","projects"),t("about","navigate","about"),t("contact","navigate","contact"),this.registerEasterEgg("nuka-cola",(()=>'\n        <div class="terminal-cli-easter-egg">\n          <pre>\n          _____\n         |_____|\n         |  _  |\n         | | | |\n         | |_| |\n         |_____|\n          </pre>\n          <p>You found a Nuka-Cola! +15 HP, +5 Rads</p>\n        </div>\n      ')),this.registerEasterEgg("war",(()=>"War... War never changes."))}autocompleteCommand(){const t=this.inputElement.value.split(" ");if(1===t.length){const e=t[0].toLowerCase(),i=Object.keys(this.commandRegistry).filter((t=>t.startsWith(e)));1===i.length?this.inputElement.value=i[0]+" ":i.length>1&&this.appendToHistory(`<div class="terminal-cli-autocomplete">${i.join("  ")}</div>`)}}initializeFileSystem(){return{directories:{home:{directories:{"vault-tec":{directories:{documents:{directories:{},files:{"readme.txt":{content:"Welcome to the Vault-Tec terminal!"}}},projects:{directories:{},files:{"project1.txt":{content:"Project 1: Secure Vault Door"},"project2.txt":{content:"Project 2: Radiation Monitoring System"}}}},files:{"notes.txt":{content:"Remember to check the reactor core."}}}},files:{}}},files:{}}}getDirectoryFromPath(t){if(!t||"/"===t)return this.fileSystem;const e=t.replace(/^\/+|\/+$/g,"").split("/");let i=this.fileSystem;for(const s of e){if(!i.directories||!i.directories[s])return null;i=i.directories[s]}return i}getFileFromPath(t){if(!t)return null;const e=t.replace(/^\/+|\/+$/g,"").split("/");let i=this.fileSystem;for(let n=0;n<e.length-1;n++){if(!i.directories||!i.directories[e[n]])return null;i=i.directories[e[n]]}const s=e[e.length-1];return i.files&&i.files[s]?i.files[s]:null}}export{t as TerminalCLI};
