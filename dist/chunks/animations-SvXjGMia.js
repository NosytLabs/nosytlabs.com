import { c as createAstro, a as createComponent, r as renderTemplate, e as defineScriptVars, f as renderSlot, b as addAttribute, m as maybeRenderHead, h as defineStyleVars } from "./vendor-LjYnI_ua.js";
import "kleur/colors";
import "clsx";
var __freeze$1 = Object.freeze;
var __defProp$1 = Object.defineProperty;
var __template$1 = (cooked, raw) => __freeze$1(__defProp$1(cooked, "raw", { value: __freeze$1(raw || cooked.slice()) }));
var _a$1;
const $$Astro$1 = createAstro("https://nosytlabs.com");
const $$AnimatedSection = createComponent(($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$1, $$props, $$slots);
  Astro2.self = $$AnimatedSection;
  const {
    animation = "fade-in",
    delay = 0,
    duration = 0.8,
    threshold = 0.1,
    once = true,
    stagger = false,
    staggerDelay = 0.1,
    class: className = "",
    id
  } = Astro2.props;
  const sectionId = id || `animated-section-${Math.random().toString(36).substring(2, 9)}`;
  return renderTemplate(_a$1 || (_a$1 = __template$1(["", "<section", "", "", "", "", "", "", "", "", " data-astro-cid-cch7oa3t> ", " </section>  <script>(function(){", "\n  document.addEventListener('DOMContentLoaded', () => {\n    const section = document.getElementById(sectionId);\n    if (!section) return;\n    \n    const animation = section.dataset.animation || 'fade-in';\n    const delay = parseFloat(section.dataset.delay || '0');\n    const duration = parseFloat(section.dataset.duration || '0.8');\n    const threshold = parseFloat(section.dataset.threshold || '0.1');\n    const once = section.dataset.once === 'true';\n    const stagger = section.dataset.stagger === 'true';\n    const staggerDelay = parseFloat(section.dataset.staggerDelay || '0.1');\n    \n    // Apply animation class\n    section.classList.add(`animate-${animation}`);\n    \n    // Set animation duration and delay\n    section.style.animationDuration = `${duration}s`;\n    section.style.animationDelay = `${delay}s`;\n    section.style.animationFillMode = 'forwards';\n    \n    // If staggered, prepare child elements\n    if (stagger) {\n      const children = Array.from(section.children);\n      children.forEach((child, index) => {\n        child.classList.add('staggered-child');\n        child.style.animationName = animation;\n        child.style.animationDuration = `${duration}s`;\n        child.style.animationDelay = `${delay + (index * staggerDelay)}s`;\n        child.style.animationFillMode = 'forwards';\n      });\n    }\n    \n    // Create Intersection Observer\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          // Animate the section\n          section.style.opacity = '1';\n          \n          // If staggered, animate children\n          if (stagger) {\n            const children = Array.from(section.children);\n            children.forEach((child, index) => {\n              setTimeout(() => {\n                child.style.opacity = '1';\n              }, index * (staggerDelay * 1000));\n            });\n          }\n          \n          // Unobserve if only animating once\n          if (once) {\n            observer.unobserve(section);\n          }\n        } else if (!once) {\n          // Reset animation if not once\n          section.style.opacity = '0';\n          \n          if (stagger) {\n            const children = Array.from(section.children);\n            children.forEach(child => {\n              child.style.opacity = '0';\n            });\n          }\n        }\n      });\n    }, { threshold });\n    \n    // Start observing\n    observer.observe(section);\n  });\n})();<\/script>"], ["", "<section", "", "", "", "", "", "", "", "", " data-astro-cid-cch7oa3t> ", " </section>  <script>(function(){", "\n  document.addEventListener('DOMContentLoaded', () => {\n    const section = document.getElementById(sectionId);\n    if (!section) return;\n    \n    const animation = section.dataset.animation || 'fade-in';\n    const delay = parseFloat(section.dataset.delay || '0');\n    const duration = parseFloat(section.dataset.duration || '0.8');\n    const threshold = parseFloat(section.dataset.threshold || '0.1');\n    const once = section.dataset.once === 'true';\n    const stagger = section.dataset.stagger === 'true';\n    const staggerDelay = parseFloat(section.dataset.staggerDelay || '0.1');\n    \n    // Apply animation class\n    section.classList.add(\\`animate-\\${animation}\\`);\n    \n    // Set animation duration and delay\n    section.style.animationDuration = \\`\\${duration}s\\`;\n    section.style.animationDelay = \\`\\${delay}s\\`;\n    section.style.animationFillMode = 'forwards';\n    \n    // If staggered, prepare child elements\n    if (stagger) {\n      const children = Array.from(section.children);\n      children.forEach((child, index) => {\n        child.classList.add('staggered-child');\n        child.style.animationName = animation;\n        child.style.animationDuration = \\`\\${duration}s\\`;\n        child.style.animationDelay = \\`\\${delay + (index * staggerDelay)}s\\`;\n        child.style.animationFillMode = 'forwards';\n      });\n    }\n    \n    // Create Intersection Observer\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          // Animate the section\n          section.style.opacity = '1';\n          \n          // If staggered, animate children\n          if (stagger) {\n            const children = Array.from(section.children);\n            children.forEach((child, index) => {\n              setTimeout(() => {\n                child.style.opacity = '1';\n              }, index * (staggerDelay * 1000));\n            });\n          }\n          \n          // Unobserve if only animating once\n          if (once) {\n            observer.unobserve(section);\n          }\n        } else if (!once) {\n          // Reset animation if not once\n          section.style.opacity = '0';\n          \n          if (stagger) {\n            const children = Array.from(section.children);\n            children.forEach(child => {\n              child.style.opacity = '0';\n            });\n          }\n        }\n      });\n    }, { threshold });\n    \n    // Start observing\n    observer.observe(section);\n  });\n})();<\/script>"])), maybeRenderHead(), addAttribute(sectionId, "id"), addAttribute(`animated-section ${className}`, "class"), addAttribute(animation, "data-animation"), addAttribute(delay, "data-delay"), addAttribute(duration, "data-duration"), addAttribute(threshold, "data-threshold"), addAttribute(once, "data-once"), addAttribute(stagger, "data-stagger"), addAttribute(staggerDelay, "data-stagger-delay"), renderSlot($$result, $$slots["default"]), defineScriptVars({ sectionId }));
}, "/mnt/persist/workspace/src/components/animations/AnimatedSection.astro", void 0);
var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro = createAstro("https://nosytlabs.com");
const $$PageTransition = createComponent(($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$PageTransition;
  const {
    transition = "fade",
    duration = 0.5,
    easing = "cubic-bezier(0.16, 1, 0.3, 1)",
    direction = "up",
    color = "var(--nosyt-purple-dark, #2D0A4F)",
    respectReducedMotion = true
  } = Astro2.props;
  const transitionId = `page-transition-${Math.random().toString(36).substring(2, 9)}`;
  const $$definedVars = defineStyleVars([{ duration: `${duration}s`, easing, color }]);
  return renderTemplate(_a || (_a = __template(["", "<div", "", "", "", "", "", "", " data-astro-cid-onu3xadm", '> <div class="transition-overlay" data-astro-cid-onu3xadm', "></div> </div>  <script>(function(){", "\n  document.addEventListener('DOMContentLoaded', () => {\n    const transitionElement = document.getElementById(transitionId);\n    if (!transitionElement) return;\n\n    // Get transition options from data attributes\n    const transition = transitionElement.dataset.transition || 'fade';\n    const duration = parseFloat(transitionElement.dataset.duration || '0.5') * 1000;\n    const easing = transitionElement.dataset.easing || 'cubic-bezier(0.16, 1, 0.3, 1)';\n    const direction = transitionElement.dataset.direction || 'up';\n    const respectReducedMotion = transitionElement.dataset.respectReducedMotion === 'true';\n\n    // Check if user prefers reduced motion\n    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n\n    // Skip transition for \"none\" type or if user prefers reduced motion\n    if (transition === 'none' || (prefersReducedMotion && respectReducedMotion)) {\n      transitionElement.style.display = 'none';\n      return;\n    }\n\n    // Add transition class based on direction\n    if (transition === 'slide') {\n      transitionElement.classList.add(`direction-${direction}`);\n    }\n\n    // Handle link clicks for page transitions with enhanced effects\n    document.addEventListener('click', (e) => {\n      // Only handle internal links\n      const target = e.target.closest('a');\n      if (!target) return;\n\n      const href = target.getAttribute('href');\n      if (!href ||\n          href.startsWith('#') ||\n          href.startsWith('http') ||\n          href.startsWith('mailto:') ||\n          href.startsWith('tel:') ||\n          target.getAttribute('target') === '_blank' ||\n          target.getAttribute('download') ||\n          target.hasAttribute('data-no-transition')) {\n        return;\n      }\n\n      // Prevent default navigation\n      e.preventDefault();\n\n      // Get custom transition from link if specified\n      const linkTransition = target.getAttribute('data-transition');\n      const linkDirection = target.getAttribute('data-direction');\n\n      if (linkTransition) {\n        transitionElement.dataset.transition = linkTransition;\n        transitionElement.className = `page-transition transition-${linkTransition}`;\n      }\n\n      if (linkDirection) {\n        transitionElement.dataset.direction = linkDirection;\n        transitionElement.classList.add(`direction-${linkDirection}`);\n      }\n\n      // Start transition with animation\n      transitionElement.classList.add('transitioning');\n\n      // Add subtle page scale effect during transition\n      document.documentElement.style.transition = `transform ${duration/1000}s ${easing}`;\n      document.documentElement.style.transform = 'scale(0.98)';\n\n      // Navigate after transition completes\n      setTimeout(() => {\n        // Store current scroll position\n        sessionStorage.setItem('scrollPosition', window.scrollY);\n\n        // Store transition info for the next page\n        sessionStorage.setItem('lastTransition', linkTransition || transition);\n        sessionStorage.setItem('lastDirection', linkDirection || direction);\n\n        // Navigate to the new page\n        window.location.href = href;\n      }, duration);\n    });\n\n    // Handle page load transition with enhanced effects\n    window.addEventListener('pageshow', (e) => {\n      // Get last transition info if available\n      const lastTransition = sessionStorage.getItem('lastTransition');\n      const lastDirection = sessionStorage.getItem('lastDirection');\n\n      if (lastTransition) {\n        transitionElement.dataset.transition = lastTransition;\n        transitionElement.className = `page-transition transition-${lastTransition}`;\n      }\n\n      if (lastDirection) {\n        transitionElement.dataset.direction = lastDirection;\n        transitionElement.classList.add(`direction-${lastDirection}`);\n      }\n\n      if (e.persisted) {\n        // Page is loaded from back/forward cache\n        transitionElement.classList.add('transitioning-out');\n\n        // Reset page scale\n        document.documentElement.style.transform = 'scale(1)';\n\n        setTimeout(() => {\n          transitionElement.classList.remove('transitioning', 'transitioning-out');\n        }, duration);\n      } else {\n        // Normal page load\n        transitionElement.classList.add('transitioning');\n\n        // Add subtle page scale effect\n        document.documentElement.style.transition = 'none';\n        document.documentElement.style.transform = 'scale(0.98)';\n\n        // Force reflow\n        void document.documentElement.offsetWidth;\n\n        // Animate back to normal\n        document.documentElement.style.transition = `transform ${duration/1000}s ${easing}`;\n        document.documentElement.style.transform = 'scale(1)';\n\n        setTimeout(() => {\n          transitionElement.classList.add('transitioning-out');\n\n          setTimeout(() => {\n            transitionElement.classList.remove('transitioning', 'transitioning-out');\n\n            // Clean up transition info\n            sessionStorage.removeItem('lastTransition');\n            sessionStorage.removeItem('lastDirection');\n          }, duration);\n        }, 100);\n      }\n    });\n\n    // Restore scroll position with smooth scrolling\n    const savedScrollPosition = sessionStorage.getItem('scrollPosition');\n    if (savedScrollPosition) {\n      // Use smooth scroll if available\n      if (window.NosytScroll && typeof window.NosytScroll.scrollToPosition === 'function') {\n        setTimeout(() => {\n          window.NosytScroll.scrollToPosition(parseInt(savedScrollPosition), 'smooth');\n        }, duration + 100);\n      } else {\n        setTimeout(() => {\n          window.scrollTo({\n            top: parseInt(savedScrollPosition),\n            behavior: 'smooth'\n          });\n        }, duration + 100);\n      }\n\n      sessionStorage.removeItem('scrollPosition');\n    }\n\n    // Expose transition API\n    window.NosytTransition = {\n      // Start a transition\n      start: (options = {}) => {\n        const opts = {\n          transition: options.transition || transition,\n          direction: options.direction || direction,\n          duration: options.duration || duration,\n          callback: options.callback || null\n        };\n\n        // Update transition element\n        if (opts.transition !== transition) {\n          transitionElement.dataset.transition = opts.transition;\n          transitionElement.className = `page-transition transition-${opts.transition}`;\n        }\n\n        if (opts.direction !== direction) {\n          transitionElement.dataset.direction = opts.direction;\n          transitionElement.classList.add(`direction-${opts.direction}`);\n        }\n\n        // Start transition\n        transitionElement.classList.add('transitioning');\n\n        // Execute callback after transition\n        if (typeof opts.callback === 'function') {\n          setTimeout(opts.callback, opts.duration);\n        }\n\n        return {\n          // End the transition\n          end: () => {\n            transitionElement.classList.add('transitioning-out');\n\n            setTimeout(() => {\n              transitionElement.classList.remove('transitioning', 'transitioning-out');\n            }, opts.duration);\n          }\n        };\n      }\n    };\n  });\n})();<\/script>"], ["", "<div", "", "", "", "", "", "", " data-astro-cid-onu3xadm", '> <div class="transition-overlay" data-astro-cid-onu3xadm', "></div> </div>  <script>(function(){", "\n  document.addEventListener('DOMContentLoaded', () => {\n    const transitionElement = document.getElementById(transitionId);\n    if (!transitionElement) return;\n\n    // Get transition options from data attributes\n    const transition = transitionElement.dataset.transition || 'fade';\n    const duration = parseFloat(transitionElement.dataset.duration || '0.5') * 1000;\n    const easing = transitionElement.dataset.easing || 'cubic-bezier(0.16, 1, 0.3, 1)';\n    const direction = transitionElement.dataset.direction || 'up';\n    const respectReducedMotion = transitionElement.dataset.respectReducedMotion === 'true';\n\n    // Check if user prefers reduced motion\n    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n\n    // Skip transition for \"none\" type or if user prefers reduced motion\n    if (transition === 'none' || (prefersReducedMotion && respectReducedMotion)) {\n      transitionElement.style.display = 'none';\n      return;\n    }\n\n    // Add transition class based on direction\n    if (transition === 'slide') {\n      transitionElement.classList.add(\\`direction-\\${direction}\\`);\n    }\n\n    // Handle link clicks for page transitions with enhanced effects\n    document.addEventListener('click', (e) => {\n      // Only handle internal links\n      const target = e.target.closest('a');\n      if (!target) return;\n\n      const href = target.getAttribute('href');\n      if (!href ||\n          href.startsWith('#') ||\n          href.startsWith('http') ||\n          href.startsWith('mailto:') ||\n          href.startsWith('tel:') ||\n          target.getAttribute('target') === '_blank' ||\n          target.getAttribute('download') ||\n          target.hasAttribute('data-no-transition')) {\n        return;\n      }\n\n      // Prevent default navigation\n      e.preventDefault();\n\n      // Get custom transition from link if specified\n      const linkTransition = target.getAttribute('data-transition');\n      const linkDirection = target.getAttribute('data-direction');\n\n      if (linkTransition) {\n        transitionElement.dataset.transition = linkTransition;\n        transitionElement.className = \\`page-transition transition-\\${linkTransition}\\`;\n      }\n\n      if (linkDirection) {\n        transitionElement.dataset.direction = linkDirection;\n        transitionElement.classList.add(\\`direction-\\${linkDirection}\\`);\n      }\n\n      // Start transition with animation\n      transitionElement.classList.add('transitioning');\n\n      // Add subtle page scale effect during transition\n      document.documentElement.style.transition = \\`transform \\${duration/1000}s \\${easing}\\`;\n      document.documentElement.style.transform = 'scale(0.98)';\n\n      // Navigate after transition completes\n      setTimeout(() => {\n        // Store current scroll position\n        sessionStorage.setItem('scrollPosition', window.scrollY);\n\n        // Store transition info for the next page\n        sessionStorage.setItem('lastTransition', linkTransition || transition);\n        sessionStorage.setItem('lastDirection', linkDirection || direction);\n\n        // Navigate to the new page\n        window.location.href = href;\n      }, duration);\n    });\n\n    // Handle page load transition with enhanced effects\n    window.addEventListener('pageshow', (e) => {\n      // Get last transition info if available\n      const lastTransition = sessionStorage.getItem('lastTransition');\n      const lastDirection = sessionStorage.getItem('lastDirection');\n\n      if (lastTransition) {\n        transitionElement.dataset.transition = lastTransition;\n        transitionElement.className = \\`page-transition transition-\\${lastTransition}\\`;\n      }\n\n      if (lastDirection) {\n        transitionElement.dataset.direction = lastDirection;\n        transitionElement.classList.add(\\`direction-\\${lastDirection}\\`);\n      }\n\n      if (e.persisted) {\n        // Page is loaded from back/forward cache\n        transitionElement.classList.add('transitioning-out');\n\n        // Reset page scale\n        document.documentElement.style.transform = 'scale(1)';\n\n        setTimeout(() => {\n          transitionElement.classList.remove('transitioning', 'transitioning-out');\n        }, duration);\n      } else {\n        // Normal page load\n        transitionElement.classList.add('transitioning');\n\n        // Add subtle page scale effect\n        document.documentElement.style.transition = 'none';\n        document.documentElement.style.transform = 'scale(0.98)';\n\n        // Force reflow\n        void document.documentElement.offsetWidth;\n\n        // Animate back to normal\n        document.documentElement.style.transition = \\`transform \\${duration/1000}s \\${easing}\\`;\n        document.documentElement.style.transform = 'scale(1)';\n\n        setTimeout(() => {\n          transitionElement.classList.add('transitioning-out');\n\n          setTimeout(() => {\n            transitionElement.classList.remove('transitioning', 'transitioning-out');\n\n            // Clean up transition info\n            sessionStorage.removeItem('lastTransition');\n            sessionStorage.removeItem('lastDirection');\n          }, duration);\n        }, 100);\n      }\n    });\n\n    // Restore scroll position with smooth scrolling\n    const savedScrollPosition = sessionStorage.getItem('scrollPosition');\n    if (savedScrollPosition) {\n      // Use smooth scroll if available\n      if (window.NosytScroll && typeof window.NosytScroll.scrollToPosition === 'function') {\n        setTimeout(() => {\n          window.NosytScroll.scrollToPosition(parseInt(savedScrollPosition), 'smooth');\n        }, duration + 100);\n      } else {\n        setTimeout(() => {\n          window.scrollTo({\n            top: parseInt(savedScrollPosition),\n            behavior: 'smooth'\n          });\n        }, duration + 100);\n      }\n\n      sessionStorage.removeItem('scrollPosition');\n    }\n\n    // Expose transition API\n    window.NosytTransition = {\n      // Start a transition\n      start: (options = {}) => {\n        const opts = {\n          transition: options.transition || transition,\n          direction: options.direction || direction,\n          duration: options.duration || duration,\n          callback: options.callback || null\n        };\n\n        // Update transition element\n        if (opts.transition !== transition) {\n          transitionElement.dataset.transition = opts.transition;\n          transitionElement.className = \\`page-transition transition-\\${opts.transition}\\`;\n        }\n\n        if (opts.direction !== direction) {\n          transitionElement.dataset.direction = opts.direction;\n          transitionElement.classList.add(\\`direction-\\${opts.direction}\\`);\n        }\n\n        // Start transition\n        transitionElement.classList.add('transitioning');\n\n        // Execute callback after transition\n        if (typeof opts.callback === 'function') {\n          setTimeout(opts.callback, opts.duration);\n        }\n\n        return {\n          // End the transition\n          end: () => {\n            transitionElement.classList.add('transitioning-out');\n\n            setTimeout(() => {\n              transitionElement.classList.remove('transitioning', 'transitioning-out');\n            }, opts.duration);\n          }\n        };\n      }\n    };\n  });\n})();<\/script>"])), maybeRenderHead(), addAttribute(transitionId, "id"), addAttribute(`page-transition transition-${transition} direction-${direction}`, "class"), addAttribute(transition, "data-transition"), addAttribute(duration, "data-duration"), addAttribute(easing, "data-easing"), addAttribute(direction, "data-direction"), addAttribute(respectReducedMotion.toString(), "data-respect-reduced-motion"), addAttribute($$definedVars, "style"), addAttribute($$definedVars, "style"), defineScriptVars({ transitionId }));
}, "/mnt/persist/workspace/src/components/animations/PageTransition.astro", void 0);
export {
  $$AnimatedSection as $,
  $$PageTransition as a
};
