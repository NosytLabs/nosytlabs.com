#!/usr/bin/env node
/**
 * CSS Token Generator
 * Automatically generates design-tokens.css from the TypeScript token definitions
 * This ensures consistency and eliminates duplication between JS and CSS tokens
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Get __dirname equivalent in ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Import the tokens from the TypeScript file
import { colors, fonts, typography, spacing, borderRadius, shadows, animations, zIndex, breakpoints, containers } from '../src/styles/tokens/index.ts';

/**
 * Convert camelCase to kebab-case
 */
function toKebabCase(str) {
  return str.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, '$1-$2').toLowerCase();
}

/**
 * Generate CSS custom properties from color tokens
 */
function generateColorTokens(colorObj, prefix = 'color') {
  let css = '';
  
  for (const [colorName, colorValues] of Object.entries(colorObj)) {
    if (typeof colorValues === 'object') {
      for (const [shade, value] of Object.entries(colorValues)) {
        css += `    --${prefix}-${toKebabCase(colorName)}-${shade}: ${value};\n`;
      }
    } else {
      css += `    --${prefix}-${toKebabCase(colorName)}: ${colorValues};\n`;
    }
  }
  
  return css;
}

/**
 * Generate CSS custom properties from font tokens
 */
function generateFontTokens(fontObj) {
  let css = '';
  
  for (const [fontName, fontValue] of Object.entries(fontObj)) {
    css += `    --font-family-${toKebabCase(fontName)}: ${fontValue};\n`;
  }
  
  return css;
}

/**
 * Generate CSS custom properties from generic token objects
 */
function generateGenericTokens(tokenObj, prefix) {
  let css = '';
  
  for (const [tokenName, tokenValue] of Object.entries(tokenObj)) {
    if (typeof tokenValue === 'object' && tokenValue !== null) {
      for (const [subName, subValue] of Object.entries(tokenValue)) {
        css += `    --${prefix}-${toKebabCase(tokenName)}-${toKebabCase(subName)}: ${subValue};\n`;
      }
    } else {
      css += `    --${prefix}-${toKebabCase(tokenName)}: ${tokenValue};\n`;
    }
  }
  
  return css;
}

/**
 * Generate the complete CSS file content
 */
function generateCSSContent() {
  const header = `/**
 * Design Token System - CSS Variables
 * This file is auto-generated from the design tokens defined in index.ts
 * Do not edit this file directly - run 'npm run generate:tokens' instead
 */\n\n@layer tokens {\n  :root {\n`;
  
  const fontSection = `    /* Font Families */\n${generateFontTokens(fonts)}\n`;
  const typographySection = `    /* Typography */\n${generateGenericTokens(typography, 'typography')}\n`;
  const spacingSection = `    /* Spacing */\n${generateGenericTokens(spacing, 'spacing')}\n`;
  const borderRadiusSection = `    /* Border Radius */\n${generateGenericTokens(borderRadius, 'border-radius')}\n`;
  const shadowsSection = `    /* Shadows */\n${generateGenericTokens(shadows, 'shadow')}\n`;
  const animationsSection = `    /* Animations */\n${generateGenericTokens(animations, 'animation')}\n`;
  const zIndexSection = `    /* Z-Index */\n${generateGenericTokens(zIndex, 'z-index')}\n`;
  const breakpointsSection = `    /* Breakpoints */\n${generateGenericTokens(breakpoints, 'breakpoint')}\n`;
  const containersSection = `    /* Containers */\n${generateGenericTokens(containers, 'container')}\n`;
  const colorSection = `    /* Colors */\n${generateColorTokens(colors)}`;
  
  const footer = `  }\n}\n`;
  
  return header + fontSection + typographySection + spacingSection + borderRadiusSection + shadowsSection + animationsSection + zIndexSection + breakpointsSection + containersSection + colorSection + footer;
}

/**
 * Write the generated CSS to the design-tokens.css file
 */
function writeTokensFile() {
  console.log('üîÑ Generating CSS tokens...');
  console.log('üì¶ Available tokens:', { 
    colors: Object.keys(colors).length, 
    fonts: Object.keys(fonts).length,
    typography: Object.keys(typography).length,
    spacing: Object.keys(spacing).length,
    borderRadius: Object.keys(borderRadius).length,
    shadows: Object.keys(shadows).length,
    animations: Object.keys(animations).length,
    zIndex: Object.keys(zIndex).length,
    breakpoints: Object.keys(breakpoints).length,
    containers: Object.keys(containers).length
  });
  
  const cssContent = generateCSSContent();
  const outputPath = path.join(__dirname, '../src/styles/tokens/design-tokens.css');
  
  try {
    fs.writeFileSync(outputPath, cssContent, 'utf8');
    console.log('‚úÖ Successfully generated design-tokens.css');
    console.log(`üìÅ Output: ${outputPath}`);
    console.log(`üìè Generated ${cssContent.split('\n').length} lines of CSS`);
  } catch (error) {
    console.error('‚ùå Error writing design-tokens.css:', error.message);
    process.exit(1);
  }
}

// Run the generator
writeTokensFile();

export {
  generateCSSContent,
  writeTokensFile,
  generateColorTokens,
  generateFontTokens
};