name: Performance Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run performance tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_url:
        description: 'URL to test (optional, defaults to preview deployment)'
        required: false
        type: string
      lighthouse_runs:
        description: 'Number of Lighthouse runs'
        required: false
        default: '3'
        type: string

env:
  NODE_VERSION: '18'
  LIGHTHOUSE_CI_BUILD_PATH: './dist'

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    outputs:
      preview-url: ${{ steps.deploy.outputs.preview-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npm run type-check

      - name: Build application
        run: npm run build

      - name: Install Playwright (for testing scripts)
        run: |
          npm install playwright
          npx playwright install chromium

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 1

      - name: Deploy to Vercel Preview
        id: deploy
        if: github.event_name == 'pull_request'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}

  lighthouse-ci:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_TOKEN: ${{ secrets.LHCI_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ] && [ -n "${{ needs.build.outputs.preview-url }}" ]; then
            lhci autorun --url="${{ needs.build.outputs.preview-url }}"
          elif [ -n "${{ github.event.inputs.test_url }}" ]; then
            lhci autorun --url="${{ github.event.inputs.test_url }}"
          else
            lhci autorun
          fi

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 30

  performance-budget:
    name: Performance Budget Check
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Analyze bundle size
        run: |
          npm install -g bundlesize
          npm run analyze || true

      - name: Check Performance Budget
        run: |
          echo "Checking performance budget..."
          # Run performance budget validation
          node scripts/validate-performance-budget.js performance-budget.json performance-report.json
        continue-on-error: false

      - name: Generate Performance Report
        run: |
          echo "Generating comprehensive performance report..."
          # Create performance report from Lighthouse and Web Vitals data
          node -e "
          const fs = require('fs');
          const path = require('path');
          
          // Read Lighthouse results
          let lighthouseData = {};
          try {
            const lhciDir = '.lighthouseci';
            if (fs.existsSync(lhciDir)) {
              const files = fs.readdirSync(lhciDir);
              const reportFile = files.find(f => f.endsWith('.json'));
              if (reportFile) {
                lighthouseData = JSON.parse(fs.readFileSync(path.join(lhciDir, reportFile), 'utf8'));
              }
            }
          } catch (e) {
            console.warn('Could not read Lighthouse data:', e.message);
          }
          
          // Generate combined report
          const report = {
            timestamp: new Date().toISOString(),
            coreWebVitals: {
              lcp: lighthouseData.audits?.['largest-contentful-paint']?.numericValue || 0,
              fid: lighthouseData.audits?.['max-potential-fid']?.numericValue || 0,
              cls: lighthouseData.audits?.['cumulative-layout-shift']?.numericValue || 0,
              fcp: lighthouseData.audits?.['first-contentful-paint']?.numericValue || 0,
              ttfb: lighthouseData.audits?.['server-response-time']?.numericValue || 0
            },
            resourceBudgets: {
              totalSize: lighthouseData.audits?.['total-byte-weight']?.numericValue || 0,
              jsSize: lighthouseData.audits?.['unused-javascript']?.details?.overallSavingsBytes || 0,
              cssSize: lighthouseData.audits?.['unused-css-rules']?.details?.overallSavingsBytes || 0,
              imageSize: lighthouseData.audits?.['uses-optimized-images']?.details?.overallSavingsBytes || 0
            },
            networkBudgets: {
              requests: lighthouseData.audits?.['network-requests']?.details?.items?.length || 0,
              thirdPartyRequests: lighthouseData.audits?.['third-party-summary']?.details?.items?.length || 0
            },
            lighthouse: {
              performance: lighthouseData.categories?.performance?.score * 100 || 0,
              accessibility: lighthouseData.categories?.accessibility?.score * 100 || 0,
              bestPractices: lighthouseData.categories?.['best-practices']?.score * 100 || 0,
              seo: lighthouseData.categories?.seo?.score * 100 || 0
            }
          };
          
          fs.writeFileSync('performance-report.json', JSON.stringify(report, null, 2));
          console.log('Performance report generated successfully');
          "
          
          echo "# Performance Report" > performance-report.md
          echo "" >> performance-report.md
          echo "## Bundle Analysis" >> performance-report.md
          echo "Generated on: $(date)" >> performance-report.md
          echo "Commit: ${{ github.sha }}" >> performance-report.md
          echo "" >> performance-report.md
          
          if [ -d "dist" ]; then
            echo "### Bundle Sizes" >> performance-report.md
            echo "\`\`\`" >> performance-report.md
            du -sh dist/* 2>/dev/null || echo "No files found" >> performance-report.md
            echo "\`\`\`" >> performance-report.md
          fi

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-report
          path: performance-report.md
          retention-days: 30

  comprehensive-performance-test:
    name: Comprehensive Performance Testing
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: |
          npm install -g playwright
          npx playwright install chromium

      - name: Start local server
        run: |
          npm run preview &
          sleep 10
        env:
          CI: true

      - name: Run Performance Test Suite
        run: |
          TEST_URL="http://localhost:4173"
          if [ "${{ github.event_name }}" = "pull_request" ] && [ -n "${{ needs.build.outputs.preview-url }}" ]; then
            TEST_URL="${{ needs.build.outputs.preview-url }}"
          elif [ -n "${{ github.event.inputs.test_url }}" ]; then
            TEST_URL="${{ github.event.inputs.test_url }}"
          fi
          
          echo "Testing URL: $TEST_URL"
          node scripts/performance-test-suite.js --url "$TEST_URL" --runs 3 --outputDir ./performance-results
        continue-on-error: false

      - name: Run Load Testing
        run: |
          TEST_URL="http://localhost:4173"
          if [ "${{ github.event_name }}" = "pull_request" ] && [ -n "${{ needs.build.outputs.preview-url }}" ]; then
            TEST_URL="${{ needs.build.outputs.preview-url }}"
          elif [ -n "${{ github.event.inputs.test_url }}" ]; then
            TEST_URL="${{ github.event.inputs.test_url }}"
          fi
          
          echo "Load testing URL: $TEST_URL"
          node scripts/load-test.js --url "$TEST_URL" --scenarios "light,moderate" --outputDir ./load-test-results
        continue-on-error: true

      - name: Upload Performance Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            ./performance-results/
            ./load-test-results/
          retention-days: 30

  comment-pr:
    name: Comment on PR
    runs-on: ubuntu-latest
    needs: [lighthouse-ci, performance-budget, comprehensive-performance-test]
    if: github.event_name == 'pull_request' && always()
    steps:
      - name: Download performance report
        uses: actions/download-artifact@v4
        with:
          name: performance-report
          path: ./reports/
        continue-on-error: true

      - name: Download performance test results
        uses: actions/download-artifact@v4
        with:
          name: performance-test-results
          path: ./test-results/
        continue-on-error: true

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            let comment = '## 🚀 Performance Test Results\n\n';
            
            // Add job statuses
            const jobs = {
              'Lighthouse CI': '${{ needs.lighthouse-ci.result }}',
              'Performance Budget': '${{ needs.performance-budget.result }}',
              'Comprehensive Performance Test': '${{ needs.comprehensive-performance-test.result }}'
            };
            
            Object.entries(jobs).forEach(([job, result]) => {
              const icon = result === 'success' ? '✅' : result === 'failure' ? '❌' : '⚠️';
              comment += `${icon} **${job}**: ${result}\n`;
            });
            
            comment += '\n';
            
            // Add performance test summary
            try {
              const perfResultsPath = './test-results/performance-results/performance-results.json';
              if (fs.existsSync(perfResultsPath)) {
                const perfResults = JSON.parse(fs.readFileSync(perfResultsPath, 'utf8'));
                const summary = perfResults.summary;
                
                comment += '### 📊 Performance Test Summary\n\n';
                comment += `| Metric | Value |\n`;
                comment += `|--------|-------|\n`;
                comment += `| Load Time (avg) | ${Math.round(summary.loadTime.avg)}ms |\n`;
                comment += `| TTFB (avg) | ${Math.round(summary.firstByte.avg)}ms |\n`;
                comment += `| Resources (avg) | ${Math.round(summary.resourceCount.avg)} |\n`;
                comment += `| Total Errors | ${summary.totalErrors} |\n\n`;
                
                if (perfResults.budget && perfResults.budget.violations.length > 0) {
                  comment += '### ⚠️ Budget Violations\n\n';
                  perfResults.budget.violations.forEach(v => {
                    const icon = v.severity === 'error' ? '❌' : '⚠️';
                    comment += `${icon} **${v.metric}**: ${v.actual}ms (threshold: ${v.threshold}ms)\n`;
                  });
                  comment += '\n';
                }
              }
            } catch (error) {
              console.log('Could not read performance test results:', error.message);
            }
            
            // Add load test summary
            try {
              const loadResultsPath = './test-results/load-test-results/load-test-results.json';
              if (fs.existsSync(loadResultsPath)) {
                const loadResults = JSON.parse(fs.readFileSync(loadResultsPath, 'utf8'));
                const summary = loadResults.summary;
                
                comment += '### 🔥 Load Test Summary\n\n';
                comment += `| Metric | Value |\n`;
                comment += `|--------|-------|\n`;
                comment += `| Total Requests | ${summary.totalRequests} |\n`;
                comment += `| Success Rate | ${summary.overallSuccessRate.toFixed(1)}% |\n`;
                comment += `| Avg Response Time | ${Math.round(summary.averageResponseTime)}ms |\n`;
                comment += `| Peak RPS | ${summary.maxRequestsPerSecond.toFixed(2)} |\n`;
                comment += `| Total Errors | ${summary.totalErrors} |\n\n`;
              }
            } catch (error) {
              console.log('Could not read load test results:', error.message);
            }
            
            // Add performance report if available
            try {
              const report = fs.readFileSync('./reports/performance-report.md', 'utf8');
              comment += '### 📈 Detailed Performance Report\n\n';
              comment += report;
            } catch (error) {
              comment += '_Detailed performance report not available_\n';
            }
            
            comment += '\n---\n';
            comment += `🔗 [View detailed results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });