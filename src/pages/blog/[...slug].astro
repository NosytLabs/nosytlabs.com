---
import { getCollection } from 'astro:content';
import MainLayout from '../../layouts/MainLayout.astro';
import { formatDate } from '@/lib/utils/date-utils';
import Breadcrumbs from '../../components/ui/Breadcrumbs.astro';
import Button from '../../components/ui/Button.astro';
import { createInternalLink, createImagePath, SITE_CONFIG } from '../../lib/constants';
import RelatedPosts from '../../components/blog/RelatedPosts.astro';
import SocialShare from '../../components/blog/SocialShare.astro';
import { getRelatedPosts } from '../../lib/blog-utils';
import type { BlogPost } from '../../types/blog';

export async function getStaticPaths() {
  const posts = await getCollection('blog', ({ data }) => !data.draft);
  
  return posts.map((post: BlogPost) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

const post = Astro.props as BlogPost;

// Add safety check for post and post.data
if (!post || !post.data) {
  throw new Error('Blog post not found or missing data');
}

const { Content } = await post.render();

// Get all posts for related posts
const allPosts = await getCollection('blog', ({ data }: BlogPost) => !data.draft);
const relatedPosts = getRelatedPosts(post, allPosts, 3);

// Generate full URL for social sharing
const fullUrl = `${SITE_CONFIG.BASE_URL}/blog/${post.slug}`;
const canonicalPostUrl = `${SITE_CONFIG.BASE_URL}/blog/${post.slug}`;

const blogPostJsonLd = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": post.data.title || "Untitled",
  "description": post.data.description || "",
  "excerpt": post.data.excerpt || post.data.description || "",
  "url": canonicalPostUrl,
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": canonicalPostUrl
  },
  "datePublished": post.data.pubDate ? post.data.pubDate.toISOString() : new Date().toISOString(),
  "dateModified": post.data.updatedDate?.toISOString() || post.data.pubDate?.toISOString() || new Date().toISOString(),
  "author": {
    "@type": "Person",
    "name": post.data.author || "NOSYT Labs Team",
    "url": `${SITE_CONFIG.BASE_URL}/about`
  },
  "publisher": {
    "@type": "Organization",
    "name": "NOSYT Labs",
    "logo": {
      "@type": "ImageObject",
      "url": `${SITE_CONFIG.BASE_URL}/images/logo-icon.webp`,
      "width": 512,
      "height": 512
    },
    "url": SITE_CONFIG.BASE_URL
  },
  "image": {
    "@type": "ImageObject",
    "url": post.data.heroImage 
      ? `${SITE_CONFIG.BASE_URL}${post.data.heroImage.startsWith('/') ? '' : '/'}${post.data.heroImage}` 
      : `${SITE_CONFIG.BASE_URL}/images/og-image.svg`,
    "width": 1200,
    "height": 630
  },
  "keywords": post.data.seoKeywords?.join(", ") || post.data.tags?.join(", ") || "",
  "articleSection": post.data.category || "Technology",
  "wordCount": post.data.readingTime ? Math.round(post.data.readingTime * 200) : 1000,
  "timeRequired": post.data.readingTime ? `PT${post.data.readingTime}M` : "PT5M",
  "inLanguage": "en-US",
  "isPartOf": {
    "@type": "Blog",
    "@id": `${SITE_CONFIG.BASE_URL}/blog`,
    "name": "NOSYT Labs Blog"
  }
};

const breadcrumbJsonLd = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": [
    {
      "@type": "ListItem",
      "position": 1,
      "name": "Home",
      "item": SITE_CONFIG.BASE_URL
    },
    {
      "@type": "ListItem",
      "position": 2,
      "name": "Blog",
      "item": `${SITE_CONFIG.BASE_URL}/blog`
    },
    {
      "@type": "ListItem",
      "position": 3,
      "name": post.data.title,
      "item": canonicalPostUrl
    }
  ]
};
---

<MainLayout 
  title={`${post.data.title} - NOSYT Labs Blog`}
  description={post.data.excerpt || post.data.description}
  keywords={post.data.seoKeywords || post.data.tags || []}
  image={post.data.heroImage ? createImagePath(post.data.heroImage) : createImagePath('images/blog-index-og.jpg')}
  
>
<div class="fixed top-0 left-0 w-full h-1 bg-gradient-to-r from-accent to-primary origin-left animate-reading-progress animation-timeline-scroll-root z-header"></div>
  <script type="application/ld+json" is:inline set:html={JSON.stringify(blogPostJsonLd)} />
  <script type="application/ld+json" is:inline set:html={JSON.stringify(breadcrumbJsonLd)} />
  
  <div class="min-h-screen bg-gradient-to-br from-background via-card to-primary/10 dark:from-background dark:via-muted dark:to-primary/20">
<article class="container py-20">
      <Breadcrumbs items={[{ name: 'Home', url: createInternalLink('/') }, { name: 'Blog', url: createInternalLink('/blog') }, { name: post.data.title }]} />
      <!-- Back to Blog -->
      <div class="mb-8">
        <Button href={createInternalLink("/blog")} text="Back to Blog" variant="outline" size="sm" icon="arrow-left" />
      </div>

      <!-- Hero Image -->
      {post.data.heroImage && (
        <div class="aspect-video mb-8 rounded-2xl overflow-hidden">
          <img 
            src={createImagePath(post.data.heroImage)} 
            alt={post.data.heroImageAlt || `Featured image for ${post.data.title}`}
            title={post.data.title}
            class="w-full h-full object-cover"
            width="1280"
            height="720"
            loading="eager"
            fetchpriority="high"
            decoding="async"
            onerror={`this.onerror=null; this.src='${createImagePath('images/blog-index-og.jpg')}'; this.alt='NOSYT Labs Blog Post Fallback Image'; void 0;`}
          />
        </div>
      )}

      <!-- Article Header -->
      <header class="mb-12">
        <div class="flex flex-col sm:flex-row sm:items-center gap-4 text-sm text-muted-foreground mb-6">
          <time 
            datetime={post.data.pubDate ? post.data.pubDate.toISOString() : new Date().toISOString()}
            class="text-muted-foreground"
          >
            {formatDate(post.data.pubDate)}
          </time>
          
          {post.data.author && (
            <div class="flex items-center gap-2">
              <span>by</span>
              <span class="font-medium text-foreground">{post.data.author}</span>
            </div>
          )}
          
          {post.data.readingTime && (
            <div class="flex items-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              <span>{post.data.readingTime} read</span>
            </div>
          )}
          
          {post.data.tags && post.data.tags.length > 0 && (
            <div class="flex gap-2">
              {post.data.tags.map((tag) => (
                <span class="px-3 py-1 text-sm font-medium bg-primary/10 text-primary rounded-full">
                  {tag}
                </span>
              ))}
            </div>
          )}
        </div>
        
        <h1 class="text-4xl md:text-5xl font-bold mb-6 text-foreground">
          {post.data.title}
        </h1>
        
        <p class="text-lg text-muted-foreground mb-8">
          {post.data.description}
        </p>
      </header>

      <!-- Article Content -->
      <article class="prose prose-lg dark:prose-invert max-w-none blog-content">
        <Content />
      </article>

      <!-- Social Share -->
      <div class="mt-12">
        <SocialShare 
          title={post.data.title}
          url={fullUrl}
          description={post.data.description}
        />
      </div>

      <!-- Article Footer -->
      <footer class="mt-16 pt-8 border-t border-border">
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
          <div>
            {post.data.updatedDate && (
              <p class="text-sm text-muted-foreground">
                Last updated: {formatDate(post.data.updatedDate)}
              </p>
            )}
          </div>
          
          <div class="flex gap-4">
            <Button href={createInternalLink("/blog")} text="Back to Blog" variant="outline" size="sm" />
            <Button href={createInternalLink("/contact")} text="Get In Touch" variant="primary" size="sm" />
          </div>
        </div>
      </footer>

      <!-- Related Posts -->
      <RelatedPosts posts={relatedPosts} currentSlug={post.slug} />
    </article>
  </div>
</MainLayout>