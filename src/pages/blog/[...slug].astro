---
import { getCollection, type CollectionEntry } from 'astro:content';
import MainLayout from '../../layouts/MainLayout.astro';
import { formatDate } from '../../utils/date';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

type Props = CollectionEntry<'blog'>;

const post = Astro.props;
const { Content } = await post.render();

const blogPostJsonLd = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": post.data.title,
  "description": post.data.description,
  "url": `https://nosytlabs.com/blog/${post.slug}`,
  "datePublished": post.data.pubDate.toISOString(),
  "dateModified": post.data.updatedDate?.toISOString() || post.data.pubDate.toISOString(),
  "author": {
    "@type": "Organization",
    "name": "Nosyt Labs"
  },
  "publisher": {
    "@type": "Organization",
    "name": "Nosyt Labs",
    "logo": {
      "@type": "ImageObject",
      "url": "https://nosytlabs.com/images/logo-icon.webp"
    }
  },
  "image": post.data.heroImage ? `https://nosytlabs.com${post.data.heroImage}` : "https://nosytlabs.com/images/og-image.jpg",
  "keywords": post.data.tags?.join(", ") || ""
};
---

<MainLayout 
  title={`${post.data.title} - Nosyt Labs Blog`}
  description={post.data.description}
  ogImage={post.data.heroImage || '/images/blog-og.jpg'}
>
  <script type="application/ld+json" set:html={JSON.stringify(blogPostJsonLd)} />
  
  <div class="min-h-screen bg-gradient-to-br from-slate-50 via-white to-blue-50 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900">
    <article class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
      <!-- Back to Blog -->
      <div class="mb-8">
        <a 
          href="/blog" 
          class="inline-flex items-center text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 transition-colors"
        >
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
          </svg>
          Back to Blog
        </a>
      </div>

      <!-- Hero Image -->
      {post.data.heroImage && (
        <div class="aspect-video mb-8 rounded-2xl overflow-hidden">
          <img 
            src={post.data.heroImage} 
            alt={post.data.title}
            class="w-full h-full object-cover"
            loading="eager"
          />
        </div>
      )}

      <!-- Article Header -->
      <header class="mb-12">
        <div class="flex items-center gap-4 mb-6">
          <time 
            datetime={post.data.pubDate.toISOString()}
            class="text-slate-500 dark:text-slate-400"
          >
            {formatDate(post.data.pubDate)}
          </time>
          
          {post.data.tags && post.data.tags.length > 0 && (
            <div class="flex gap-2">
              {post.data.tags.map((tag) => (
                <span class="px-3 py-1 text-sm font-medium bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded-full">
                  {tag}
                </span>
              ))}
            </div>
          )}
        </div>
        
        <h1 class="text-4xl md:text-5xl font-bold text-slate-900 dark:text-white mb-4">
          {post.data.title}
        </h1>
        
        <p class="text-xl text-slate-600 dark:text-slate-300">
          {post.data.description}
        </p>
        
        {post.data.readingTime && (
          <div class="mt-4 text-sm text-slate-500 dark:text-slate-400">
            {post.data.readingTime} read
          </div>
        )}
      </header>

      <!-- Article Content -->
      <div class="prose prose-lg prose-slate dark:prose-invert max-w-none">
        <Content />
      </div>

      <!-- Article Footer -->
      <footer class="mt-16 pt-8 border-t border-slate-200 dark:border-slate-700">
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
          <div>
            {post.data.updatedDate && (
              <p class="text-sm text-slate-500 dark:text-slate-400">
                Last updated: {formatDate(post.data.updatedDate)}
              </p>
            )}
          </div>
          
          <div class="flex gap-4">
            <a 
              href="/blog" 
              class="inline-flex items-center px-4 py-2 text-sm font-medium text-slate-700 dark:text-slate-300 bg-slate-100 dark:bg-slate-800 rounded-lg hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors"
            >
              More Articles
            </a>
            <a 
              href="/contact" 
              class="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors"
            >
              Get In Touch
            </a>
          </div>
        </div>
      </footer>
    </article>
  </div>
</MainLayout>

<style>
  /* Custom prose styles for better readability */
  .prose {
    --tw-prose-body: theme('colors.slate.700');
    --tw-prose-headings: theme('colors.slate.900');
    --tw-prose-lead: theme('colors.slate.600');
    --tw-prose-links: theme('colors.blue.600');
    --tw-prose-bold: theme('colors.slate.900');
    --tw-prose-counters: theme('colors.slate.500');
    --tw-prose-bullets: theme('colors.slate.300');
    --tw-prose-hr: theme('colors.slate.200');
    --tw-prose-quotes: theme('colors.slate.900');
    --tw-prose-quote-borders: theme('colors.slate.200');
    --tw-prose-captions: theme('colors.slate.500');
    --tw-prose-code: theme('colors.slate.900');
    --tw-prose-pre-code: theme('colors.slate.200');
    --tw-prose-pre-bg: theme('colors.slate.800');
    --tw-prose-th-borders: theme('colors.slate.300');
    --tw-prose-td-borders: theme('colors.slate.200');
  }
  
  .dark .prose {
    --tw-prose-body: theme('colors.slate.300');
    --tw-prose-headings: theme('colors.white');
    --tw-prose-lead: theme('colors.slate.400');
    --tw-prose-links: theme('colors.blue.400');
    --tw-prose-bold: theme('colors.white');
    --tw-prose-counters: theme('colors.slate.400');
    --tw-prose-bullets: theme('colors.slate.600');
    --tw-prose-hr: theme('colors.slate.700');
    --tw-prose-quotes: theme('colors.slate.100');
    --tw-prose-quote-borders: theme('colors.slate.700');
    --tw-prose-captions: theme('colors.slate.400');
    --tw-prose-code: theme('colors.white');
    --tw-prose-pre-code: theme('colors.slate.300');
    --tw-prose-pre-bg: theme('colors.slate.800');
    --tw-prose-th-borders: theme('colors.slate.600');
    --tw-prose-td-borders: theme('colors.slate.700');
  }
  
  .prose img {
    border-radius: 0.75rem;
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  }
  
  .prose pre {
    border-radius: 0.75rem;
    border: 1px solid theme('colors.slate.200');
  }
  
  .dark .prose pre {
    border-color: theme('colors.slate.700');
  }
  
  .prose blockquote {
    border-left: 4px solid theme('colors.blue.500');
    background: theme('colors.blue.50');
    padding: 1rem 1.5rem;
    border-radius: 0.5rem;
  }
  
  .dark .prose blockquote {
    background: theme('colors.blue.900/20');
    border-left-color: theme('colors.blue.400');
  }
</style>