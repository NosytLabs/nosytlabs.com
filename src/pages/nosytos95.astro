---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<script is:inline src="/scripts/nosytos95.js"></script>
<script is:inline src="/scripts/nosytos95-part2.js"></script>
<script is:inline src="/scripts/nosytos95-part3.js"></script>
<script is:inline src="/scripts/nosytos95-part4.js"></script>

<!-- New Applications -->
<script is:inline src="/scripts/nosytos95/calculator.js"></script>
<script is:inline src="/scripts/nosytos95/paint.js"></script>
<script is:inline src="/scripts/nosytos95/mediaplayer.js"></script>

<BaseLayout
  title="NosytOS95 - NosytLabs"
  description="Experience the retro Windows 95 aesthetic with NosytOS95, featuring classic applications and games."
  isNosytOS95={true}
>
<main class="nosytos95-container">
  <div class="win95-desktop" id="desktop">
    <!-- Desktop Icons -->
    <div class="desktop-icons">
      <!-- My Computer -->
      <div class="desktop-icon" data-app="my-computer">
        <img src="/images/win95/computer.png" alt="My Computer" class="icon-img">
        <span class="icon-text">My Computer</span>
      </div>

      <!-- Notepad -->
      <div class="desktop-icon" data-app="notepad">
        <img src="/images/win95/notepad.png" alt="Notepad" class="icon-img">
        <span class="icon-text">Notepad</span>
      </div>

      <!-- Duck Hunt -->
      <div class="desktop-icon" data-app="duck-hunt">
        <img src="/images/win95/duck-hunt.png" alt="Duck Hunt" class="icon-img">
        <span class="icon-text">Duck Hunt</span>
      </div>

      <!-- Terminal -->
      <div class="desktop-icon" data-app="terminal">
        <img src="/images/win95/utilities-terminal.png" alt="Terminal" class="icon-img">
        <span class="icon-text">Terminal</span>
      </div>

      <!-- Calculator -->
      <div class="desktop-icon" data-app="calculator">
        <img src="/images/win95/calculator.png" alt="Calculator" class="icon-img">
        <span class="icon-text">Calculator</span>
      </div>

      <!-- Paint -->
      <div class="desktop-icon" data-app="paint">
        <img src="/images/win95/paint.png" alt="Paint" class="icon-img">
        <span class="icon-text">Paint</span>
      </div>

      <!-- Media Player -->
      <div class="desktop-icon" data-app="mediaplayer">
        <img src="/images/win95/mediaplayer.png" alt="Media Player" class="icon-img">
        <span class="icon-text">Media Player</span>
      </div>

      <!-- Help -->
      <div class="desktop-icon" data-app="help">
        <img src="/images/win95/help.png" alt="Help" class="icon-img">
        <span class="icon-text">Help</span>
      </div>

      <!-- Do Not Click Folder -->
      <div class="desktop-icon" data-app="do-not-click">
        <img src="/images/win95/folder.png" alt="Do Not Click" class="icon-img">
        <span class="icon-text">Do Not Click</span>
      </div>
    </div>

    <!-- Windows Container -->
    <div class="windows-container">
      <!-- Notepad Window -->
      <div class="win95-window" id="notepad-window" style="display: none; width: 600px; height: 400px;">
        <div class="window-header">
          <div class="window-title">
            <img src="/images/win95/notepad.png" alt="Notepad" class="window-icon">
            <span>Untitled - Notepad</span>
          </div>
          <div class="window-controls">
            <button class="window-minimize" title="Minimize">_</button>
            <button class="window-maximize" title="Maximize">□</button>
            <button class="window-close" title="Close">×</button>
          </div>
        </div>
        <div class="window-menu">
          <div class="menu-item">File</div>
          <div class="menu-item">Edit</div>
          <div class="menu-item">Search</div>
          <div class="menu-item">Help</div>
        </div>
        <div class="window-content">
          <textarea class="notepad-content"></textarea>
        </div>
        <div class="window-statusbar">
          <span>Ready</span>
        </div>
        <div class="resize-handle resize-handle-se"></div>
        <div class="resize-handle resize-handle-e"></div>
        <div class="resize-handle resize-handle-s"></div>
        <div class="resize-handle resize-handle-sw"></div>
        <div class="resize-handle resize-handle-n"></div>
        <div class="resize-handle resize-handle-w"></div>
        <div class="resize-handle resize-handle-ne"></div>
        <div class="resize-handle resize-handle-nw"></div>
      </div>

      <!-- Duck Hunt Window -->
      <div class="win95-window" id="duck-hunt-window" style="display: none; width: 800px; height: 600px;">
        <div class="window-header">
          <div class="window-title">
            <img src="/images/win95/duck-hunt.png" alt="Duck Hunt" class="window-icon">
            <span>Duck Hunt</span>
          </div>
          <div class="window-controls">
            <button class="window-minimize" title="Minimize">_</button>
            <button class="window-maximize" title="Maximize">□</button>
            <button class="window-close" title="Close">×</button>
          </div>
        </div>
        <div class="window-menu">
          <div class="menu-item">Game</div>
          <div class="menu-item">Options</div>
          <div class="menu-item">View</div>
          <div class="menu-item">Help</div>
        </div>
        <div class="window-content duck-hunt-game-content">
          <!-- Duck Hunt Game Canvas -->
          <div class="duck-hunt-game">
            <canvas class="game-canvas" width="400" height="300"></canvas>
            <div class="game-controls">
              <button class="start-button win95-button">Start Game</button>
              <button class="sound-toggle win95-button">🔊</button>
              <button class="high-score-button win95-button">High Scores</button>
            </div>
          </div>
        </div>
        <div class="window-statusbar">
          <span>Duck Hunt | Click to shoot | Press Start to begin</span>
        </div>
        <div class="resize-handle resize-handle-se"></div>
        <div class="resize-handle resize-handle-e"></div>
        <div class="resize-handle resize-handle-s"></div>
        <div class="resize-handle resize-handle-sw"></div>
        <div class="resize-handle resize-handle-n"></div>
        <div class="resize-handle resize-handle-w"></div>
        <div class="resize-handle resize-handle-ne"></div>
        <div class="resize-handle resize-handle-nw"></div>
      </div>

      <!-- Terminal Window -->
      <div class="win95-window" id="terminal-window" style="display: none; width: 640px; height: 480px;">
        <div class="window-header">
          <div class="window-title">
            <img src="/images/win95/utilities-terminal.png" alt="Terminal" class="window-icon">
            <span>Terminal</span>
          </div>
          <div class="window-controls">
            <button class="window-minimize" title="Minimize">_</button>
            <button class="window-maximize" title="Maximize">□</button>
            <button class="window-close" title="Close">×</button>
          </div>
        </div>
        <div class="window-content terminal-content">
          <div class="terminal-output" id="terminal-output">
            Microsoft(R) Windows 95(TM)
            (C)Copyright Microsoft Corp 1981-2025.

            C:\>
          </div>
          <div class="terminal-input-container">
            <span class="terminal-prompt">C:\></span>
            <input type="text" class="terminal-input" id="terminal-input" autocomplete="off">
          </div>
        </div>
        <div class="window-statusbar">
          <span>Terminal | Type 'help' for a list of commands</span>
        </div>
        <div class="resize-handle resize-handle-se"></div>
        <div class="resize-handle resize-handle-e"></div>
        <div class="resize-handle resize-handle-s"></div>
        <div class="resize-handle resize-handle-sw"></div>
        <div class="resize-handle resize-handle-n"></div>
        <div class="resize-handle resize-handle-w"></div>
        <div class="resize-handle resize-handle-ne"></div>
        <div class="resize-handle resize-handle-nw"></div>

      <!-- Help Window -->
      <div class="win95-window" id="help-window" style="display: none; width: 600px; height: 500px;">
        <div class="window-header">
          <div class="window-title">
            <img src="/images/win95/help.png" alt="Help" class="window-icon">
            <span>NosytOS95 Help</span>
          </div>
          <div class="window-controls">
            <button class="window-minimize" title="Minimize">_</button>
            <button class="window-maximize" title="Maximize">□</button>
            <button class="window-close" title="Close">×</button>
          </div>
        </div>
        <div class="window-menu">
          <div class="menu-item">File</div>
          <div class="menu-item">Edit</div>
          <div class="menu-item">Bookmark</div>
          <div class="menu-item">Options</div>
          <div class="menu-item">Help</div>
        </div>
        <div class="window-content help-content">
          <div class="help-sidebar">
            <div class="help-tab help-tab-active" data-tab="contents">Contents</div>
            <div class="help-tab" data-tab="index">Index</div>
            <div class="help-tab" data-tab="search">Search</div>
            <div class="help-topics">
              <div class="help-topic" data-topic="welcome">Welcome to NosytOS95</div>
              <div class="help-topic" data-topic="desktop">The Desktop</div>
              <div class="help-topic" data-topic="start-menu">The Start Menu</div>
              <div class="help-topic" data-topic="windows">Working with Windows</div>
              <div class="help-topic" data-topic="applications">Applications</div>
              <div class="help-topic" data-topic="shortcuts">Keyboard Shortcuts</div>
              <div class="help-topic" data-topic="easter-eggs">Easter Eggs</div>
            </div>
          </div>
          <div class="help-content-area">
            <div class="help-page" id="help-welcome">
              <h2>Welcome to NosytOS95</h2>
              <p>Welcome to NosytOS95, a Windows 95-style interface for NosytLabs. This help file will guide you through the features and functionality of NosytOS95.</p>
              <p>NosytOS95 is a nostalgic recreation of the classic Windows 95 operating system, with basic window management and a few applications. We're continuously adding new features and fixing issues.</p>
              <p>To get started, click on the Start button in the bottom-left corner of the screen, or explore the desktop icons.</p>
              <p><strong>Note:</strong> For the best experience, use a desktop browser. Mobile support is limited at this time.</p>
            </div>
          </div>
        </div>
        <div class="window-statusbar">
          <span>Press F1 for help on help</span>
        </div>
        <div class="resize-handle resize-handle-se"></div>
        <div class="resize-handle resize-handle-e"></div>
        <div class="resize-handle resize-handle-s"></div>
        <div class="resize-handle resize-handle-sw"></div>
        <div class="resize-handle resize-handle-n"></div>
        <div class="resize-handle resize-handle-w"></div>
        <div class="resize-handle resize-handle-ne"></div>
        <div class="resize-handle resize-handle-nw"></div>
      </div>

      <!-- Clippy Assistant -->
      <div class="clippy-container" id="clippy">
        <div class="clippy-bubble">
          <p id="clippy-message">Hi! I'm Nosyt, your AI assistant. How can I help you today?</p>
          <div class="clippy-options" id="clippy-options">
            <button class="clippy-option" data-action="help">Get help with NosytOS95</button>
            <button class="clippy-option" data-action="explore">Just exploring, thanks</button>
            <button class="clippy-close">×</button>
          </div>
        </div>
        <img src="/images/win95/clippy.png" alt="Clippy" class="clippy-image" id="clippy-image">
      </div>
    </div>

    <!-- Start Menu -->
    <div class="start-menu" id="start-menu" style="display: none;">
      <div class="start-header">
        <img src="/images/logo-new.svg" alt="NosytLabs Logo" class="start-logo">
        <span>NosytLabs</span>
      </div>
      <div class="start-menu-items">
        <div class="menu-item">
          <img src="/images/win95/programs.png" alt="Programs">
          <span>Programs</span>
          <span class="submenu-arrow">▶</span>
          <div class="submenu programs-menu">
            <div class="submenu-item" data-app="notepad">
              <img src="/images/win95/notepad.png" alt="Notepad">
              <span>Notepad</span>
            </div>
            <div class="submenu-item" data-app="duck-hunt">
              <img src="/images/win95/duck-hunt.png" alt="Duck Hunt">
              <span>Duck Hunt</span>
            </div>
            <div class="submenu-item" data-app="terminal">
              <img src="/images/win95/utilities-terminal.png" alt="Terminal">
              <span>Terminal</span>
            </div>
            <div class="submenu-item" data-app="calculator">
              <img src="/images/win95/calculator.png" alt="Calculator">
              <span>Calculator</span>
            </div>
            <div class="submenu-item" data-app="paint">
              <img src="/images/win95/paint.png" alt="Paint">
              <span>Paint</span>
            </div>
            <div class="submenu-item" data-app="mediaplayer">
              <img src="/images/win95/mediaplayer.png" alt="Media Player">
              <span>Media Player</span>
            </div>
          </div>
        </div>
        <div class="menu-item">
          <img src="/images/win95/documents.png" alt="Documents">
          <span>Documents</span>
        </div>
        <div class="menu-item">
          <img src="/images/win95/settings.png" alt="Settings">
          <span>Settings</span>
          <span class="submenu-arrow">▶</span>
          <div class="submenu settings-menu">
            <div class="submenu-item">
              <img src="/images/win95/control-panel.png" alt="Control Panel">
              <span>Control Panel</span>
            </div>
            <div class="submenu-item">
              <img src="/images/win95/display.png" alt="Display">
              <span>Display</span>
            </div>
          </div>
        </div>
        <div class="menu-item">
          <img src="/images/win95/find.png" alt="Find">
          <span>Find</span>
        </div>
        <div class="menu-item">
          <img src="/images/win95/help.png" alt="Help">
          <span>Help</span>
        </div>
        <div class="menu-item">
          <img src="/images/win95/run.png" alt="Run">
          <span>Run...</span>
        </div>
        <div class="menu-divider"></div>
        <div class="menu-item" id="shutdown-item">
          <img src="/images/win95/shutdown.png" alt="Shut Down">
          <span>Shut Down...</span>
        </div>
      </div>
    </div>

    <!-- Taskbar -->
    <div class="win95-taskbar">
      <button class="start-button">
        <img src="/images/win95/start.png" alt="Start">
        Start
      </button>
      <div class="taskbar-divider"></div>
      <div class="taskbar-items">
        <!-- Task buttons will be added here -->
      </div>
      <div class="taskbar-tray">
        <div class="tray-item">
          <img src="/images/win95/volume.png" alt="Volume">
        </div>
        <div class="tray-item clock">
          <span id="taskbar-clock">12:00 PM</span>
        </div>
      </div>
    </div>
  </div>
</main>


<style>
  /* NosytOS95 Styles with NosytLabs branding */
  :root {
    --win95-desktop: #2D0A4F; /* NosytLabs purple */
    --win95-window-bg: #c0c0c0;
    --win95-window-header: #4C1D95; /* Darker NosytLabs purple */
    --win95-text: #000000;
    --win95-button-highlight: #ffffff;
    --win95-button-shadow: #808080;
    --win95-button-face: #c0c0c0;
    --win95-accent: #FF6B00; /* NosytLabs orange */
  }

  /* Base Styles */
  @font-face {
    font-family: 'MS Sans Serif';
    src: url('/fonts/ms-sans-serif.woff2') format('woff2');
    font-weight: normal;
    font-style: normal;
  }

  .nosytos95-container {
    font-family: 'MS Sans Serif', 'Segoe UI', Tahoma, sans-serif;
    color: var(--win95-text);
    width: 100%;
    height: 100vh;
    overflow: hidden;
    position: relative;
  }

  /* Desktop */
  .win95-desktop {
    background-color: var(--win95-desktop);
    width: 100%;
    height: 100%;
    position: relative;
    overflow: hidden;
    padding-bottom: 28px; /* Space for taskbar */
  }

  /* Desktop Icons */
  .desktop-icons {
    display: grid;
    grid-template-columns: repeat(auto-fill, 80px);
    grid-gap: 20px;
    padding: 20px;
  }

  .desktop-icon {
    width: 80px;
    height: 90px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    text-align: center;
    color: white;
    position: relative;
  }

  .desktop-icon:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }

  .desktop-icon:active {
    background-color: rgba(255, 255, 255, 0.2);
  }

  .icon-img {
    width: 32px;
    height: 32px;
    margin-bottom: 5px;
  }

  .icon-text {
    font-size: 12px;
    text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.8);
    max-width: 80px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  /* Windows */
  .win95-window {
    position: absolute;
    background-color: var(--win95-window-bg);
    border: 3px solid var(--win95-window-bg);
    box-shadow:
      inset 1px 1px 0px var(--win95-button-highlight),
      inset -1px -1px 0px var(--win95-button-shadow),
      2px 2px 5px rgba(0, 0, 0, 0.2);
    display: none;
    flex-direction: column;
    overflow: hidden;
    min-width: 200px;
    min-height: 150px;
    z-index: 100;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
  }

  .window-header {
    background-color: var(--win95-window-header);
    color: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
    height: 20px;
    padding: 2px;
    cursor: move;
  }

  .window-title {
    display: flex;
    align-items: center;
    font-weight: bold;
    font-size: 12px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .window-icon {
    width: 16px;
    height: 16px;
    margin-right: 4px;
  }

  .window-controls {
    display: flex;
  }

  .window-minimize,
  .window-maximize,
  .window-close {
    width: 16px;
    height: 16px;
    margin-left: 2px;
    background-color: var(--win95-button-face);
    border: 1px solid;
    border-color: var(--win95-button-highlight) var(--win95-button-shadow) var(--win95-button-shadow) var(--win95-button-highlight);
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 10px;
    cursor: pointer;
    color: black;
  }

  .window-menu {
    display: flex;
    background-color: var(--win95-window-bg);
    border-bottom: 1px solid var(--win95-button-shadow);
    height: 20px;
  }

  .menu-item {
    padding: 2px 8px;
    font-size: 12px;
    cursor: pointer;
  }

  .menu-item:hover {
    background-color: var(--win95-window-header);
    color: white;
  }

  .window-content {
    flex: 1;
    background-color: white;
    overflow: auto;
    position: relative;
  }

  .window-statusbar {
    height: 20px;
    background-color: var(--win95-window-bg);
    border-top: 1px solid var(--win95-button-highlight);
    display: flex;
    align-items: center;
    padding: 0 5px;
    font-size: 12px;
  }

  .resize-handle {
    position: absolute;
    background-color: transparent;
  }

  .resize-handle-se {
    bottom: 0;
    right: 0;
    width: 16px;
    height: 16px;
    cursor: nwse-resize;
  }

  .resize-handle-e {
    top: 0;
    right: 0;
    width: 3px;
    height: 100%;
    cursor: ew-resize;
  }

  .resize-handle-s {
    bottom: 0;
    left: 0;
    width: 100%;
    height: 3px;
    cursor: ns-resize;
  }

  .resize-handle-sw {
    bottom: 0;
    left: 0;
    width: 16px;
    height: 16px;
    cursor: nesw-resize;
  }

  .resize-handle-n {
    top: 0;
    left: 0;
    width: 100%;
    height: 3px;
    cursor: ns-resize;
  }

  .resize-handle-w {
    top: 0;
    left: 0;
    width: 3px;
    height: 100%;
    cursor: ew-resize;
  }

  .resize-handle-ne {
    top: 0;
    right: 0;
    width: 16px;
    height: 16px;
    cursor: nesw-resize;
  }

  .resize-handle-nw {
    top: 0;
    left: 0;
    width: 16px;
    height: 16px;
    cursor: nwse-resize;
  }

  /* Taskbar */
  .win95-taskbar {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    height: 28px;
    background-color: var(--win95-window-bg);
    display: flex;
    align-items: center;
    padding: 0 2px;
    border-top: 1px solid var(--win95-button-highlight);
    z-index: 9999;
  }

  .start-button {
    display: flex;
    align-items: center;
    height: 22px;
    padding: 0 4px;
    margin-right: 2px;
    background-color: var(--win95-button-face);
    border: 2px solid;
    border-color: var(--win95-button-highlight) var(--win95-button-shadow) var(--win95-button-shadow) var(--win95-button-highlight);
    cursor: pointer;
    font-weight: bold;
    user-select: none;
  }

  .start-button:active {
    border-color: var(--win95-button-shadow) var(--win95-button-highlight) var(--win95-button-highlight) var(--win95-button-shadow);
  }

  .start-button img {
    width: 16px;
    height: 16px;
    margin-right: 4px;
  }

  .taskbar-divider {
    width: 1px;
    height: 20px;
    background-color: var(--win95-button-shadow);
    margin: 0 2px;
    border-right: 1px solid var(--win95-button-highlight);
  }

  .taskbar-items {
    display: flex;
    flex-grow: 1;
    height: 100%;
    overflow: hidden;
    align-items: center;
  }

  .taskbar-item {
    height: 22px;
    margin: 0 2px;
    padding: 0 4px;
    background-color: var(--win95-button-face);
    border: 2px solid;
    border-color: var(--win95-button-highlight) var(--win95-button-shadow) var(--win95-button-shadow) var(--win95-button-highlight);
    display: flex;
    align-items: center;
    font-size: 11px;
    cursor: pointer;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 150px;
  }

  .taskbar-item.active {
    border-color: var(--win95-button-shadow) var(--win95-button-highlight) var(--win95-button-highlight) var(--win95-button-shadow);
  }

  .taskbar-item img {
    width: 16px;
    height: 16px;
    margin-right: 4px;
  }

  .taskbar-tray {
    display: flex;
    align-items: center;
    height: 22px;
    padding: 0 4px;
    border-left: 1px solid var(--win95-button-shadow);
    border-right: 1px solid var(--win95-button-highlight);
  }

  .tray-item {
    margin: 0 4px;
    cursor: pointer;
  }

  .tray-item img {
    width: 16px;
    height: 16px;
  }

  .clock {
    font-size: 11px;
    font-weight: bold;
    min-width: 55px;
    text-align: center;
  }

  /* Start Menu */
  .start-menu {
    position: absolute;
    bottom: 28px;
    left: 0;
    width: 200px;
    background-color: var(--win95-window-bg);
    border: 2px solid;
    border-color: var(--win95-button-highlight) var(--win95-button-shadow) var(--win95-button-shadow) var(--win95-button-highlight);
    z-index: 10000;
    display: none;
  }

  .start-header {
    height: 40px;
    background-color: var(--win95-window-header);
    color: white;
    display: flex;
    align-items: center;
    padding: 0 8px;
    font-weight: bold;
    font-size: 18px;
  }

  .start-logo {
    width: 24px;
    height: 24px;
    margin-right: 8px;
  }

  .start-menu-items {
    padding: 2px 0;
  }

  .menu-item {
    height: 30px;
    display: flex;
    align-items: center;
    padding: 0 8px;
    cursor: pointer;
    position: relative;
  }

  .menu-item:hover {
    background-color: var(--win95-window-header);
    color: white;
  }

  .menu-item img {
    width: 24px;
    height: 24px;
    margin-right: 8px;
  }

  .submenu-arrow {
    margin-left: auto;
    font-size: 10px;
  }

  .submenu {
    position: absolute;
    top: 0;
    left: 100%;
    width: 180px;
    background-color: var(--win95-window-bg);
    border: 2px solid;
    border-color: var(--win95-button-highlight) var(--win95-button-shadow) var(--win95-button-shadow) var(--win95-button-highlight);
    display: none;
    z-index: 10001;
  }

  .menu-item:hover .submenu {
    display: block;
  }

  .submenu-item {
    height: 25px;
    display: flex;
    align-items: center;
    padding: 0 8px;
    cursor: pointer;
  }

  .submenu-item:hover {
    background-color: var(--win95-window-header);
    color: white;
  }

  .submenu-item img {
    width: 16px;
    height: 16px;
    margin-right: 8px;
  }

  .menu-divider {
    height: 1px;
    background-color: var(--win95-button-shadow);
    margin: 2px 0;
    border-bottom: 1px solid var(--win95-button-highlight);
  }

  /* Application-specific styles */

  /* Notepad */
  .notepad-content {
    width: 100%;
    height: 100%;
    resize: none;
    border: none;
    outline: none;
    padding: 5px;
    font-family: 'Courier New', monospace;
    font-size: 14px;
    line-height: 1.4;
    white-space: pre-wrap;
  }

  /* Duck Hunt */
  .duck-hunt-game-content {
    background-color: #87CEEB; /* Sky blue */
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .duck-hunt-game {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  .game-canvas {
    border: 2px solid #000;
    background-color: #87CEEB;
    cursor: crosshair;
  }

  .game-controls {
    display: flex;
    justify-content: center;
    margin-top: 10px;
    gap: 10px;
  }

  .win95-button {
    background-color: var(--win95-button-face);
    border: 2px solid;
    border-color: var(--win95-button-highlight) var(--win95-button-shadow) var(--win95-button-shadow) var(--win95-button-highlight);
    padding: 2px 8px;
    font-family: 'MS Sans Serif', sans-serif;
    font-size: 12px;
    cursor: pointer;
  }

  .win95-button:active {
    border-color: var(--win95-button-shadow) var(--win95-button-highlight) var(--win95-button-highlight) var(--win95-button-shadow);
  }

  /* Terminal */
  .terminal-content {
    background-color: #000;
    color: #fff;
    font-family: 'Courier New', monospace;
    font-size: 14px;
    padding: 5px;
    display: flex;
    flex-direction: column;
  }

  .terminal-output {
    flex: 1;
    overflow-y: auto;
    white-space: pre-wrap;
    line-height: 1.2;
    padding: 5px;
  }

  .terminal-input-container {
    display: flex;
    padding: 5px;
  }

  .terminal-prompt {
    color: #fff;
    margin-right: 5px;
  }

  .terminal-input {
    flex: 1;
    background-color: #000;
    color: #fff;
    border: none;
    outline: none;
    font-family: 'Courier New', monospace;
    font-size: 14px;
  }

  /* Help */
  .help-content {
    display: flex;
    height: 100%;
  }

  .help-sidebar {
    width: 200px;
    background-color: var(--win95-window-bg);
    border-right: 1px solid var(--win95-button-shadow);
    display: flex;
    flex-direction: column;
  }

  .help-tab {
    padding: 5px 10px;
    cursor: pointer;
    border-bottom: 1px solid var(--win95-button-shadow);
  }

  .help-tab-active {
    background-color: var(--win95-button-highlight);
  }

  .help-topics {
    flex: 1;
    overflow-y: auto;
    padding: 5px;
  }

  .help-topic {
    padding: 3px 5px;
    cursor: pointer;
  }

  .help-topic:hover {
    background-color: var(--win95-window-header);
    color: white;
  }

  .help-content-area {
    flex: 1;
    padding: 10px;
    overflow-y: auto;
  }

  .help-page {
    display: none;
  }

  .help-page h2 {
    margin-top: 0;
    color: var(--win95-window-header);
  }

  /* Clippy */
  .clippy-container {
    position: fixed;
    bottom: 50px;
    right: 20px;
    z-index: 9000;
  }

  .clippy-bubble {
    position: absolute;
    bottom: 40px;
    right: 0;
    width: 250px;
    background-color: var(--win95-window-bg);
    border: 2px solid;
    border-color: var(--win95-button-highlight) var(--win95-button-shadow) var(--win95-button-shadow) var(--win95-button-highlight);
    padding: 10px;
    display: none;
  }

  .clippy-bubble:after {
    content: '';
    position: absolute;
    bottom: -10px;
    right: 20px;
    border-width: 10px 10px 0;
    border-style: solid;
    border-color: var(--win95-window-bg) transparent;
  }

  .clippy-options {
    display: flex;
    flex-direction: column;
    margin-top: 10px;
  }

  .clippy-option {
    margin: 2px 0;
    text-align: left;
    background-color: var(--win95-button-face);
    border: 1px solid;
    border-color: var(--win95-button-highlight) var(--win95-button-shadow) var(--win95-button-shadow) var(--win95-button-highlight);
    padding: 2px 5px;
    font-family: 'MS Sans Serif', sans-serif;
    font-size: 12px;
    cursor: pointer;
  }

  .clippy-close {
    position: absolute;
    top: 2px;
    right: 2px;
    width: 16px;
    height: 16px;
    background-color: var(--win95-button-face);
    border: 1px solid;
    border-color: var(--win95-button-highlight) var(--win95-button-shadow) var(--win95-button-shadow) var(--win95-button-highlight);
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 10px;
    cursor: pointer;
  }

  .clippy-image {
    width: 40px;
    height: 40px;
    cursor: pointer;
  }
</style>

<script>
  // NosytOS95 Core Functionality
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize NosytOS95
    initNosytOS95();
  });

  function initNosytOS95() {
    // Initialize window management
    initWindowManagement();

    // Initialize desktop icons
    initDesktopIcons();

    // Initialize start menu
    initStartMenu();

    // Initialize taskbar
    initTaskbar();

    // Initialize clock
    updateClock();
    setInterval(updateClock, 60000);

    // Initialize Clippy
    initClippy();

    // Initialize Do Not Click folder
    initDoNotClick();

    console.log('NosytOS95 initialized');
  }

  // Window Management
  function initWindowManagement() {
    const windows = document.querySelectorAll('.win95-window');
    let activeWindow = null;
    let zIndex = 100;

    // Initialize each window
    windows.forEach(window => {
      // Set initial z-index
      window.style.zIndex = zIndex++;

      // Window header drag functionality
      const header = window.querySelector('.window-header');
      if (header) {
        header.addEventListener('mousedown', function(e) {
          if (e.target.closest('.window-controls')) return;

          // Bring window to front
          bringToFront(window);

          // Start dragging
          const rect = window.getBoundingClientRect();
          const offsetX = e.clientX - rect.left;
          const offsetY = e.clientY - rect.top;

          function moveWindow(e) {
            window.style.left = (e.clientX - offsetX) + 'px';
            window.style.top = (e.clientY - offsetY) + 'px';
          }

          function stopMoving() {
            document.removeEventListener('mousemove', moveWindow);
            document.removeEventListener('mouseup', stopMoving);
          }

          document.addEventListener('mousemove', moveWindow);
          document.addEventListener('mouseup', stopMoving);
        });
      }

      // Window controls functionality
      const minimizeBtn = window.querySelector('.window-minimize');
      const maximizeBtn = window.querySelector('.window-maximize');
      const closeBtn = window.querySelector('.window-close');

      if (minimizeBtn) {
        minimizeBtn.addEventListener('click', function() {
          window.style.display = 'none';
          updateTaskbar();
        });
      }

      if (maximizeBtn) {
        maximizeBtn.addEventListener('click', function() {
          if (window.classList.contains('maximized')) {
            // Restore window
            window.classList.remove('maximized');
            window.style.width = window.dataset.prevWidth || '400px';
            window.style.height = window.dataset.prevHeight || '300px';
            window.style.left = window.dataset.prevLeft || '50%';
            window.style.top = window.dataset.prevTop || '50%';
            window.style.transform = window.dataset.prevTransform || 'translate(-50%, -50%)';
          } else {
            // Maximize window
            window.classList.add('maximized');
            window.dataset.prevWidth = window.style.width;
            window.dataset.prevHeight = window.style.height;
            window.dataset.prevLeft = window.style.left;
            window.dataset.prevTop = window.style.top;
            window.dataset.prevTransform = window.style.transform;

            window.style.width = '100%';
            window.style.height = 'calc(100% - 28px)';
            window.style.left = '0';
            window.style.top = '0';
            window.style.transform = 'none';
          }
        });
      }

      if (closeBtn) {
        closeBtn.addEventListener('click', function() {
          window.style.display = 'none';
          updateTaskbar();
        });
      }

      // Resize functionality
      const resizeHandles = window.querySelectorAll('.resize-handle');
      resizeHandles.forEach(handle => {
        handle.addEventListener('mousedown', function(e) {
          e.preventDefault();
          e.stopPropagation();

          // Bring window to front
          bringToFront(window);

          const rect = window.getBoundingClientRect();
          const startX = e.clientX;
          const startY = e.clientY;
          const startWidth = rect.width;
          const startHeight = rect.height;
          const startLeft = rect.left;
          const startTop = rect.top;

          const direction = handle.className.replace('resize-handle resize-handle-', '');

          function resize(e) {
            let newWidth = startWidth;
            let newHeight = startHeight;
            let newLeft = startLeft;
            let newTop = startTop;

            // Calculate new dimensions based on direction
            if (direction.includes('e')) {
              newWidth = Math.max(200, startWidth + (e.clientX - startX));
            }
            if (direction.includes('s')) {
              newHeight = Math.max(150, startHeight + (e.clientY - startY));
            }
            if (direction.includes('w')) {
              newWidth = Math.max(200, startWidth - (e.clientX - startX));
              newLeft = startLeft + (startWidth - newWidth);
            }
            if (direction.includes('n')) {
              newHeight = Math.max(150, startHeight - (e.clientY - startY));
              newTop = startTop + (startHeight - newHeight);
            }

            // Apply new dimensions
            window.style.width = newWidth + 'px';
            window.style.height = newHeight + 'px';
            window.style.left = newLeft + 'px';
            window.style.top = newTop + 'px';
          }

          function stopResizing() {
            document.removeEventListener('mousemove', resize);
            document.removeEventListener('mouseup', stopResizing);
          }

          document.addEventListener('mousemove', resize);
          document.addEventListener('mouseup', stopResizing);
        });
      });

      // Click to focus
      window.addEventListener('mousedown', function() {
        bringToFront(window);
      });
    });
  }

  // Bring window to front
  function bringToFront(window) {
    const windows = document.querySelectorAll('.win95-window');
    let maxZ = 0;

    windows.forEach(w => {
      const z = parseInt(w.style.zIndex || 0);
      maxZ = Math.max(maxZ, z);
      w.classList.remove('active');
    });

    window.style.zIndex = maxZ + 1;
    window.classList.add('active');
    updateTaskbar();
  }

  // Desktop Icons
  function initDesktopIcons() {
    const desktopIcons = document.querySelectorAll('.desktop-icon');

    desktopIcons.forEach(icon => {
      icon.addEventListener('dblclick', function() {
        const app = this.getAttribute('data-app');
        openApp(app);
      });
    });
  }

  // Open Application
  function openApp(app) {
    const appWindow = document.getElementById(app + '-window');

    if (appWindow) {
      appWindow.style.display = 'flex';
      bringToFront(appWindow);

      // Special handling for Notepad to open maximized
      if (app === 'notepad') {
        // Ensure Notepad opens maximized
        appWindow.classList.add('maximized');
        appWindow.style.width = '100%';
        appWindow.style.height = 'calc(100% - 28px)';
        appWindow.style.left = '0';
        appWindow.style.top = '0';
        appWindow.style.transform = 'none';

        // Focus the textarea
        setTimeout(() => {
          const textarea = appWindow.querySelector('.notepad-content');
          if (textarea) {
            textarea.focus();
          }
        }, 100);
      }

      // Special handling for Duck Hunt
      if (app === 'duck-hunt') {
        initDuckHunt();
      }

      // Special handling for Terminal
      if (app === 'terminal') {
        initTerminal();
      }

      // Special handling for Help
      if (app === 'help') {
        initHelp();
      }

      // Special handling for Calculator
      if (app === 'calculator') {
        if (window.nosytCalculator) {
          window.nosytCalculator.openCalculator();
        }
        return; // Calculator creates its own window
      }

      // Special handling for Paint
      if (app === 'paint') {
        if (window.nosytPaint) {
          window.nosytPaint.openPaint();
        }
        return; // Paint creates its own window
      }

      // Special handling for Media Player
      if (app === 'mediaplayer') {
        if (window.nosytMediaPlayer) {
          window.nosytMediaPlayer.openMediaPlayer();
        }
        return; // Media Player creates its own window
      }

      updateTaskbar();
    } else if (app === 'do-not-click') {
      // Rick Roll Easter Egg
      window.open('https://www.youtube.com/watch?v=dQw4w9WgXcQ', '_blank');
    }
  }

  // Start Menu
  function initStartMenu() {
    const startButton = document.querySelector('.start-button');
    const startMenu = document.getElementById('start-menu');

    if (startButton && startMenu) {
      // Toggle start menu on click
      startButton.addEventListener('click', function() {
        if (startMenu.style.display === 'block') {
          startMenu.style.display = 'none';
        } else {
          startMenu.style.display = 'block';
        }
      });

      // Close start menu when clicking elsewhere
      document.addEventListener('click', function(e) {
        if (!e.target.closest('.start-menu') && !e.target.closest('.start-button')) {
          startMenu.style.display = 'none';
        }
      });

      // Handle start menu items
      const menuItems = startMenu.querySelectorAll('.submenu-item');
      menuItems.forEach(item => {
        item.addEventListener('click', function() {
          const app = this.getAttribute('data-app');
          if (app) {
            openApp(app);
            startMenu.style.display = 'none';
          }
        });
      });
    }
  }

  // Taskbar
  function initTaskbar() {
    updateTaskbar();
  }

  function updateTaskbar() {
    const taskbarItems = document.querySelector('.taskbar-items');
    const windows = document.querySelectorAll('.win95-window');

    // Clear existing taskbar items
    taskbarItems.innerHTML = '';

    // Add taskbar item for each visible window
    windows.forEach(window => {
      if (window.style.display !== 'none') {
        const title = window.querySelector('.window-title span').textContent;
        const icon = window.querySelector('.window-title img').src;
        const id = window.id;

        const taskbarItem = document.createElement('div');
        taskbarItem.className = 'taskbar-item';
        if (window.classList.contains('active')) {
          taskbarItem.classList.add('active');
        }

        const img = document.createElement('img');
        img.src = icon;
        img.alt = title;

        const span = document.createElement('span');
        span.textContent = title;

        taskbarItem.appendChild(img);
        taskbarItem.appendChild(span);

        taskbarItem.addEventListener('click', function() {
          if (window.style.display === 'none') {
            window.style.display = 'flex';
            bringToFront(window);
          } else if (window.classList.contains('active')) {
            window.style.display = 'none';
          } else {
            bringToFront(window);
          }
        });

        taskbarItems.appendChild(taskbarItem);
      }
    });
  }

  // Clock
  function updateClock() {
    const clock = document.getElementById('taskbar-clock');
    if (clock) {
      const now = new Date();
      const hours = now.getHours();
      const minutes = now.getMinutes();
      const ampm = hours >= 12 ? 'PM' : 'AM';
      const hours12 = hours % 12 || 12;
      const minutesStr = minutes < 10 ? '0' + minutes : minutes;

      clock.textContent = hours12 + ':' + minutesStr + ' ' + ampm;
    }
  }

  // Clippy
  function initClippy() {
    const clippy = document.getElementById('clippy');
    const clippyImage = document.getElementById('clippy-image');
    const clippyBubble = document.querySelector('.clippy-bubble');
    const clippyClose = document.querySelector('.clippy-close');
    const clippyOptions = document.getElementById('clippy-options');
    const clippyMessage = document.getElementById('clippy-message');

    if (clippy && clippyImage && clippyBubble && clippyClose && clippyOptions && clippyMessage) {
      // Show clippy bubble on click
      clippyImage.addEventListener('click', function() {
        if (clippyBubble.style.display === 'block') {
          clippyBubble.style.display = 'none';
        } else {
          clippyBubble.style.display = 'block';
        }
      });

      // Close clippy bubble
      clippyClose.addEventListener('click', function() {
        clippyBubble.style.display = 'none';
      });

      // Handle clippy options
      const options = clippyOptions.querySelectorAll('.clippy-option');
      options.forEach(option => {
        option.addEventListener('click', function() {
          const action = this.getAttribute('data-action');

          switch (action) {
            case 'help':
              clippyMessage.textContent = "To get started, try clicking on the desktop icons or using the Start menu. Double-click on icons to open applications.";
              break;
            case 'explore':
              clippyMessage.textContent = "Enjoy exploring NosytOS95! I'll be here if you need me.";
              clippyBubble.style.display = 'none';
              break;
          }
        });
      });
    }
  }

  // Do Not Click folder
  function initDoNotClick() {
    const doNotClickIcon = document.querySelector('.desktop-icon[data-app="do-not-click"]');

    if (doNotClickIcon) {
      doNotClickIcon.addEventListener('dblclick', function() {
        window.open('https://www.youtube.com/watch?v=dQw4w9WgXcQ', '_blank');
      });
    }
  }

  // Duck Hunt
  function initDuckHunt() {
    const duckHuntWindow = document.getElementById('duck-hunt-window');
    const canvas = duckHuntWindow.querySelector('.game-canvas');
    const startButton = duckHuntWindow.querySelector('.start-button');

    if (canvas && startButton) {
      const ctx = canvas.getContext('2d');
      let gameRunning = false;
      let score = 0;
      let ducks = [];

      // Draw sky background
      function drawBackground() {
        ctx.fillStyle = '#87CEEB';
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        // Draw ground
        ctx.fillStyle = '#8B4513';
        ctx.fillRect(0, canvas.height - 50, canvas.width, 50);

        // Draw grass
        ctx.fillStyle = '#228B22';
        ctx.fillRect(0, canvas.height - 50, canvas.width, 10);
      }

      // Draw score
      function drawScore() {
        ctx.fillStyle = '#000';
        ctx.font = '16px "MS Sans Serif"';
        ctx.fillText('Score: ' + score, 10, 20);
      }

      // Create a duck
      function createDuck() {
        return {
          x: Math.random() * canvas.width,
          y: canvas.height - 50,
          width: 30,
          height: 30,
          speedX: (Math.random() * 2) + 1,
          speedY: -((Math.random() * 2) + 1),
          color: '#8B4513',
          hit: false
        };
      }

      // Draw ducks
      function drawDucks() {
        ducks.forEach(duck => {
          ctx.fillStyle = duck.hit ? '#FF0000' : duck.color;
          ctx.fillRect(duck.x, duck.y, duck.width, duck.height);

          // Draw wings
          ctx.fillStyle = '#000';
          if (!duck.hit) {
            const wingOffset = Math.sin(Date.now() / 100) * 5;
            ctx.fillRect(duck.x - 10, duck.y + 10 + wingOffset, 10, 5);
            ctx.fillRect(duck.x + duck.width, duck.y + 10 - wingOffset, 10, 5);
          }
        });
      }

      // Update duck positions
      function updateDucks() {
        ducks.forEach(duck => {
          if (!duck.hit) {
            duck.x += duck.speedX;
            duck.y += duck.speedY;

            // Bounce off walls
            if (duck.x <= 0 || duck.x + duck.width >= canvas.width) {
              duck.speedX *= -1;
            }

            // Bounce off ceiling
            if (duck.y <= 0) {
              duck.speedY *= -1;
            }

            // Bounce off ground
            if (duck.y + duck.height >= canvas.height - 50) {
              duck.speedY *= -1;
            }
          } else {
            // Hit duck falls
            duck.speedY = 2;
            duck.y += duck.speedY;
          }
        });

        // Remove ducks that have fallen off screen
        ducks = ducks.filter(duck => !(duck.hit && duck.y > canvas.height));

        // Add new ducks if needed
        if (ducks.length < 3 && gameRunning) {
          ducks.push(createDuck());
        }
      }

      // Game loop
      function gameLoop() {
        if (!gameRunning) return;

        // Clear canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        // Draw background
        drawBackground();

        // Update and draw ducks
        updateDucks();
        drawDucks();

        // Draw score
        drawScore();

        // Continue loop
        requestAnimationFrame(gameLoop);
      }

      // Start game
      startButton.addEventListener('click', function() {
        gameRunning = true;
        score = 0;
        ducks = [createDuck(), createDuck(), createDuck()];
        gameLoop();
      });

      // Shoot on canvas click
      canvas.addEventListener('click', function(e) {
        if (!gameRunning) return;

        const rect = canvas.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;

        // Check for hits
        ducks.forEach(duck => {
          if (!duck.hit &&
              x >= duck.x && x <= duck.x + duck.width &&
              y >= duck.y && y <= duck.y + duck.height) {
            duck.hit = true;
            score += 10;
          }
        });
      });

      // Initial draw
      drawBackground();
      ctx.fillStyle = '#000';
      ctx.font = '20px "MS Sans Serif"';
      ctx.fillText('Click Start to begin', canvas.width / 2 - 80, canvas.height / 2);
    }
  }

  // Terminal
  function initTerminal() {
    const terminalWindow = document.getElementById('terminal-window');
    const terminalOutput = document.getElementById('terminal-output');
    const terminalInput = document.getElementById('terminal-input');

    if (terminalWindow && terminalOutput && terminalInput) {
      // Focus input when terminal is active
      terminalWindow.addEventListener('click', function() {
        terminalInput.focus();
      });

      // Handle input
      terminalInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
          const command = this.value.trim();

          // Add command to output
          terminalOutput.innerHTML += '<div>C:\\> ' + command + '</div>';

          // Process command
          processCommand(command);

          // Clear input
          this.value = '';
        }
      });

      // Process terminal commands
      function processCommand(command) {
        const cmd = command.toLowerCase();

        if (cmd === 'help') {
          terminalOutput.innerHTML += '<div>Available commands:</div>';
          terminalOutput.innerHTML += '<div>help - Display this help message</div>';
          terminalOutput.innerHTML += '<div>cls - Clear the screen</div>';
          terminalOutput.innerHTML += '<div>dir - List directory contents</div>';
          terminalOutput.innerHTML += '<div>echo [text] - Display text</div>';
          terminalOutput.innerHTML += '<div>date - Display current date</div>';
          terminalOutput.innerHTML += '<div>time - Display current time</div>';
          terminalOutput.innerHTML += '<div>ver - Display system version</div>';
          terminalOutput.innerHTML += '<div>exit - Close terminal</div>';
        } else if (cmd === 'cls') {
          terminalOutput.innerHTML = '';
        } else if (cmd === 'dir') {
          terminalOutput.innerHTML += '<div>Directory of C:\\</div>';
          terminalOutput.innerHTML += '<div>&nbsp;</div>';
          terminalOutput.innerHTML += '<div>WINDOWS    &lt;DIR&gt;        05-16-2025  04:54p</div>';
          terminalOutput.innerHTML += '<div>PROGRAM    &lt;DIR&gt;        05-16-2025  04:54p</div>';
          terminalOutput.innerHTML += '<div>SYSTEM     &lt;DIR&gt;        05-16-2025  04:54p</div>';
          terminalOutput.innerHTML += '<div>AUTOEXEC BAT        512  05-16-2025  04:54p</div>';
          terminalOutput.innerHTML += '<div>CONFIG   SYS        724  05-16-2025  04:54p</div>';
          terminalOutput.innerHTML += '<div>README   TXT       1,024  05-16-2025  04:54p</div>';
          terminalOutput.innerHTML += '<div>SECRET   TXT         42  05-16-2025  04:54p</div>';
          terminalOutput.innerHTML += '<div>&nbsp;</div>';
          terminalOutput.innerHTML += '<div>        7 file(s)     2,302 bytes</div>';
          terminalOutput.innerHTML += '<div>        3 dir(s)  4,294,967,295 bytes free</div>';
        } else if (cmd.startsWith('echo ')) {
          const text = command.substring(5);
          terminalOutput.innerHTML += '<div>' + text + '</div>';
        } else if (cmd === 'date') {
          const date = new Date();
          terminalOutput.innerHTML += '<div>Current date: ' + date.toLocaleDateString() + '</div>';
        } else if (cmd === 'time') {
          const date = new Date();
          terminalOutput.innerHTML += '<div>Current time: ' + date.toLocaleTimeString() + '</div>';
        } else if (cmd === 'ver') {
          terminalOutput.innerHTML += '<div>NosytOS95 [Version 4.00.950]</div>';
        } else if (cmd === 'exit') {
          terminalWindow.style.display = 'none';
          updateTaskbar();
        } else if (cmd === 'rickroll') {
          terminalOutput.innerHTML += '<div>Never gonna give you up</div>';
          terminalOutput.innerHTML += '<div>Never gonna let you down</div>';
          terminalOutput.innerHTML += '<div>Never gonna run around and desert you</div>';
          window.open('https://www.youtube.com/watch?v=dQw4w9WgXcQ', '_blank');
        } else if (cmd !== '') {
          terminalOutput.innerHTML += '<div>Bad command or file name</div>';
        }

        // Scroll to bottom
        terminalOutput.scrollTop = terminalOutput.scrollHeight;
      }
    }
  }

  // Help
  function initHelp() {
    const helpWindow = document.getElementById('help-window');

    if (helpWindow) {
      const helpTabs = helpWindow.querySelectorAll('.help-tab');
      const helpTopics = helpWindow.querySelectorAll('.help-topic');
      const helpPages = helpWindow.querySelectorAll('.help-page');

      // Show welcome page by default
      document.getElementById('help-welcome').style.display = 'block';

      // Handle tab clicks
      helpTabs.forEach(tab => {
        tab.addEventListener('click', function() {
          // Remove active class from all tabs
          helpTabs.forEach(t => t.classList.remove('help-tab-active'));

          // Add active class to clicked tab
          this.classList.add('help-tab-active');
        });
      });

      // Handle topic clicks
      helpTopics.forEach(topic => {
        topic.addEventListener('click', function() {
          const topicId = this.getAttribute('data-topic');

          // Hide all pages
          helpPages.forEach(page => {
            page.style.display = 'none';
          });

          // Show selected page
          const page = document.getElementById('help-' + topicId);
          if (page) {
            page.style.display = 'block';
          }
        });
      });
    }
  }
</script>
</BaseLayout>




















































































































































































































































































            <span class="arrow">▶</span>
          </div>

          <!-- Documents submenu -->
          <div class="start-menu-item" data-submenu="documents-menu">
            <img src="/images/win95/documents.png" alt="Documents">
            <span>Documents</span>
            <span class="arrow">▶</span>
          </div>

          <!-- Settings submenu -->
          <div class="start-menu-item" data-submenu="settings-menu">
            <img src="/images/win95/settings.png" alt="Settings">
            <span>Settings</span>
            <span class="arrow">▶</span>
          </div>

          <!-- Find submenu -->
          <div class="start-menu-item" data-submenu="find-menu">
            <img src="/images/win95/find.png" alt="Find">
            <span>Find</span>
            <span class="arrow">▶</span>
          </div>

          <!-- Help item - Opens help window -->
          <div class="start-menu-item" data-action="open" data-target="help-window">
            <img src="/images/win95/help.png" alt="Help">
            <span>Help</span>
          </div>

          <!-- Run item -->
          <div class="start-menu-item" data-action="open" data-target="run-window">
            <img src="/images/win95/run.png" alt="Run">
            <span>Run...</span>
          </div>

          <div class="start-menu-divider"></div>

          <!-- Return to website -->
          <div class="start-menu-item" data-action="return-to-site">
            <img src="/images/win95/exit.png" alt="Exit to Website" onerror="this.src='/images/win95/shutdown.png'">
            <span>Exit to Website</span>
          </div>
        </div>
      </div>

      <!-- Programs Submenu -->
      <div class="submenu" id="programs-menu" style="display: none;">
        <div class="submenu-items">
          <div class="submenu-item" data-action="open" data-target="notepad-window">
            <img src="/images/win95/notepad.png" alt="Notepad">
            <span>Notepad</span>
          </div>
          <div class="submenu-item" data-action="open" data-target="terminal-window">
            <img src="/images/win95/terminal.png" alt="Terminal">
            <span>Terminal</span>
          </div>
          <div class="submenu-item" data-action="open" data-target="duck-hunt-window" data-app="duck-hunt">
            <img src="/images/win95/duck-hunt.png" alt="Duck Hunt">
            <span>Duck Hunt</span>
          </div>
          <div class="submenu-item" data-action="open" data-target="doom-window">
            <img src="/images/win95/doom.png" alt="Doom II">
            <span>Doom II</span>
          </div>
          <div class="submenu-divider"></div>
          <div class="submenu-item" data-action="open" data-target="clippy-window">
            <img src="/images/win95/clippy.png" alt="Nosyt AI">
            <span>Nosyt AI</span>
          </div>
        </div>
      </div>

      <!-- Documents Submenu -->
      <div class="submenu" id="documents-menu" style="display: none;">
        <div class="submenu-items">
          <div class="submenu-item" data-action="open" data-target="readme-window">
            <img src="/images/win95/text-file.png" alt="README.TXT">
            <span>README.TXT</span>
          </div>
          <div class="submenu-item" data-action="open" data-target="license-window">
            <img src="/images/win95/text-file.png" alt="LICENSE.TXT">
            <span>LICENSE.TXT</span>
          </div>
          <div class="submenu-divider"></div>
          <div class="submenu-item" data-action="open" data-target="secret-window">
            <img src="/images/win95/text-file.png" alt="SECRET.TXT">
            <span>SECRET.TXT</span>
          </div>
        </div>
      </div>

      <!-- Settings Submenu -->
      <div class="submenu" id="settings-menu" style="display: none;">
        <div class="submenu-items">
          <div class="submenu-item" data-action="open" data-target="control-panel-window">
            <img src="/images/win95/control-panel.png" alt="Control Panel">
            <span>Control Panel</span>
          </div>
          <div class="submenu-item" data-action="open" data-target="display-settings-window">
            <img src="/images/win95/display.png" alt="Display Settings">
            <span>Display Settings</span>
          </div>
          <div class="submenu-item" data-action="open" data-target="sound-settings-window">
            <img src="/images/win95/sound.png" alt="Sound Settings">
            <span>Sound Settings</span>
          </div>
        </div>
      </div>

      <!-- Find Submenu -->
      <div class="submenu" id="find-menu" style="display: none;">
        <div class="submenu-items">
          <div class="submenu-item" data-action="open" data-target="find-files-window">
            <img src="/images/win95/find-file.png" alt="Files or Folders">
            <span>Files or Folders...</span>
          </div>
          <div class="submenu-item" data-action="open" data-target="find-computer-window">
            <img src="/images/win95/computer.png" alt="Computer">
            <span>Computer...</span>
          </div>
          <div class="submenu-item" data-action="open" data-target="find-easter-egg-window">
            <img src="/images/win95/easter-egg.png" alt="Easter Egg">
            <span>Easter Egg...</span>
          </div>
        </div>
      </div>

      <!-- Programs Submenu -->
      <div class="submenu" id="programs-menu" style="display: none;">
        <div class="submenu-item" data-action="open" data-target="nosyt-ai-window">
          <img src="/images/win95/clippy.png" alt="Nosyt AI">
          <span>Nosyt AI Assistant</span>
        </div>
        <div class="submenu-item" data-action="open" data-target="notepad-window">
          <img src="/images/win95/notepad.png" alt="Notepad">
          <span>Notepad</span>
        </div>
        <div class="submenu-divider"></div>
        <div class="submenu-item" data-submenu="games-menu">
          <img src="/images/win95/games.png" alt="Games">
          <span>Games</span>
          <span class="arrow">▶</span>
        </div>
        <div class="submenu-divider"></div>
        <div class="submenu-item" data-action="open" data-target="terminal-window">
          <img src="/images/win95/terminal.png" alt="Terminal">
          <span>Terminal</span>
        </div>
        <div class="submenu-item" data-action="open" data-target="dos-window">
          <img src="/images/win95/msdos.png" alt="MS-DOS Prompt">
          <span>MS-DOS Prompt</span>
        </div>
        <div class="submenu-item" data-action="open" data-target="browser-window">
          <img src="/images/win95/browser.png" alt="Internet">
          <span>Internet Explorer</span>
        </div>
        <div class="submenu-item" data-action="open" data-target="my-computer-window">
          <img src="/images/win95/my-computer.svg" alt="My Computer">
          <span>My Computer</span>
        </div>
      </div>

      <!-- Games Submenu -->
      <div class="submenu" id="games-menu" style="display: none;">
        <div class="submenu-item" data-action="open" data-target="duck-hunt-window" data-app="duck-hunt">
          <img src="/images/win95/duck-hunt.png" alt="Duck Hunt">
          <span>Duck Hunt</span>
        </div>
        <div class="submenu-item" data-action="open" data-target="doom-window">
          <img src="/images/win95/doom.png" alt="Doom II">
          <span>Doom II</span>
        </div>
        <div class="submenu-item" data-action="open" data-target="snake-window">
          <img src="/images/win95/snake.png" alt="Snake">
          <span>Snake</span>
        </div>
        <div class="submenu-divider"></div>
        <div class="submenu-item" data-action="open" data-target="dos-window">
          <img src="/images/win95/msdos.png" alt="MS-DOS Prompt">
          <span>MS-DOS Prompt</span>
        </div>
      </div>

      <!-- Documents Submenu -->
      <div class="submenu" id="documents-menu" style="display: none;">
        <div class="submenu-item" data-action="open" data-target="readme-window">
          <img src="/images/win95/text-file.png" alt="README.txt">
          <span>README.txt</span>
        </div>
        <div class="submenu-item" data-action="open" data-target="about-window">
          <img src="/images/win95/text-file.png" alt="About NosytLabs.txt">
          <span>About NosytLabs.txt</span>
        </div>
        <div class="submenu-item" data-action="open" data-target="services-window">
          <img src="/images/win95/text-file.png" alt="Services.txt">
          <span>Services.txt</span>
        </div>
        <div class="submenu-divider"></div>
        <div class="submenu-item" data-submenu="recent-documents-menu">
          <img src="/images/win95/recent.png" alt="Recent Documents">
          <span>Recent Documents</span>
          <span class="arrow">▶</span>
        </div>
      </div>

      <!-- Recent Documents Submenu -->
      <div class="submenu" id="recent-documents-menu" style="display: none;">
        <div class="submenu-item" data-action="open" data-target="notepad-window">
          <img src="/images/win95/text-file.png" alt="Notes.txt">
          <span>Notes.txt</span>
        </div>
        <div class="submenu-item" data-action="open" data-target="projects-window">
          <img src="/images/win95/text-file.png" alt="Projects.txt">
          <span>Projects.txt</span>
        </div>
      </div>

      <!-- Settings Submenu -->
      <div class="submenu" id="settings-menu" style="display: none;">
        <div class="submenu-item" data-action="open" data-target="control-panel-window">
          <img src="/images/win95/control-panel.png" alt="Control Panel">
          <span>Control Panel</span>
        </div>
        <div class="submenu-item" data-action="open" data-target="display-settings-window">
          <img src="/images/win95/display.png" alt="Display">
          <span>Display Settings</span>
        </div>
        <div class="submenu-item" data-action="open" data-target="printers-window">
          <img src="/images/win95/printers.png" alt="Printers">
          <span>Printers</span>
        </div>
        <div class="submenu-item" data-action="open" data-target="taskbar-settings-window">
          <img src="/images/win95/taskbar.png" alt="Taskbar">
          <span>Taskbar Settings</span>
        </div>
      </div>

      <!-- Find Submenu -->
      <div class="submenu" id="find-menu" style="display: none;">
        <div class="submenu-item" data-action="find-files">
          <img src="/images/win95/find-file.png" alt="Files or Folders">
          <span>Files or Folders...</span>
        </div>
        <div class="submenu-item" data-action="find-computer">
          <img src="/images/win95/find-computer.png" alt="Computer">
          <span>Computer...</span>
        </div>
        <div class="submenu-item" data-action="find-people">
          <img src="/images/win95/find-people.png" alt="People">
          <span>People...</span>
        </div>
        <div class="submenu-divider"></div>
        <div class="submenu-item" data-action="find-web">
          <img src="/images/win95/browser.png" alt="On the Internet">
          <span>On the Internet...</span>
        </div>
      </div>

      <!-- Shutdown Submenu -->
      <div class="submenu" id="shutdown-menu" style="display: none;">
        <div class="submenu-item" data-action="shutdown">
          <img src="/images/win95/shutdown.png" alt="Shut Down">
          <span>Shut Down</span>
        </div>
        <div class="submenu-item" data-action="restart">
          <img src="/images/win95/restart.png" alt="Restart">
          <span>Restart</span>
        </div>
        <div class="submenu-item" data-action="logoff">
          <img src="/images/win95/logoff.png" alt="Log Off">
          <span>Log Off</span>
        </div>
        <div class="submenu-item" data-action="sleep">
          <img src="/images/win95/sleep.png" alt="Sleep">
          <span>Sleep</span>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<style>
  /* Windows 95 Styling */
  @font-face {
    font-family: 'MS Sans Serif';
    src: url('/fonts/ms-sans-serif.woff2') format('woff2');
    font-weight: normal;
    font-style: normal;
  }

  :root {
    --win95-bg: #008080;
    --win95-window-bg: #c0c0c0;
    --win95-window-header: #000080;
    --win95-text: #000000;
    --win95-button-highlight: #ffffff;
    --win95-button-shadow: #808080;
    --win95-button-face: #c0c0c0;
  }

  .win95-container {
    font-family: 'MS Sans Serif', 'Segoe UI', Tahoma, sans-serif;
    color: var(--win95-text);
    width: 100%;
    height: 100vh;
    overflow: hidden;
    position: relative;
  }

  .development-banner {
    background-color: #ffcc00;
    color: #000000;
    text-align: center;
    padding: 5px;
    font-size: 14px;
    font-weight: bold;
    position: relative;
    z-index: 9999;
  }

  .win95-desktop {
    background-color: var(--win95-bg);
    width: 100%;
    height: calc(100vh - 28px);
    position: relative;
    overflow: hidden;
  }

  /* Desktop Icons */
  .desktop-icons {
    display: grid;
    grid-template-columns: repeat(auto-fill, 80px);
    grid-gap: 20px;
    padding: 20px;
  }

  .desktop-icon {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 80px;
    cursor: pointer;
    position: relative;
    padding: 5px;
  }

  .desktop-icon img {
    width: 32px;
    height: 32px;
    margin-bottom: 5px;
  }

  .desktop-icon span {
    color: white;
    text-align: center;
    font-size: 12px;
    text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.7);
    max-width: 100%;
    word-break: break-word;
  }

  /* Functional icons */
  .functional-icon:hover {
    background-color: rgba(255, 255, 255, 0.1);
    outline: 1px dotted white;
  }

  .functional-icon:active {
    background-color: rgba(0, 0, 255, 0.3);
  }

  /* Disabled icons */
  .disabled-icon {
    cursor: not-allowed;
    opacity: 0.7;
  }

  .disabled-icon img.grayscale {
    filter: grayscale(100%);
  }

  .coming-soon-badge {
    position: absolute;
    bottom: -5px;
    left: 50%;
    transform: translateX(-50%);
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    font-size: 8px;
    padding: 1px 4px;
    border-radius: 3px;
    white-space: nowrap;
  }

  /* Windows */
  .win95-window {
    position: absolute;
    background-color: var(--win95-window-bg);
    border: 2px solid;
    border-color: var(--win95-button-highlight) var(--win95-button-shadow) var(--win95-button-shadow) var(--win95-button-highlight);
    box-shadow: 1px 1px 0 white inset, -1px -1px 0 #707070 inset;
    min-width: 300px;
    min-height: 200px;
    z-index: 10;
  }

  .window-header {
    background-color: var(--win95-window-header);
    color: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 2px 4px;
    cursor: move;
  }

  .window-title {
    display: flex;
    align-items: center;
    font-weight: bold;
    font-size: 12px;
  }

  .window-icon {
    width: 16px;
    height: 16px;
    margin-right: 4px;
  }

  .window-controls {
    display: flex;
  }

  .window-controls button {
    width: 16px;
    height: 14px;
    margin-left: 2px;
    font-size: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: var(--win95-button-face);
    border: 1px solid;
    border-color: var(--win95-button-highlight) var(--win95-button-shadow) var(--win95-button-shadow) var(--win95-button-highlight);
    cursor: pointer;
  }

  .window-menu {
    display: flex;
    background-color: var(--win95-window-bg);
    border-bottom: 1px solid var(--win95-button-shadow);
  }

  .menu-item {
    padding: 2px 6px;
    font-size: 12px;
    cursor: pointer;
  }

  .menu-item:hover {
    background-color: var(--win95-window-header);
    color: white;
  }

  .window-content {
    padding: 10px;
    overflow: auto;
    height: calc(100% - 60px);
    position: relative;
  }

  .window-statusbar {
    border-top: 1px solid var(--win95-button-shadow);
    padding: 2px 4px;
    font-size: 12px;
  }

  /* Folder Grid */
  .folder-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, 80px);
    grid-gap: 10px;
  }

  .folder-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 80px;
    cursor: pointer;
  }

  .folder-item img {
    width: 32px;
    height: 32px;
    margin-bottom: 5px;
  }

  .folder-item span {
    text-align: center;
    font-size: 12px;
  }

  /* About Window */
  .about-content {
    display: flex;
    padding: 20px;
    align-items: center;
  }

  .about-logo {
    margin-right: 20px;
  }

  .about-info h2 {
    margin-top: 0;
    font-size: 16px;
  }

  .about-info p {
    margin: 5px 0;
    font-size: 12px;
  }

  .user-name {
    font-weight: bold;
  }

  .about-buttons {
    margin-top: 15px;
    text-align: center;
  }

  .win95-button {
    background-color: var(--win95-button-face);
    border: 2px solid;
    border-color: var(--win95-button-highlight) var(--win95-button-shadow) var(--win95-button-shadow) var(--win95-button-highlight);
    padding: 4px 10px;
    font-family: 'MS Sans Serif', sans-serif;
    font-size: 12px;
    cursor: pointer;
  }

  .win95-button:active {
    border-color: var(--win95-button-shadow) var(--win95-button-highlight) var(--win95-button-highlight) var(--win95-button-shadow);
  }

  /* Notepad */
  .notepad-content {
    width: 100%;
    height: 100%;
    border: 1px solid var(--win95-button-shadow);
    resize: none;
    font-family: 'Courier New', monospace;
    font-size: 12px;
    padding: 5px;
  }

  /* Game Content */
  .game-content {
    height: 400px;
    overflow: hidden;
    position: relative;
  }

  .game-content iframe {
    width: 100%;
    height: 100%;
    border: none;
  }

  /* Duck Hunt Game */
  .duck-hunt-game {
    width: 100%;
    height: 100%;
    position: relative;
    overflow: hidden;
  }

  .duck-hunt-container {
    width: 100%;
    height: 100%;
    position: relative;
  }

  .duck-hunt-sky {
    width: 100%;
    height: 70%;
    position: relative;
    background: linear-gradient(to bottom, #1E90FF, #87CEEB);
  }

  .duck-hunt-ground {
    width: 100%;
    height: 30%;
    position: absolute;
    bottom: 0;
    background: linear-gradient(to bottom, #8B4513, #654321);
    border-top: 2px solid #000;
    box-shadow: 0 -5px 15px rgba(0, 0, 0, 0.3);
  }

  .duck {
    width: 40px;
    height: 40px;
    position: absolute;
    background-image: url('/images/win95/duck.png');
    background-size: contain;
    background-repeat: no-repeat;
    cursor: crosshair;
    transition: transform 0.1s ease;
    z-index: 10;
  }

  .duck:hover {
    filter: brightness(1.2);
    transform: scale(1.1);
  }

  #duck1 {
    top: 20%;
    left: 30%;
  }

  #duck2 {
    top: 40%;
    left: 60%;
  }

  .duck-hunt-score {
    position: absolute;
    top: 10px;
    left: 10px;
    font-family: 'MS Sans Serif', sans-serif;
    font-size: 16px;
    color: white;
    text-shadow: 1px 1px 2px black;
    background-color: rgba(0, 0, 0, 0.5);
    padding: 5px 10px;
    border-radius: 5px;
    z-index: 20;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
  }

  .duck-hunt-message {
    position: absolute;
    bottom: 40px;
    left: 50%;
    transform: translateX(-50%);
    font-family: 'MS Sans Serif', sans-serif;
    font-size: 16px;
    color: white;
    text-shadow: 1px 1px 2px black;
    background-color: rgba(0, 0, 0, 0.7);
    padding: 5px 10px;
    border-radius: 5px;
    z-index: 20;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
    white-space: nowrap;
  }

  /* Fullscreen styles for Duck Hunt */
  .maximized .duck-hunt-game {
    width: 100%;
    height: 100%;
  }

  .maximized .duck {
    width: 60px;
    height: 60px;
  }

  /* AI Assistant */
  .ai-assistant-content {
    display: flex;
    flex-direction: column;
    height: 400px;
  }

  .ai-chat-container {
    flex: 1;
    display: flex;
    flex-direction: column;
    border: 1px solid var(--win95-button-shadow);
    margin-bottom: 10px;
  }

  .ai-chat-messages {
    flex: 1;
    overflow-y: auto;
    padding: 10px;
    background-color: white;
  }

  .ai-message {
    display: flex;
    margin-bottom: 10px;
    align-items: flex-start;
  }

  .ai-avatar {
    width: 32px;
    height: 32px;
    margin-right: 8px;
  }

  .ai-message-bubble {
    background-color: #e6f7ff;
    border: 1px solid #a0d7f3;
    border-radius: 8px;
    padding: 8px;
    max-width: 80%;
  }

  .ai-message-bubble p {
    margin: 0;
    font-size: 12px;
  }

  .ai-user-message {
    flex-direction: row-reverse;
  }

  .ai-user-message .ai-message-bubble {
    background-color: #f0f0f0;
    border-color: #ccc;
  }

  .ai-chat-input {
    display: flex;
    padding: 8px;
    background-color: #f0f0f0;
    border-top: 1px solid var(--win95-button-shadow);
  }

  .ai-chat-input input {
    flex: 1;
    border: 1px solid var(--win95-button-shadow);
    padding: 4px;
    font-size: 12px;
    margin-right: 8px;
  }

  .ai-suggestions {
    padding: 8px;
    background-color: #f0f0f0;
    border: 1px solid var(--win95-button-shadow);
  }

  .ai-suggestions p {
    margin: 0 0 8px 0;
    font-size: 12px;
    font-weight: bold;
  }

  .ai-suggestion-btn {
    display: block;
    width: 100%;
    text-align: left;
    background-color: var(--win95-button-face);
    border: 1px solid;
    border-color: var(--win95-button-highlight) var(--win95-button-shadow) var(--win95-button-shadow) var(--win95-button-highlight);
    padding: 4px 8px;
    margin-bottom: 4px;
    font-size: 12px;
    cursor: pointer;
  }

  .ai-suggestion-btn:hover {
    background-color: #e0e0e0;
  }

  /* Internet Explorer */
  .ie-toolbar {
    display: flex;
    align-items: center;
    padding: 4px;
    background-color: var(--win95-window-bg);
    border-bottom: 1px solid var(--win95-button-shadow);
  }

  .ie-button {
    background-color: var(--win95-button-face);
    border: 2px solid;
    border-color: var(--win95-button-highlight) var(--win95-button-shadow) var(--win95-button-shadow) var(--win95-button-highlight);
    padding: 2px 4px;
    margin-right: 4px;
    font-size: 11px;
    cursor: pointer;
  }

  .ie-button:active {
    border-color: var(--win95-button-shadow) var(--win95-button-highlight) var(--win95-button-highlight) var(--win95-button-shadow);
  }

  .ie-address-bar {
    display: flex;
    align-items: center;
    flex: 1;
    margin-left: 4px;
  }

  .ie-address-input {
    flex: 1;
    border: 1px solid var(--win95-button-shadow);
    padding: 2px;
    font-size: 12px;
    margin: 0 4px;
  }

  .ie-content {
    background-color: white;
    padding: 0;
  }

  .ie-page {
    padding: 20px;
    font-family: 'Times New Roman', serif;
  }

  .ie-page-header {
    text-align: center;
    margin-bottom: 20px;
  }

  .ie-page-header h1 {
    color: theme('colors.primary.DEFAULT'); /* Updated to use Tailwind primary color */
    font-size: 24px;
    margin-bottom: 5px;
  }

  .ie-page-content {
    line-height: 1.5;
  }

  .ie-page-content h2 {
    color: theme('colors.accent.DEFAULT'); /* Updated to use Tailwind accent color */
    font-size: 18px;
    margin: 15px 0 10px;
    border-bottom: 1px solid #ccc;
    padding-bottom: 5px;
  }

  .ie-page-content ul {
    margin-left: 20px;
    margin-bottom: 15px;
  }

  .ie-page-content a {
    color: blue;
    text-decoration: underline;
  }

  .ie-page-content a:visited {
    color: purple;
  }

  .ie-contact {
    background-color: #f0f0f0;
    padding: 10px;
    margin-top: 20px;
    border: 1px solid #ccc;
  }

  .ie-page-footer {
    margin-top: 30px;
    text-align: center;
    font-size: 12px;
    color: #666;
  }

  /* Resize handles */
  .resize-handle {
    position: absolute;
    background-color: transparent;
    z-index: 20;
  }

  .resize-handle-se {
    width: 16px;
    height: 16px;
    bottom: 0;
    right: 0;
    cursor: nwse-resize;
    background-image: url('/images/win95/resize-handle.png');
    background-repeat: no-repeat;
    background-position: bottom right;
  }

  .resize-handle-e {
    width: 8px;
    top: 0;
    right: 0;
    bottom: 0;
    cursor: ew-resize;
  }

  .resize-handle-s {
    height: 8px;
    left: 0;
    right: 0;
    bottom: 0;
    cursor: ns-resize;
  }

  .resize-handle-sw {
    width: 16px;
    height: 16px;
    bottom: 0;
    left: 0;
    cursor: nesw-resize;
  }

  .resize-handle-n {
    height: 8px;
    left: 0;
    right: 0;
    top: 0;
    cursor: ns-resize;
  }

  .resize-handle-w {
    width: 8px;
    top: 0;
    left: 0;
    bottom: 0;
    cursor: ew-resize;
  }

  .resize-handle-ne {
    width: 16px;
    height: 16px;
    top: 0;
    right: 0;
    cursor: nesw-resize;
  }

  .resize-handle-nw {
    width: 16px;
    height: 16px;
    top: 0;
    left: 0;
    cursor: nwse-resize;
  }

  /* Ensure windows are properly resizable */
  .win95-window {
    min-width: 300px;
    min-height: 200px;
    resize: both;
    overflow: auto;
  }

  /* Fix for maximized windows */
  .win95-window.maximized {
    resize: none;
    width: 100% !important;
    height: calc(100% - 28px) !important; /* Subtract taskbar height */
    top: 0 !important;
    left: 0 !important;
  }

  /* Context Menu */
  .context-menu {
    position: absolute;
    background-color: var(--win95-window-bg);
    border: 2px solid;
    border-color: var(--win95-button-highlight) var(--win95-button-shadow) var(--win95-button-shadow) var(--win95-button-highlight);
    padding: 2px;
    z-index: 1000;
    display: none;
  }

  .context-menu-item {
    padding: 4px 20px;
    font-size: 12px;
    cursor: pointer;
  }

  .context-menu-item:hover {
    background-color: var(--win95-window-header);
    color: white;
  }

  .context-menu-divider {
    height: 1px;
    background-color: var(--win95-button-shadow);
    margin: 2px 0;
  }

  /* Clippy */
  .clippy-container {
    position: absolute;
    bottom: 50px;
    right: 20px;
    z-index: 100;
    display: flex;
    align-items: flex-end;
    opacity: 0;
    transition: opacity 0.3s ease, transform 0.5s ease;
  }

  .clippy-entrance {
    animation: clippy-bounce-in 0.5s ease-out forwards;
  }

  .clippy-exit {
    animation: clippy-bounce-out 0.5s ease-in forwards;
  }

  @keyframes clippy-bounce-in {
    0% { transform: translateY(20px) scale(0.8); }
    50% { transform: translateY(-10px) scale(1.1); }
    70% { transform: translateY(5px) scale(0.95); }
    100% { transform: translateY(0) scale(1); }
  }

  @keyframes clippy-bounce-out {
    0% { transform: translateY(0) scale(1); }
    20% { transform: translateY(-10px) scale(1.1); }
    100% { transform: translateY(20px) scale(0.8); }
  }

  .clippy-image {
    width: 80px;
    height: 80px;
    cursor: pointer;
    transition: transform 0.3s ease;
  }

  .clippy-image:hover {
    transform: scale(1.1);
    filter: brightness(1.1);
  }

  .clippy-image:active {
    transform: scale(0.95);
  }

  .clippy-bubble {
    background-color: #ffffcc;
    border: 1px solid #000;
    border-radius: 5px;
    padding: 10px;
    margin-right: 10px;
    max-width: 280px;
    position: relative;
    box-shadow: 3px 3px 5px rgba(0, 0, 0, 0.2);
    transition: opacity 0.3s ease, transform 0.3s ease;
  }

  .clippy-bubble:hover {
    transform: translateY(-2px);
    box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.3);
  }

  .clippy-bubble:after {
    content: '';
    position: absolute;
    right: -10px;
    bottom: 20px;
    border-width: 10px 0 10px 10px;
    border-style: solid;
    border-color: transparent transparent transparent #ffffcc;
    transition: border-width 0.2s ease;
  }

  .clippy-bubble:hover:after {
    border-width: 12px 0 12px 12px;
  }

  .clippy-options {
    margin-top: 10px;
    display: flex;
    flex-direction: column;
    gap: 5px;
  }

  .clippy-option {
    transition: color 0.2s ease, transform 0.2s ease;
  }

  .clippy-option:hover {
    transform: translateX(3px);
  }

  .clippy-option {
    display: block;
    width: 100%;
    text-align: left;
    background: none;
    border: none;
    padding: 4px 0;
    font-size: 12px;
    cursor: pointer;
    color: blue;
    text-decoration: underline;
  }

  .clippy-option:hover {
    color: theme('colors.primary.DEFAULT'); /* Updated to use Tailwind primary color */
  }

  .clippy-close {
    position: absolute;
    top: 2px;
    right: 2px;
    background: none;
    border: none;
    font-size: 12px;
    cursor: pointer;
  }

  /* Taskbar */
  .win95-taskbar {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 28px;
    background-color: var(--win95-window-bg);
    border-top: 1px solid var(--win95-button-highlight);
    display: flex;
    align-items: center;
    padding: 0 2px;
    z-index: 1000;
  }

  .start-button {
    display: flex;
    align-items: center;
    background-color: var(--win95-button-face);
    border: 2px solid;
    border-color: var(--win95-button-highlight) var(--win95-button-shadow) var(--win95-button-shadow) var(--win95-button-highlight);
    padding: 1px 4px;
    margin-right: 4px;
    cursor: pointer;
    transition: background-color 0.1s ease;
  }

  .start-button.active {
    border-color: var(--win95-button-shadow) var(--win95-button-highlight) var(--win95-button-highlight) var(--win95-button-shadow);
    background-color: #d0d0d0;
  }

  .start-button img {
    width: 16px;
    height: 16px;
    margin-right: 2px;
  }

  .start-button span {
    font-weight: bold;
    font-size: 12px;
  }

  .taskbar-divider {
    width: 1px;
    height: 20px;
    background-color: var(--win95-button-shadow);
    margin: 0 4px;
  }

  .open-windows {
    flex: 1;
    display: flex;
    overflow: hidden;
  }

  .system-tray {
    display: flex;
    align-items: center;
    padding: 0 4px;
  }

  .clock {
    font-size: 12px;
    padding: 2px 4px;
    border: 1px solid var(--win95-button-shadow);
    background-color: var(--win95-window-bg);
  }

  /* Start Menu - Enhanced styling */
  .start-menu {
    position: absolute;
    bottom: 28px;
    left: 0;
    width: 220px;
    background-color: var(--win95-window-bg);
    border: 2px solid;
    border-color: var(--win95-button-highlight) var(--win95-button-shadow) var(--win95-button-shadow) var(--win95-button-highlight);
    z-index: 1001;
    box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.3);
  }

  .start-menu-header {
    background-color: var(--win95-window-header);
    color: white;
    padding: 4px 8px;
    font-weight: bold;
    font-size: 14px;
  }

  .start-menu-items {
    padding: 2px;
  }

  .start-menu-item {
    display: flex;
    align-items: center;
    padding: 6px 8px;
    cursor: pointer;
    transition: background-color 0.1s ease;
  }

  .start-menu-item:hover {
    background-color: var(--win95-window-header);
    color: white;
  }

  .start-menu-item img {
    width: 20px;
    height: 20px;
    margin-right: 10px;
  }

  .start-menu-item .arrow {
    margin-left: auto;
    font-size: 10px;
  }

  .start-menu-divider {
    height: 1px;
    background-color: var(--win95-button-shadow);
    margin: 4px 0;
  }

  /* Submenu styling */
  .submenu {
    position: absolute;
    left: 220px;
    top: 0;
    width: 200px;
    background-color: var(--win95-window-bg);
    border: 2px solid;
    border-color: var(--win95-button-highlight) var(--win95-button-shadow) var(--win95-button-shadow) var(--win95-button-highlight);
    z-index: 1002;
  }

  .submenu-items {
    padding: 2px;
  }

  .submenu-item {
    display: flex;
    align-items: center;
    padding: 6px 8px;
    cursor: pointer;
  }

  .submenu-item:hover {
    background-color: var(--win95-window-header);
    color: white;
  }

  .submenu-item img {
    width: 16px;
    height: 16px;
    margin-right: 8px;
  }
</style>

<script>
  // Import enhanced components
  // Using public path for components
  import '/public/components/EnhancedWindowResizing.js';
  // DuckHuntGame.js is already included via script tag

  // Wait for the DOM to be fully loaded
  document.addEventListener('DOMContentLoaded', function() {
    // Desktop icons
    const desktopIcons = document.querySelectorAll('.desktop-icon');
    const windows = document.querySelectorAll('.win95-window');
    const startButton = document.querySelector('.start-button');
    const startMenu = document.querySelector('.start-menu');
    const clippy = document.getElementById('clippy');
    const clippyBubble = document.querySelector('.clippy-bubble');
    const clippyImage = document.getElementById('clippy-image');
    const clippyMessage = document.getElementById('clippy-message');
    const clippyOptions = document.getElementById('clippy-options');
    const clippyClose = document.querySelector('.clippy-close');
    const openWindowsContainer = document.querySelector('.open-windows');
    const desktopContextMenu = document.getElementById('desktop-context-menu');
    const desktop = document.querySelector('.win95-desktop');

    // Initialize submenus
    const submenuStartItems = document.querySelectorAll('.start-menu-item[data-submenu]');
    submenuStartItems.forEach(item => {
      const submenuId = item.getAttribute('data-submenu');
      const submenu = document.getElementById(submenuId);

      if (submenu) {
        // Position the submenu
        item.addEventListener('mouseenter', function() {
          const rect = this.getBoundingClientRect();
          submenu.style.top = (rect.top - desktop.getBoundingClientRect().top) + 'px';
          submenu.style.left = (rect.right - desktop.getBoundingClientRect().left) + 'px';

          // Hide all other submenus
          document.querySelectorAll('.submenu').forEach(menu => {
            if (menu.id !== submenuId) {
              menu.style.display = 'none';
            }
          });
        });
      }
    });

    // Update clock
    function updateClock() {
      const now = new Date();
      let hours = now.getHours();
      const minutes = now.getMinutes();
      const ampm = hours >= 12 ? 'PM' : 'AM';

      hours = hours % 12;
      hours = hours ? hours : 12; // the hour '0' should be '12'

      const timeString = hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ' ' + ampm;
      document.querySelector('.clock').textContent = timeString;
    }

    // Update clock every minute
    updateClock();
    setInterval(updateClock, 60000);

    // Initialize Duck Hunt game when window is opened
    const duckHuntStartBtn = document.getElementById('duck-hunt-start');

    if (duckHuntWindow && duckHuntStartBtn) {
      let duckHuntGame = null;

      // Initialize game when window is opened
      document.getElementById('duck-hunt-icon').addEventListener('click', function() {
        duckHuntWindow.style.display = 'block';
        bringToFront(duckHuntWindow);

        // Initialize game if not already created
        if (!duckHuntGame) {
          setTimeout(() => {
            duckHuntGame = new DuckHuntGame('duck-hunt-window');
          }, 500);
        }
      });
    }

    // Initialize MS-DOS Prompt when icon is clicked
    const dosWindow = document.getElementById('dos-window');
    if (dosWindow) {
      document.getElementById('dos-icon').addEventListener('click', function() {
        // Position window in center if not already positioned
        if (!dosWindow.style.left) {
          const left = (desktop.offsetWidth - dosWindow.offsetWidth) / 2;
          const top = (desktop.offsetHeight - dosWindow.offsetHeight) / 2;
          dosWindow.style.left = left + 'px';
          dosWindow.style.top = top + 'px';
        }

        // Show window and bring to front
        dosWindow.style.display = 'block';
        bringToFront(dosWindow);
        updateTaskbar();

        // Focus the input field
        setTimeout(() => {
          const inputField = dosWindow.querySelector('.dos-input');
          if (inputField) {
            inputField.focus();
          }
        }, 100);
      });

      // Start game when button is clicked
      duckHuntStartBtn.addEventListener('click', function() {
        if (duckHuntGame) {
          duckHuntGame.startGame();
        }
      });
    }

    // Make windows draggable and resizable with improved functionality
    windows.forEach(window => {
      const header = window.querySelector('.window-header');
      let isDragging = false;
      let isResizing = false;
      let resizeHandle = null;
      let offsetX, offsetY;
      let startWidth, startHeight;
      let startX, startY;
      let initialLeft, initialTop;

      // Dragging functionality with improved handling
      header.addEventListener('mousedown', function(e) {
        if (e.target.closest('.window-controls')) return; // Don't drag when clicking controls

        isDragging = true;
        offsetX = e.clientX - window.getBoundingClientRect().left;
        offsetY = e.clientY - window.getBoundingClientRect().top;
        initialLeft = window.offsetLeft;
        initialTop = window.offsetTop;

        // Bring window to front
        bringToFront(window);

        // Prevent text selection during drag
        e.preventDefault();
      });

      // Resizing functionality with improved handling
      const resizeHandles = window.querySelectorAll('.resize-handle');
      resizeHandles.forEach(handle => {
        handle.addEventListener('mousedown', function(e) {
          e.stopPropagation();
          isResizing = true;
          resizeHandle = handle;
          startWidth = window.offsetWidth;
          startHeight = window.offsetHeight;
          startX = e.clientX;
          startY = e.clientY;
          initialLeft = parseInt(window.style.left) || 0;
          initialTop = parseInt(window.style.top) || 0;

          // Bring window to front
          bringToFront(window);

          // Prevent text selection during resize
          e.preventDefault();
        });
      });

      document.addEventListener('mousemove', function(e) {
        // Handle dragging with improved bounds checking
        if (isDragging) {
          const x = e.clientX - offsetX;
          const y = e.clientY - offsetY;

          // Keep window within desktop bounds
          const maxX = desktop.offsetWidth - window.offsetWidth;
          const maxY = desktop.offsetHeight - window.offsetHeight - 28; // Account for taskbar

          // Ensure window title bar remains accessible (at least 20px visible)
          const newX = Math.max(-window.offsetWidth + 100, Math.min(x, maxX));
          const newY = Math.max(0, Math.min(y, maxY));

          window.style.left = newX + 'px';
          window.style.top = newY + 'px';

          // Update cursor to indicate dragging
          document.body.style.cursor = 'move';
        }

        // Handle resizing
        if (isResizing && resizeHandle) {
          const deltaX = e.clientX - startX;
          const deltaY = e.clientY - startY;

          // Minimum window size
          const minWidth = 300;
          const minHeight = 200;

          if (resizeHandle.classList.contains('resize-handle-se')) {
            // Southeast corner - resize both width and height
            const newWidth = Math.max(minWidth, startWidth + deltaX);
            const newHeight = Math.max(minHeight, startHeight + deltaY);

            window.style.width = newWidth + 'px';
            window.style.height = newHeight + 'px';
          } else if (resizeHandle.classList.contains('resize-handle-e')) {
            // East edge - resize width only
            const newWidth = Math.max(minWidth, startWidth + deltaX);
            window.style.width = newWidth + 'px';
          } else if (resizeHandle.classList.contains('resize-handle-s')) {
            // South edge - resize height only
            const newHeight = Math.max(minHeight, startHeight + deltaY);
            window.style.height = newHeight + 'px';
          }
        }
      });

      document.addEventListener('mouseup', function() {
        // Reset dragging and resizing states
        if (isDragging || isResizing) {
          // Reset cursor
          document.body.style.cursor = 'default';

          // Reset states
          isDragging = false;
          isResizing = false;
          resizeHandle = null;

          // Update taskbar to reflect any changes
          updateTaskbar();
        }
      });

      // Window controls
      const closeButton = window.querySelector('.window-close');
      closeButton.addEventListener('click', function() {
        window.style.display = 'none';
        updateTaskbar();
      });

      const minimizeButton = window.querySelector('.window-minimize');
      minimizeButton.addEventListener('click', function() {
        window.style.display = 'none';
        updateTaskbar();
        // In a real implementation, we would minimize to taskbar
      });

      const maximizeButton = window.querySelector('.window-maximize');
      maximizeButton.addEventListener('click', function() {
        if (window.classList.contains('maximized')) {
          // Restore window
          window.classList.remove('maximized');
          window.style.top = window.dataset.restoreTop || '50px';
          window.style.left = window.dataset.restoreLeft || '50px';
          window.style.width = window.dataset.restoreWidth || '500px';
          window.style.height = window.dataset.restoreHeight || '400px';
        } else {
          // Maximize window
          window.classList.add('maximized');

          // Save current position and size for restore
          window.dataset.restoreTop = window.style.top;
          window.dataset.restoreLeft = window.style.left;
          window.dataset.restoreWidth = window.style.width;
          window.dataset.restoreHeight = window.style.height;

          // Set to full desktop size
          window.style.top = '0';
          window.style.left = '0';
          window.style.width = desktop.offsetWidth + 'px';
          window.style.height = (desktop.offsetHeight - 28) + 'px'; // Subtract taskbar height
        }
      });
    });

    // Bring window to front
    function bringToFront(window) {
      windows.forEach(w => {
        w.style.zIndex = 10;
      });
      window.style.zIndex = 100;
    }

    // Desktop icon click handlers - Only for functional icons
    const functionalIcons = document.querySelectorAll('.desktop-icon:not(.disabled-icon)');
    functionalIcons.forEach(icon => {
      icon.addEventListener('click', function() {
        const iconId = this.id;
        const windowId = iconId.replace('-icon', '-window');
        const windowElement = document.getElementById(windowId);

        if (windowElement) {
          // Special handling for Notepad to ensure it opens maximized
          if (iconId === 'notepad-icon') {
            windowElement.classList.add('maximized');
            windowElement.style.display = 'block';
            windowElement.style.width = '100%';
            windowElement.style.height = 'calc(100% - 28px)';
            windowElement.style.left = '0';
            windowElement.style.top = '0';
            bringToFront(windowElement);
            updateTaskbar();

            // Focus the textarea
            setTimeout(() => {
              const textarea = windowElement.querySelector('.notepad-content');
              if (textarea) {
                textarea.focus();
              }
            }, 100);
          } else {
            // Position window in center if not already positioned
            if (!windowElement.style.left) {
              const left = (desktop.offsetWidth - windowElement.offsetWidth) / 2;
              const top = (desktop.offsetHeight - windowElement.offsetHeight) / 2;
              windowElement.style.left = left + 'px';
              windowElement.style.top = top + 'px';
            }

            // Show window and bring to front
            windowElement.style.display = 'block';
            bringToFront(windowElement);
            updateTaskbar();
          }
        }
      });

      // Double click handler
      icon.addEventListener('dblclick', function() {
        const iconId = this.id;
        const windowId = iconId.replace('-icon', '-window');
        const windowElement = document.getElementById(windowId);

        if (windowElement) {
          // Special handling for Notepad to ensure it opens maximized
          if (iconId === 'notepad-icon') {
            windowElement.classList.add('maximized');
            windowElement.style.display = 'block';
            windowElement.style.width = '100%';
            windowElement.style.height = 'calc(100% - 28px)';
            windowElement.style.left = '0';
            windowElement.style.top = '0';
            bringToFront(windowElement);
            updateTaskbar();

            // Focus the textarea
            setTimeout(() => {
              const textarea = windowElement.querySelector('.notepad-content');
              if (textarea) {
                textarea.focus();
              }
            }, 100);
          } else {
            // Position window in center if not already positioned
            if (!windowElement.style.left) {
              const left = (desktop.offsetWidth - windowElement.offsetWidth) / 2;
              const top = (desktop.offsetHeight - windowElement.offsetHeight) / 2;
              windowElement.style.left = left + 'px';
              windowElement.style.top = top + 'px';
            }

            // Show window and bring to front
            windowElement.style.display = 'block';
            bringToFront(windowElement);
            updateTaskbar();
          }
        }
      });
    });

    // Add proper message box for disabled icons
    const disabledIcons = document.querySelectorAll('.disabled-icon');
    disabledIcons.forEach(icon => {
      icon.addEventListener('click', function() {
        // Create and show a Windows 95-style message box for coming soon features
        const appName = this.querySelector('span').textContent;

        // Create message box
        const messageBox = document.createElement('div');
        messageBox.className = 'win95-window';
        messageBox.style.position = 'absolute';
        messageBox.style.width = '300px';
        messageBox.style.height = 'auto';
        messageBox.style.top = '50%';
        messageBox.style.left = '50%';
        messageBox.style.transform = 'translate(-50%, -50%)';
        messageBox.style.zIndex = '1000';
        messageBox.style.display = 'block';

        // Message box content
        messageBox.innerHTML = `
          <div class="window-header">
            <img src="/images/win95/info.png" alt="Info" class="window-icon">
            <span class="window-title"><span>Coming Soon</span></span>
            <div class="window-controls">
              <button class="window-control window-close" aria-label="Close window">✕</button>
            </div>
          </div>
          <div class="window-content" style="padding: 15px; text-align: center;">
            <img src="/images/win95/info.png" alt="Info" style="width: 32px; height: 32px; margin-bottom: 10px;">
            <p>${appName} is coming soon to NosytOS95!</p>
            <p>This feature is currently under development.</p>
            <button class="win95-button" style="margin-top: 10px; padding: 5px 15px;">OK</button>
          </div>
        `;

        // Add to desktop
        desktop.appendChild(messageBox);

        // Make window draggable
        makeWindowDraggable(messageBox);

        // Close button handler
        const closeBtn = messageBox.querySelector('.window-close');
        closeBtn.addEventListener('click', function() {
          desktop.removeChild(messageBox);
        });

        // OK button handler
        const okBtn = messageBox.querySelector('.win95-button');
        okBtn.addEventListener('click', function() {
          desktop.removeChild(messageBox);
        });

        // Bring to front
        bringToFront(messageBox);
      });
    });

    // Folder item click handlers
    const folderItems = document.querySelectorAll('.folder-item[data-action="open"]');
    folderItems.forEach(item => {
      item.addEventListener('click', function() {
        const targetWindowId = this.getAttribute('data-target');
        const targetWindow = document.getElementById(targetWindowId);

        if (targetWindow) {
          // Position window in center if not already positioned
          if (!targetWindow.style.left) {
            const left = (desktop.offsetWidth - targetWindow.offsetWidth) / 2;
            const top = (desktop.offsetHeight - targetWindow.offsetHeight) / 2;
            targetWindow.style.left = left + 'px';
            targetWindow.style.top = top + 'px';
          }

          // Show window and bring to front
          targetWindow.style.display = 'block';
          bringToFront(targetWindow);
          updateTaskbar();
        }
      });
    });

    // Regular folder items (non-data-action ones)
    const regularFolderItems = document.querySelectorAll('.folder-item:not([data-action])');
    regularFolderItems.forEach(item => {
      item.addEventListener('click', function() {
        // Handle regular folder items if needed
        console.log('Regular folder item clicked:', this.textContent.trim());
      });
    });

    // Start button - improved functionality
    if (startButton && startMenu) {
      startButton.addEventListener('click', function(e) {
        e.stopPropagation(); // Prevent event bubbling
        e.preventDefault(); // Prevent default behavior

        // Toggle start menu visibility
        if (startMenu.style.display === 'none' || !startMenu.style.display) {
          // Show start menu
          startMenu.style.display = 'block';

          // Position the start menu correctly
          const taskbarHeight = document.querySelector('.win95-taskbar').offsetHeight;
          startMenu.style.bottom = taskbarHeight + 'px';
          startMenu.style.left = '0';

          // Add active class to start button
          startButton.classList.add('active');
        } else {
          // Hide start menu
          startMenu.style.display = 'none';
          startButton.classList.remove('active');
        }
      });
    }

    // Start menu items - simplified with direct actions
    const startMenuItems = document.querySelectorAll('.start-menu-item');
    startMenuItems.forEach(item => {
      // Handle item click
      item.addEventListener('click', function(e) {
        e.stopPropagation();

        if (this.hasAttribute('data-action')) {
          // Handle action items
          const action = this.getAttribute('data-action');

          // Close the start menu
          startMenu.style.display = 'none';
          startButton.classList.remove('active');

          // Handle the action
          switch(action) {
            case 'open-notepad':
              const notepadWindow = document.getElementById('notepad-window');
              if (notepadWindow) {
                // Ensure Notepad opens maximized
                notepadWindow.classList.add('maximized');
                notepadWindow.style.display = 'block';
                notepadWindow.style.width = '100%';
                notepadWindow.style.height = 'calc(100% - 28px)';
                notepadWindow.style.left = '0';
                notepadWindow.style.top = '0';
                bringToFront(notepadWindow);
                updateTaskbar();

                // Focus the textarea
                setTimeout(() => {
                  const textarea = notepadWindow.querySelector('.notepad-content');
                  if (textarea) {
                    textarea.focus();
                  }
                }, 100);
              }
              break;

            case 'open-duck-hunt':
              const duckHuntWindow = document.getElementById('duck-hunt-window');
              if (duckHuntWindow) {
                duckHuntWindow.style.display = 'block';
                bringToFront(duckHuntWindow);
                updateTaskbar();
              }
              break;

            case 'open-nosyt-ai':
              const nosytAiWindow = document.getElementById('nosyt-ai-window');
              if (nosytAiWindow) {
                nosytAiWindow.style.display = 'block';
                bringToFront(nosytAiWindow);
                updateTaskbar();
              }
              break;

            case 'help':
              const helpWindow = document.getElementById('help-window');
              if (helpWindow) {
                helpWindow.style.display = 'block';
                bringToFront(helpWindow);
                updateTaskbar();
              }
              break;

            case 'return-to-site':
              window.location.href = '/';
              break;
          }
        }
      });
    });

    // Improved click handling for menus
    document.addEventListener('click', function(e) {
      // Check if click is outside start menu and start button
      const isOutsideStartMenu = startMenu && !startMenu.contains(e.target);
      const isOutsideStartButton = startButton && !startButton.contains(e.target);

      // Only close start menu if clicking outside both start menu and start button
      if (isOutsideStartMenu && isOutsideStartButton) {
        if (startMenu) {
          startMenu.style.display = 'none';
        }
        if (startButton) {
          startButton.classList.remove('active');
        }
      }

      // Hide context menu when clicking elsewhere
      if (desktopContextMenu && !desktopContextMenu.contains(e.target)) {
        desktopContextMenu.style.display = 'none';
      }
    });

    // Context menu
    if (desktop && desktopContextMenu) {
      desktop.addEventListener('contextmenu', function(e) {
        e.preventDefault();

        // Position context menu
        desktopContextMenu.style.left = e.clientX + 'px';
        desktopContextMenu.style.top = e.clientY + 'px';
        desktopContextMenu.style.display = 'block';
      });

      // Context menu items
      const contextMenuItems = document.querySelectorAll('.context-menu-item');
      contextMenuItems.forEach(item => {
        item.addEventListener('click', function() {
          const action = this.getAttribute('data-action');

          if (action === 'refresh') {
            // Simulate refresh
            const refreshAnimation = document.createElement('div');
            refreshAnimation.style.position = 'absolute';
            refreshAnimation.style.top = '0';
            refreshAnimation.style.left = '0';
            refreshAnimation.style.width = '100%';
            refreshAnimation.style.height = '100%';
            refreshAnimation.style.backgroundColor = 'rgba(255, 255, 255, 0.5)';
            refreshAnimation.style.zIndex = '999';
            desktop.appendChild(refreshAnimation);

            setTimeout(() => {
              desktop.removeChild(refreshAnimation);
            }, 500);
          } else if (action === 'trigger-bsod') {
            // Trigger BSOD
            if (window.NosytBSOD && typeof window.NosytBSOD.triggerBSOD === 'function') {
              window.NosytBSOD.triggerBSOD();
            }
          }

          desktopContextMenu.style.display = 'none';
        });
      });
    }

    // Clippy functionality
    if (clippy) {
      // Clippy close button
      if (clippyClose) {
        clippyClose.addEventListener('click', function() {
          clippyBubble.style.display = 'none';
        });
      }

      // Clippy image click
      if (clippyImage) {
        clippyImage.addEventListener('click', function() {
          if (clippyBubble.style.display === 'none' || !clippyBubble.style.display) {
            clippyBubble.style.display = 'block';
            clippyMessage.textContent = "It looks like you're exploring NosytOS95! This is a development version with limited functionality.";
            showClippyOptions(['help', 'explore', 'development', 'coming-soon', 'browser']);
          } else {
            clippyBubble.style.display = 'none';
          }
        });
      }

      // Clippy options
      const clippyOptionButtons = document.querySelectorAll('.clippy-option');
      clippyOptionButtons.forEach(button => {
        button.addEventListener('click', function() {
          const action = this.getAttribute('data-action');

          switch (action) {
            case 'help':
              clippyMessage.textContent = "Here are some tips for using NosytOS95:";
              showClippyOptions(['windows', 'apps', 'games', 'system-tools', 'back-to-main']);
              break;

            case 'system-tools':
              clippyMessage.textContent = "System tools and diagnostics:";
              showClippyOptions(['trigger-bsod', 'system-info', 'back-to-help']);
              break;

            case 'trigger-bsod':
              clippyMessage.textContent = "Triggering Blue Screen of Death...";
              showClippyOptions(['back-to-main']);

              // Trigger BSOD after a short delay
              setTimeout(() => {
                if (window.NosytBSOD && typeof window.NosytBSOD.triggerBSOD === 'function') {
                  window.NosytBSOD.triggerBSOD();
                }
              }, 1500);
              break;

            case 'system-info':
              clippyMessage.textContent = "System Information: NosytOS95 Version 4.00.950. CPU: 486DX2/66MHz. RAM: 16MB. HDD: 850MB.";
              showClippyOptions(['back-to-system-tools']);
              break;

            case 'back-to-help':
              clippyMessage.textContent = "Here are some tips for using NosytOS95:";
              showClippyOptions(['windows', 'apps', 'games', 'system-tools', 'back-to-main']);
              break;

            case 'back-to-system-tools':
              clippyMessage.textContent = "System tools and diagnostics:";
              showClippyOptions(['trigger-bsod', 'system-info', 'back-to-help']);
              break;
            case 'explore':
              clippyMessage.textContent = "Great! Feel free to explore. Note that this is a development version with limited functionality.";
              showClippyOptions(['thanks']);
              break;
            case 'development':
              clippyMessage.textContent = "Currently working features include Notepad, basic window management, and this help system. Many features are still under development.";
              showClippyOptions(['back-to-main']);
              break;
            case 'coming-soon':
              clippyMessage.textContent = "Coming soon: Improved window management. We've just added Duck Hunt, Doom II, and Nosyt AI Assistant - try them out!";
              showClippyOptions(['play-duck-hunt', 'play-doom', 'open-nosyt-ai', 'back-to-main']);
              break;
            case 'open-nosyt-ai':
              clippyMessage.textContent = "Opening Nosyt AI Assistant...";
              showClippyOptions(['back-to-main']);

              // Open the Nosyt AI window
              const nosytAIWindow = document.getElementById('nosyt-ai-window');
              if (nosytAIWindow) {
                // Position window in center if not already positioned
                if (!nosytAIWindow.style.left) {
                  const left = (desktop.offsetWidth - nosytAIWindow.offsetWidth) / 2;
                  const top = (desktop.offsetHeight - nosytAIWindow.offsetHeight) / 2;
                  nosytAIWindow.style.left = left + 'px';
                  nosytAIWindow.style.top = top + 'px';
                }

                // Show window and bring to front
                nosytAIWindow.style.display = 'block';
                bringToFront(nosytAIWindow);
                updateTaskbar();
              }
              break;
            case 'play-doom':
              clippyMessage.textContent = "Opening Doom II game...";
              showClippyOptions(['back-to-main']);

              // Open the Doom II window
              const doomWindow = document.getElementById('doom-window');
              if (doomWindow) {
                // Position window in center if not already positioned
                if (!doomWindow.style.left) {
                  const left = (desktop.offsetWidth - doomWindow.offsetWidth) / 2;
                  const top = (desktop.offsetHeight - doomWindow.offsetHeight) / 2;
                  doomWindow.style.left = left + 'px';
                  doomWindow.style.top = top + 'px';
                }

                // Show window and bring to front
                doomWindow.style.display = 'block';
                bringToFront(doomWindow);
                updateTaskbar();
              }
              break;
            case 'play-duck-hunt':
              clippyMessage.textContent = "Opening Duck Hunt game...";
              showClippyOptions(['back-to-main']);

              // Open the Duck Hunt window
              const duckHuntWindow = document.getElementById('duck-hunt-window');
              if (duckHuntWindow) {
                // Position window in center if not already positioned
                if (!duckHuntWindow.style.left) {
                  const left = (desktop.offsetWidth - duckHuntWindow.offsetWidth) / 2;
                  const top = (desktop.offsetHeight - duckHuntWindow.offsetHeight) / 2;
                  duckHuntWindow.style.left = left + 'px';
                  duckHuntWindow.style.top = top + 'px';
                }

                // Show window and bring to front
                duckHuntWindow.style.display = 'block';
                bringToFront(duckHuntWindow);
                updateTaskbar();
              }
              break;

            case 'open-notepad':
              clippyMessage.textContent = "Opening Notepad...";
              showClippyOptions(['back-to-main']);

              // Open the Notepad window
              const notepadWindow = document.getElementById('notepad-window');
              if (notepadWindow) {
                // Ensure Notepad opens maximized
                notepadWindow.classList.add('maximized');
                notepadWindow.style.display = 'block';
                notepadWindow.style.width = '100%';
                notepadWindow.style.height = 'calc(100% - 28px)';
                notepadWindow.style.left = '0';
                notepadWindow.style.top = '0';
                bringToFront(notepadWindow);
                updateTaskbar();

                // Focus the textarea
                setTimeout(() => {
                  const textarea = notepadWindow.querySelector('.notepad-content');
                  if (textarea) {
                    textarea.focus();
                  }
                }, 100);
              }
              break;
            case 'browser':
              clippyMessage.textContent = "For the best experience, use a desktop browser like Chrome, Firefox, or Edge. Mobile support is limited at this time.";
              showClippyOptions(['back-to-main']);
              break;

            case 'open-doom':
              clippyMessage.textContent = "Opening Doom II...";
              showClippyOptions(['thanks']);

              // Open Doom II window
              const doomWindowElement = document.getElementById('doom-window');
              if (doomWindowElement) {
                doomWindowElement.style.display = 'block';
                bringToFront(doomWindowElement);
              }
              break;

            case 'easter-egg':
              clippyMessage.textContent = "You found an Easter egg! Press the Konami code: ↑ ↑ ↓ ↓ ← → ← → B A";
              showClippyOptions(['thanks']);

              // Set up Konami code listener
              let konamiCode = ['ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowRight', 'b', 'a'];
              let konamiPosition = 0;

              function konamiListener(e) {
                if (e.key === konamiCode[konamiPosition] || e.key.toLowerCase() === konamiCode[konamiPosition]) {
                  konamiPosition++;

                  if (konamiPosition === konamiCode.length) {
                    // Konami code completed!
                    document.removeEventListener('keydown', konamiListener);

                    // Show Easter egg message
                    const easterEggDiv = document.createElement('div');
                    easterEggDiv.style.position = 'fixed';
                    easterEggDiv.style.top = '50%';
                    easterEggDiv.style.left = '50%';
                    easterEggDiv.style.transform = 'translate(-50%, -50%)';
                    easterEggDiv.style.padding = '20px';
                    easterEggDiv.style.backgroundColor = 'var(--win95-window-bg)';
                    easterEggDiv.style.border = '2px solid var(--win95-window-header)';
                    easterEggDiv.style.boxShadow = '4px 4px 10px rgba(0, 0, 0, 0.3)';
                    easterEggDiv.style.zIndex = '9999';
                    easterEggDiv.style.textAlign = 'center';
                    easterEggDiv.innerHTML = '<h3>Easter Egg Found!</h3><p>You discovered a secret! Well done!</p><button id="close-easter-egg" style="margin-top: 10px; padding: 5px 10px;">Close</button>';
                    document.body.appendChild(easterEggDiv);

                    // Close Easter egg on button click
                    document.getElementById('close-easter-egg').addEventListener('click', function() {
                      document.body.removeChild(easterEggDiv);
                    });

                    // Show message in clippy
                    clippyMessage.textContent = "You've found an Easter egg! Nice job!";
                  }
                } else {
                  konamiPosition = 0;
                }
              }

              document.addEventListener('keydown', konamiListener);
              break;
            case 'windows':
              clippyMessage.textContent = "Windows can be moved by dragging the title bar. Resize by dragging the corners or edges.";
              showClippyOptions(['back-to-main']);
              break;
            case 'apps':
              clippyMessage.textContent = "NosytOS95 includes several applications:";
              showClippyOptions(['notepad', 'duck-hunt', 'back-to-main']);
              break;
            case 'notepad':
              clippyMessage.textContent = "Notepad is a simple text editor for creating and editing documents.";
              showClippyOptions(['open-notepad', 'back-to-main']);
              break;
            case 'duck-hunt':
              clippyMessage.textContent = "Duck Hunt is a shooting game where you click on ducks to score points. Try to get a high score!";
              showClippyOptions(['play-duck-hunt', 'back-to-main']);
              break;
            case 'games':
              clippyMessage.textContent = "NosytOS95 includes games like Duck Hunt and Doom II, with more coming soon!";
              showClippyOptions(['duck-hunt', 'doom', 'back-to-main']);
              break;
            case 'doom':
              clippyMessage.textContent = "Doom II is a first-person shooter game where you battle demons from hell. Use WASD to move and mouse to aim and shoot.";
              showClippyOptions(['play-doom', 'back-to-main']);
              break;
            case 'cursor':
              clippyMessage.textContent = "Cursor AI is an advanced code editor with chat functionality that can see your codebase.";
              showClippyOptions(['ai-back']);
              break;
            case 'trae':
              clippyMessage.textContent = "Trae AI is an adaptive code editor with comprehensive IDE features and real-time assistance.";
              showClippyOptions(['ai-back']);
              break;
            case 'roo':
              clippyMessage.textContent = "Roo Code Windsurf is an AI-powered IDE with Composer feature for working with large codebases.";
              showClippyOptions(['ai-back']);
              break;
            case 'back-to-main':
              clippyMessage.textContent = "It looks like you're exploring NosytOS95! This is a development version with limited functionality.";
              showClippyOptions(['help', 'explore', 'development', 'coming-soon', 'browser']);
              break;
            case 'ai-back':
              clippyMessage.textContent = "NosytLabs specializes in AI tools like Cursor AI, Trae AI, and Roo Code Windsurf.";
              showClippyOptions(['cursor', 'trae', 'roo', 'back']);
              break;
            case 'thanks':
              clippyBubble.style.display = 'none';
              break;
          }
        });
      });

      // Helper function to show specific clippy options
      function showClippyOptions(options) {
        const allOptions = document.querySelectorAll('.clippy-option');
        allOptions.forEach(option => {
          const action = option.getAttribute('data-action');
          if (options.includes(action)) {
            option.style.display = 'block';
          } else {
            option.style.display = 'none';
          }
        });
      }
    }

    // Update taskbar with open windows
    function updateTaskbar() {
      openWindowsContainer.innerHTML = '';

      windows.forEach(window => {
        if (window.style.display !== 'none') {
          const title = window.querySelector('.window-title span').textContent;
          const icon = window.querySelector('.window-icon').src;

          const taskbarItem = document.createElement('div');
          taskbarItem.className = 'taskbar-item';
          taskbarItem.style.display = 'flex';
          taskbarItem.style.alignItems = 'center';
          taskbarItem.style.padding = '2px 4px';
          taskbarItem.style.margin = '0 2px';
          taskbarItem.style.backgroundColor = 'var(--win95-button-face)';
          taskbarItem.style.border = '2px solid';
          taskbarItem.style.borderColor = 'var(--win95-button-highlight) var(--win95-button-shadow) var(--win95-button-shadow) var(--win95-button-highlight)';
          taskbarItem.style.minWidth = '100px';
          taskbarItem.style.maxWidth = '200px';
          taskbarItem.style.overflow = 'hidden';
          taskbarItem.style.whiteSpace = 'nowrap';
          taskbarItem.style.textOverflow = 'ellipsis';
          taskbarItem.style.fontSize = '12px';
          taskbarItem.style.cursor = 'pointer';

          const iconImg = document.createElement('img');
          iconImg.src = icon;
          iconImg.style.width = '16px';
          iconImg.style.height = '16px';
          iconImg.style.marginRight = '4px';

          const titleSpan = document.createElement('span');
          titleSpan.textContent = title;

          taskbarItem.appendChild(iconImg);
          taskbarItem.appendChild(titleSpan);

          // Click handler to focus window
          taskbarItem.addEventListener('click', function() {
            if (window.style.display === 'none') {
              window.style.display = 'block';
            }
            bringToFront(window);
          });

          openWindowsContainer.appendChild(taskbarItem);
        }
      });
    }

    // Initialize taskbar
    updateTaskbar();

    // Submenu handling (legacy code - kept for reference but not used in simplified version)
    // This section is commented out to avoid duplicate startMenuItems declaration
    /*
    const legacyStartMenuItems = document.querySelectorAll('.start-menu-item[data-submenu]');
    legacyStartMenuItems.forEach(item => {
      // Handle item click
      item.addEventListener('click', function(e) {
        // Don't close start menu if clicking on an item with submenu
        if (this.hasAttribute('data-submenu')) {
          e.stopPropagation();
          e.preventDefault();

          // Get the submenu ID and element
          const submenuId = this.getAttribute('data-submenu');
          const submenu = document.getElementById(submenuId);

          if (submenu) {
            // Hide all other submenus first
            document.querySelectorAll('.submenu').forEach(menu => {
              if (menu.id !== submenuId) {
                menu.style.display = 'none';
              }
            });

            // Position and show this submenu
            const rect = this.getBoundingClientRect();
            submenu.style.top = (rect.top - desktop.getBoundingClientRect().top) + 'px';
            submenu.style.left = (rect.right - desktop.getBoundingClientRect().left) + 'px';
            submenu.style.display = 'block';
          }
        }
      });
    });
    */

    // Submenu items
    const submenuItems = document.querySelectorAll('.submenu-item');
    submenuItems.forEach(item => {
      item.addEventListener('click', function() {
        const action = this.getAttribute('data-action');
        const target = this.getAttribute('data-target');

        if (action === 'open' && target) {
          const targetWindow = document.getElementById(target);
          if (targetWindow) {
            // Position window in center if not already positioned
            if (!targetWindow.style.left) {
              const left = (desktop.offsetWidth - targetWindow.offsetWidth) / 2;
              const top = (desktop.offsetHeight - targetWindow.offsetHeight) / 2;
              targetWindow.style.left = left + 'px';
              targetWindow.style.top = top + 'px';
            }

            // Show window and bring to front
            targetWindow.style.display = 'block';
            bringToFront(targetWindow);
            updateTaskbar();
          }
        }

        // Close start menu and all submenus
        startMenu.style.display = 'none';
        document.querySelectorAll('.submenu').forEach(menu => {
          menu.style.display = 'none';
        });
      });
    });

    // Internet Explorer buttons
    const ieButtons = document.querySelectorAll('.ie-button');
    ieButtons.forEach(button => {
      button.addEventListener('click', function() {
        if (this.classList.contains('ie-refresh')) {
          const ieContent = document.querySelector('.ie-content');
          if (ieContent) {
            ieContent.style.opacity = '0.5';
            setTimeout(() => {
              ieContent.style.opacity = '1';
            }, 300);
          }
        }
      });
    });

    // AI Assistant functionality
    const aiInput = document.getElementById('ai-input');
    const aiSendBtn = document.getElementById('ai-send-btn');
    const aiChatMessages = document.getElementById('ai-chat-messages');
    const aiSuggestionBtns = document.querySelectorAll('.ai-suggestion-btn');

    // Function to add a message to the chat
    function addAiMessage(message, isUser = false) {
      const messageDiv = document.createElement('div');
      messageDiv.className = isUser ? 'ai-message ai-user-message' : 'ai-message';

      if (isUser) {
        messageDiv.innerHTML = `
          <div class="ai-message-bubble">
            <p>${message}</p>
          </div>
          <img src="/images/win95/user.png" alt="User" class="ai-avatar">
        `;
      } else {
        messageDiv.innerHTML = `
          <img src="/images/win95/clippy.png" alt="Nosyt AI" class="ai-avatar">
          <div class="ai-message-bubble">
            <p>${message}</p>
          </div>
        `;
      }

      aiChatMessages.appendChild(messageDiv);
      aiChatMessages.scrollTop = aiChatMessages.scrollHeight;
    }

    // Function to handle AI responses
    function getAiResponse(query) {
      // Simple responses based on keywords
      if (query.toLowerCase().includes('nosytlabs') || query.toLowerCase().includes('what is')) {
        return "NosytLabs is a tech company specializing in AI solutions, web development, mobile apps, and 3D printing services. Our tagline is 'Notable Opportunities Shape Your Tomorrow'.";
      } else if (query.toLowerCase().includes('ai tool') || query.toLowerCase().includes('cursor') || query.toLowerCase().includes('trae') || query.toLowerCase().includes('roo')) {
        return "Our flagship AI tools include: Cursor AI (advanced code editor with chat), Trae AI (adaptive code editor with IDE features), and Roo Code Windsurf (AI-powered IDE for large codebases).";
      } else if (query.toLowerCase().includes('contact') || query.toLowerCase().includes('email') || query.toLowerCase().includes('phone')) {
        return "You can contact NosytLabs at info@nosytlabs.com or visit our website at www.nosytlabs.com.";
      } else if (query.toLowerCase().includes('joke')) {
        const jokes = [
          "Why do programmers prefer dark mode? Because light attracts bugs!",
          "Why did the AI assistant go to therapy? It had too many deep learning issues!",
          "How many programmers does it take to change a light bulb? None, that's a hardware problem!",
          "Why did the computer go to the doctor? It had a virus!",
          "What's a computer's favorite snack? Microchips!"
        ];
        return jokes[Math.floor(Math.random() * jokes.length)];
      } else {
        return "I'm not sure how to respond to that. Try asking about NosytLabs, our AI tools, or how to contact us!";
      }
    }

    // Send button click handler
    if (aiSendBtn) {
      aiSendBtn.addEventListener('click', function() {
        if (aiInput && aiInput.value.trim() !== '') {
          const userMessage = aiInput.value.trim();
          addAiMessage(userMessage, true);
          aiInput.value = '';

          // Simulate typing delay
          setTimeout(() => {
            const response = getAiResponse(userMessage);
            addAiMessage(response);
          }, 1000);
        }
      });
    }

    // Enter key handler for input
    if (aiInput) {
      aiInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter' && aiInput.value.trim() !== '') {
          const userMessage = aiInput.value.trim();
          addAiMessage(userMessage, true);
          aiInput.value = '';

          // Simulate typing delay
          setTimeout(() => {
            const response = getAiResponse(userMessage);
            addAiMessage(response);
          }, 1000);
        }
      });
    }

    // Suggestion buttons
    aiSuggestionBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        const query = this.getAttribute('data-query');
        if (query) {
          addAiMessage(query, true);

          // Simulate typing delay
          setTimeout(() => {
            const response = getAiResponse(query);
            addAiMessage(response);
          }, 1000);
        }
      });
    });

    // Duck Hunt Game variables
    const duckHuntWindow = document.getElementById('duck-hunt-window');
    const duck1 = document.getElementById('duck1');
    const duck2 = document.getElementById('duck2');
    const duckScore = document.getElementById('duck-score');
    const duckMessage = document.getElementById('duck-message');
    let score = 0;
    let duckSpeed = 2000; // Base speed in ms
    let duckAnimations = [];

    // Preload sound effects for better performance
    const soundEffects = {
      quack1: new Audio('/sounds/quack.mp3'),
      quack2: new Audio('/sounds/funny-quack.mp3'),
      quack3: new Audio('/sounds/rubber-duck.mp3'),
      quack4: new Audio('/sounds/duck-scream.mp3')
    };

    // Set volume for all sound effects
    Object.values(soundEffects).forEach(audio => {
      audio.volume = 0.5;
    });

    // Function to update duck positions based on window size
    function updateDuckHuntGame() {
      if (duckHuntWindow && duckHuntWindow.style.display !== 'none') {
        const gameContent = duckHuntWindow.querySelector('.duck-hunt-game');
        const isMaximized = duckHuntWindow.classList.contains('maximized');

        // Adjust duck size based on window size
        const duckSize = isMaximized ? '60px' : '40px';

        if (duck1) {
          duck1.style.width = duckSize;
          duck1.style.height = duckSize;
        }

        if (duck2) {
          duck2.style.width = duckSize;
          duck2.style.height = duckSize;
        }

        // Clear existing animations
        duckAnimations.forEach(animation => {
          clearInterval(animation);
        });
        duckAnimations = [];

        // Start new animations
        if (duck1) {
          animateDuck(duck1);
        }

        if (duck2) {
          // Slight delay for second duck
          setTimeout(() => {
            animateDuck(duck2);
          }, 500);
        }
      }
    }

    // Function to animate a duck
    function animateDuck(duck) {
      // Set initial position
      const randomTop = Math.floor(Math.random() * 50) + 10;
      const randomLeft = Math.floor(Math.random() * 70) + 10;
      duck.style.top = `${randomTop}%`;
      duck.style.left = `${randomLeft}%`;

      // Random direction
      let directionX = Math.random() > 0.5 ? 1 : -1;
      let directionY = Math.random() > 0.5 ? 1 : -1;

      // Animation interval
      const animation = setInterval(() => {
        if (duckHuntWindow.style.display === 'none') {
          clearInterval(animation);
          return;
        }

        // Get current position
        let top = parseFloat(duck.style.top);
        let left = parseFloat(duck.style.left);

        // Update position
        top += directionY * (Math.random() * 2 + 1);
        left += directionX * (Math.random() * 2 + 1);

        // Bounce off edges
        if (top <= 5 || top >= 75) {
          directionY *= -1;
          top = Math.max(5, Math.min(75, top));
        }

        if (left <= 5 || left >= 85) {
          directionX *= -1;
          left = Math.max(5, Math.min(85, left));

          // Flip duck image based on direction
          duck.style.transform = directionX > 0 ? 'scaleX(1)' : 'scaleX(-1)';
        }

        // Apply new position
        duck.style.top = `${top}%`;
        duck.style.left = `${left}%`;
      }, 100);

      duckAnimations.push(animation);
    }

    function shootDuck(duck) {
      // Play sound effect
      try {
        // Get a random sound from our preloaded sounds
        const soundKeys = Object.keys(soundEffects);
        const randomSoundKey = soundKeys[Math.floor(Math.random() * soundKeys.length)];
        const audio = soundEffects[randomSoundKey];

        // Clone the audio to allow overlapping sounds
        const audioClone = audio.cloneNode();
        audioClone.volume = 0.5;

        // Add error handling for missing sound files
        audioClone.onerror = function() {
          console.log('Sound file not found, using fallback');
          // No need to do anything else, just log the error
        };

        audioClone.play().catch(err => {
          console.log('Audio play failed, likely due to user interaction required:', err);
        });
      } catch (e) {
        console.log('Error playing sound:', e);
      }

      // Increment score with random bonus
      const pointBonus = Math.floor(Math.random() * 5) + 5; // 5-10 points
      score += pointBonus;
      duckScore.textContent = score;

      // Show funny message
      const funnyMessages = [
        `Quack! +${pointBonus} points`,
        'What the duck! Nice shot!',
        'Duck down! You got it!',
        'That\'s quacktastic!',
        'Duck season is open!'
      ];
      const randomMessage = funnyMessages[Math.floor(Math.random() * funnyMessages.length)];
      duckMessage.textContent = randomMessage;

      setTimeout(() => {
        duckMessage.textContent = 'Click on ducks to shoot!';
      }, 1500);

      // Add visual effect
      duck.style.transform = 'rotate(180deg)';
      duck.style.transition = 'transform 0.5s ease';

      // Hide duck temporarily
      setTimeout(() => {
        duck.style.visibility = 'hidden';
      }, 300);

      // Reposition duck
      setTimeout(() => {
        const randomTop = Math.floor(Math.random() * 50) + 10;
        const randomLeft = Math.floor(Math.random() * 70) + 10;
        duck.style.top = `${randomTop}%`;
        duck.style.left = `${randomLeft}%`;
        duck.style.transform = 'rotate(0deg)';
        duck.style.visibility = 'visible';

        // Increase difficulty slightly
        duckSpeed = Math.max(500, duckSpeed - 50);
      }, 1000);
    }

    // Add event listeners to ducks
    if (duck1) {
      duck1.addEventListener('click', function() {
        shootDuck(this);
      });
    }

    if (duck2) {
      duck2.addEventListener('click', function() {
        shootDuck(this);
      });
    }

    // Initialize duck hunt game when window is shown
    if (duckHuntWindow) {
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.attributeName === 'style' &&
              duckHuntWindow.style.display !== 'none') {
            updateDuckHuntGame();
          }
        });
      });

      observer.observe(duckHuntWindow, { attributes: true });

      // Also update when window is resized or maximized
      duckHuntWindow.querySelector('.window-maximize').addEventListener('click', () => {
        setTimeout(updateDuckHuntGame, 100);
      });
    }
  });
</script>

<style is:global>
  /* Start Menu Submenu Styles - Improved */
  .submenu {
    position: absolute;
    left: 100%;
    top: 0;
    width: 180px;
    background-color: var(--win95-window-bg);
    border: 2px solid;
    border-color: var(--win95-button-highlight) var(--win95-button-shadow) var(--win95-button-shadow) var(--win95-button-highlight);
    z-index: 1002;
    padding: 2px;
    display: none; /* Hidden by default, shown via JavaScript */
  }

  /* Hover effect for submenu items */
  .start-menu-item[data-submenu]:hover,
  .submenu-item:hover {
    background-color: var(--win95-window-header);
    color: white;
  }

  /* Keep submenu visible when hovering between parent and submenu */
  .start-menu-item[data-submenu]:hover + .submenu,
  .submenu:hover {
    display: block;
  }

  .submenu-item {
    display: flex;
    align-items: center;
    padding: 4px 8px;
    cursor: pointer;
    font-size: 12px;
  }

  .submenu-item img {
    width: 16px;
    height: 16px;
    margin-right: 8px;
  }

  /* Duck Hunt Game Styles - Improved */
  .duck {
    cursor: crosshair !important;
    transition: transform 0.2s ease !important;
    z-index: 100 !important;
  }

  .duck:hover {
    filter: brightness(1.2) !important;
    transform: scale(1.1) !important;
  }

  .duck-hunt-message {
    position: absolute;
    bottom: 40px;
    left: 50%;
    transform: translateX(-50%);
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 5px 10px;
    border-radius: 5px;
    font-family: 'MS Sans Serif', sans-serif;
    font-size: 14px;
    text-align: center;
    z-index: 30;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
    opacity: 1;
    transition: opacity 0.5s ease;
  }

  .duck-hunt-sky {
    position: relative;
    width: 100%;
    height: 300px;
    background: linear-gradient(to bottom, #87CEEB, #E0F7FF);
    overflow: hidden;
  }

  .duck-hunt-ground {
    height: 50px;
    background-color: #228B22;
    position: relative;
  }

  .duck-hunt-score {
    position: absolute;
    top: 10px;
    right: 10px;
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 5px 10px;
    border-radius: 5px;
    font-family: 'MS Sans Serif', sans-serif;
    font-size: 14px;
    z-index: 30;
  }

  .duck {
    position: absolute;
    width: 60px;
    height: 60px;
    background-image: url('/images/win95/duck.png');
    background-size: contain;
    background-repeat: no-repeat;
  }

  .duck.flying {
    animation: fly 0.5s steps(2) infinite;
  }

  .duck.shot {
    background-image: url('/images/win95/duck-shot.png');
    animation: none;
  }

  .duck.falling {
    background-image: url('/images/win95/duck-falling.png');
    animation: fall 0.5s steps(2) infinite;
  }

  .score-popup {
    position: absolute;
    color: #FFD700;
    font-weight: bold;
    font-family: 'MS Sans Serif', sans-serif;
    font-size: 16px;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.7);
    z-index: 200;
    pointer-events: none;
    transition: all 0.5s ease;
  }

  .miss-effect {
    position: absolute;
    width: 20px;
    height: 20px;
    background-image: url('/images/win95/miss.png');
    background-size: contain;
    background-repeat: no-repeat;
    transform: translate(-50%, -50%);
    z-index: 150;
    pointer-events: none;
    animation: fadeOut 0.3s forwards;
  }

  /* Terminal Styles */
  .terminal-content {
    background-color: #000;
    color: #0F0;
    font-family: 'Courier New', monospace;
    padding: 10px;
    height: 100%;
    overflow: auto;
  }

  .terminal-output {
    margin-bottom: 10px;
    white-space: pre-wrap;
    line-height: 1.2;
  }

  .terminal-input-line {
    display: flex;
    align-items: center;
  }

  .terminal-prompt {
    color: #0F0;
    margin-right: 5px;
  }

  .terminal-input {
    background-color: transparent;
    border: none;
    color: #0F0;
    font-family: 'Courier New', monospace;
    font-size: inherit;
    flex-grow: 1;
    outline: none;
  }

  /* Browser Styles */
  .browser-toolbar {
    display: flex;
    align-items: center;
    padding: 5px;
    background-color: #D4D0C8;
    border-bottom: 1px solid #808080;
  }

  .browser-button {
    width: 24px;
    height: 24px;
    margin-right: 5px;
    background-color: #D4D0C8;
    border: 1px solid #808080;
    border-radius: 0;
    cursor: pointer;
  }

  .browser-address-bar {
    display: flex;
    align-items: center;
    flex-grow: 1;
    margin-left: 10px;
  }

  .browser-address-bar span {
    margin-right: 5px;
  }

  .browser-address-bar input {
    flex-grow: 1;
    border: 1px inset #808080;
    padding: 2px 5px;
    background-color: white;
  }

  .browser-go {
    margin-left: 5px;
    padding: 2px 8px;
    background-color: #D4D0C8;
    border: 1px solid #808080;
    border-radius: 0;
  }

  .browser-content {
    background-color: white;
    height: 100%;
    overflow: auto;
  }

  .browser-loading {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
  }

  .browser-loading img {
    width: 32px;
    height: 32px;
    margin-bottom: 10px;
  }

  .browser-frame {
    width: 100%;
    height: 100%;
  }

  /* Doom II Game styles */
  .doom-game-container {
    width: 100%;
    height: 100%;
    position: relative;
    background-color: #000;
    overflow: hidden;
  }

  #doom-canvas {
    width: 100%;
    height: 100%;
    display: block;
  }

  #doom-loading {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: #fff;
    font-family: 'MS Sans Serif', sans-serif;
    font-size: 16px;
    text-align: center;
    background-color: rgba(0, 0, 0, 0.7);
    padding: 20px;
    border-radius: 5px;
    z-index: 10;
  }

  #doom-start-button {
    position: absolute;
    top: 60%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-family: 'MS Sans Serif', sans-serif;
    font-size: 16px;
    padding: 10px 20px;
    background-color: var(--win95-button-face);
    border: 2px solid;
    border-color: var(--win95-button-highlight) var(--win95-button-shadow) var(--win95-button-shadow) var(--win95-button-highlight);
    cursor: pointer;
    z-index: 10;
  }

  #doom-start-button:hover {
    background-color: var(--win95-button-hover);
  }
</style>

<!-- Enhanced Windows 95 Styles -->
<link rel="stylesheet" href="/styles/consolidated-styles.css">
<link rel="stylesheet" href="/styles/win95-authentic.css">
<link rel="stylesheet" href="/styles/ms-sans-serif.css">
<link rel="stylesheet" href="/styles/win95-taskbar.css">
<link rel="stylesheet" href="/styles/win95-menu.css">
<link rel="stylesheet" href="/styles/win95-desktop-icons.css">

<!-- Enhanced Windows 95 Scripts -->
<script src="/scripts/nosytos95/sound-manager.js" defer></script>
<script src="/scripts/nosytos95/window-manager.js" defer></script>
<script src="/scripts/nosytos95/start-menu.js" defer></script>
<script src="/scripts/nosytos95/taskbar.js" defer></script>
<script src="/scripts/nosytos95/desktop-icons.js" defer></script>
<script src="/scripts/win95-accessibility.js" defer></script>
<script src="/scripts/nosyt-duck-hunt-embed.js" defer></script>
<script src="/scripts/enhanced-clippy.js" defer></script>
<script src="/scripts/enhanced-terminal.js" defer></script>
<script src="/scripts/enhanced-system-dialogs.js" defer></script>
<script src="/scripts/enhanced-help.js" defer></script>
<script src="/scripts/enhanced-easter-eggs.js" defer></script>
<script src="/scripts/nosytos95-animations.js" defer></script>

<!-- Enhanced CSS for Duck Hunt Game -->
<style>
  .duck-hunt-game {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    background-color: #008080;
    padding: 10px;
  }

  .game-canvas {
    border: 2px solid #000;
    background-color: #87CEEB;
    margin-bottom: 10px;
    box-shadow: 3px 3px 5px rgba(0, 0, 0, 0.3);
  }

  .game-controls {
    display: flex;
    gap: 10px;
    margin-top: 10px;
  }

  .win95-button {
    background-color: #c0c0c0;
    border: 2px solid #fff;
    border-right-color: #808080;
    border-bottom-color: #808080;
    padding: 5px 10px;
    font-family: 'MS Sans Serif', sans-serif;
    font-size: 14px;
    cursor: pointer;
    outline: none;
  }

  .win95-button:active {
    border: 2px solid #c0c0c0;
    border-right-color: #fff;
    border-bottom-color: #fff;
  }

  .sound-toggle, .high-score-button {
    min-width: 40px;
    text-align: center;
  }

  .duck-hunt-score {
    position: absolute;
    top: 10px;
    left: 10px;
    background-color: rgba(0, 0, 0, 0.5);
    color: white;
    padding: 5px 10px;
    border-radius: 5px;
    font-family: 'MS Sans Serif', sans-serif;
    font-size: 14px;
    z-index: 20;
  }

  .duck-hunt-message {
    position: absolute;
    bottom: 10px;
    left: 50%;
    transform: translateX(-50%);
    background-color: rgba(0, 0, 0, 0.5);
    color: white;
    padding: 5px 10px;
    border-radius: 5px;
    font-family: 'MS Sans Serif', sans-serif;
    font-size: 14px;
    text-align: center;
    z-index: 20;
  }

  .duck-hunt-controls {
    position: absolute;
    top: 10px;
    right: 10px;
    display: flex;
    gap: 5px;
    z-index: 20;
  }

  .shot-effect {
    position: absolute;
    width: 20px;
    height: 20px;
    background-color: yellow;
    border-radius: 50%;
    box-shadow: 0 0 10px 5px rgba(255, 255, 0, 0.7);
    z-index: 50;
    transition: transform 0.2s, opacity 0.2s;
  }
</style>

</BaseLayout>