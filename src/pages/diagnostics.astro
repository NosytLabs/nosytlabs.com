---
/**
 * Site Diagnostics Page
 * Comprehensive system monitoring and performance analysis dashboard
 */
import MainLayout from '../layouts/MainLayout.astro';
import DiagnosticsDashboard from '../components/DiagnosticsDashboard.astro';

const pageTitle = 'Site Diagnostics & Performance Monitoring';
const pageDescription = 'Real-time system health monitoring, performance metrics, and diagnostic reports for optimal site functionality.';
---

<MainLayout title={pageTitle} description={pageDescription}>
  <main class="diagnostics-page">
    <!-- Page Header -->
    <section class="diagnostics-header">
      <div class="container">
        <div class="header-content">
          <div class="header-text">
            <h1 class="page-title">
              <svg class="title-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <path d="M9 12l2 2 4-4"/>
                <path d="M21 12c-1 0-3-1-3-3s2-3 3-3 3 1 3 3-2 3-3 3"/>
                <path d="M3 12c1 0 3-1 3-3s-2-3-3-3-3 1-3 3 2 3 3 3"/>
                <path d="M12 3c0 1-1 3-3 3s-3-2-3-3 1-3 3-3 3 2 3 3"/>
                <path d="M12 21c0-1-1-3-3-3s-3 2-3 3 1 3 3 3 3-2 3-3"/>
              </svg>
              Site Diagnostics &amp; Performance Monitoring
            </h1>
            <p class="page-description">
              Comprehensive real-time monitoring of system health, performance metrics, 
              and diagnostic analysis to ensure optimal site functionality and user experience.
            </p>
          </div>
          <div class="header-stats">
            <div class="stat-card">
              <div class="stat-value" id="uptime-value">--</div>
              <div class="stat-label">System Uptime</div>
            </div>
            <div class="stat-card">
              <div class="stat-value" id="response-time">--</div>
              <div class="stat-label">Avg Response Time</div>
            </div>
            <div class="stat-card">
              <div class="stat-value" id="error-count">--</div>
              <div class="stat-label">Active Issues</div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Diagnostics Dashboard -->
    <section class="dashboard-section">
      <div class="container">
        <DiagnosticsDashboard />
      </div>
    </section>

    <!-- Additional System Information -->
    <section class="system-info-section">
      <div class="container">
        <div class="info-grid">
          <!-- Browser Information -->
          <div class="info-card">
            <h3 class="info-title">
              <svg class="info-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <circle cx="12" cy="12" r="10"/>
                <circle cx="12" cy="12" r="4"/>
                <line x1="21.17" y1="8" x2="12" y2="8"/>
                <line x1="3.95" y1="6.06" x2="8.54" y2="14"/>
                <line x1="10.88" y1="21.94" x2="15.46" y2="14"/>
              </svg>
              Browser Environment
            </h3>
            <div class="info-content">
              <div class="info-item">
                <span class="info-key">User Agent:</span>
                <span class="info-value" id="user-agent">--</span>
              </div>
              <div class="info-item">
                <span class="info-key">Viewport:</span>
                <span class="info-value" id="viewport-size">--</span>
              </div>
              <div class="info-item">
                <span class="info-key">Color Depth:</span>
                <span class="info-value" id="color-depth">--</span>
              </div>
              <div class="info-item">
                <span class="info-key">Language:</span>
                <span class="info-value" id="browser-language">--</span>
              </div>
              <div class="info-item">
                <span class="info-key">Online Status:</span>
                <span class="info-value" id="online-status">--</span>
              </div>
            </div>
          </div>

          <!-- Connection Information -->
          <div class="info-card">
            <h3 class="info-title">
              <svg class="info-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                <circle cx="12" cy="12" r="3"/>
              </svg>
              Network Connection
            </h3>
            <div class="info-content">
              <div class="info-item">
                <span class="info-key">Connection Type:</span>
                <span class="info-value" id="connection-type">--</span>
              </div>
              <div class="info-item">
                <span class="info-key">Effective Type:</span>
                <span class="info-value" id="effective-type">--</span>
              </div>
              <div class="info-item">
                <span class="info-key">Downlink:</span>
                <span class="info-value" id="downlink-speed">--</span>
              </div>
              <div class="info-item">
                <span class="info-key">RTT:</span>
                <span class="info-value" id="rtt-value">--</span>
              </div>
              <div class="info-item">
                <span class="info-key">Save Data:</span>
                <span class="info-value" id="save-data">--</span>
              </div>
            </div>
          </div>

          <!-- Performance API Support -->
          <div class="info-card">
            <h3 class="info-title">
              <svg class="info-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <polyline points="22,12 18,12 15,21 9,3 6,12 2,12"/>
              </svg>
              API Support
            </h3>
            <div class="info-content">
              <div class="info-item">
                <span class="info-key">Performance Observer:</span>
                <span class="info-value" id="perf-observer">--</span>
              </div>
              <div class="info-item">
                <span class="info-key">Navigation Timing:</span>
                <span class="info-value" id="nav-timing">--</span>
              </div>
              <div class="info-item">
                <span class="info-key">Resource Timing:</span>
                <span class="info-value" id="resource-timing">--</span>
              </div>
              <div class="info-item">
                <span class="info-key">User Timing:</span>
                <span class="info-value" id="user-timing">--</span>
              </div>
              <div class="info-item">
                <span class="info-key">Memory Info:</span>
                <span class="info-value" id="memory-info">--</span>
              </div>
            </div>
          </div>

          <!-- Security Information -->
          <div class="info-card">
            <h3 class="info-title">
              <svg class="info-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <rect x="3" y="11" width="18" height="11" rx="2" ry="2"/>
                <circle cx="12" cy="16" r="1"/>
                <path d="M7 11V7a5 5 0 0 1 10 0v4"/>
              </svg>
              Security &amp; Privacy
            </h3>
            <div class="info-content">
              <div class="info-item">
                <span class="info-key">HTTPS:</span>
                <span class="info-value" id="https-status">--</span>
              </div>
              <div class="info-item">
                <span class="info-key">Cookies Enabled:</span>
                <span class="info-value" id="cookies-enabled">--</span>
              </div>
              <div class="info-item">
                <span class="info-key">Do Not Track:</span>
                <span class="info-value" id="do-not-track">--</span>
              </div>
              <div class="info-item">
                <span class="info-key">Storage Quota:</span>
                <span class="info-value" id="storage-quota">--</span>
              </div>
              <div class="info-item">
                <span class="info-key">Permissions:</span>
                <span class="info-value" id="permissions-status">--</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Performance Tips -->
    <section class="tips-section">
      <div class="container">
        <h2 class="section-title">Performance Optimization Tips</h2>
        <div class="tips-grid">
          <div class="tip-card">
            <div class="tip-icon">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <circle cx="12" cy="12" r="10"/>
                <polyline points="12,6 12,12 16,14"/>
              </svg>
            </div>
            <h3 class="tip-title">Optimize Loading Times</h3>
            <p class="tip-description">
              Compress images, minify CSS/JS, enable gzip compression, and use a CDN 
              to reduce page load times and improve user experience.
            </p>
          </div>
          <div class="tip-card">
            <div class="tip-icon">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <path d="M13 2L3 14h9l-1 8 10-12h-9l1-8z"/>
              </svg>
            </div>
            <h3 class="tip-title">Reduce Layout Shifts</h3>
            <p class="tip-description">
              Reserve space for images and ads, avoid inserting content above existing content, 
              and use CSS transforms for animations to minimize CLS.
            </p>
          </div>
          <div class="tip-card">
            <div class="tip-icon">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <rect x="2" y="3" width="20" height="14" rx="2" ry="2"/>
                <line x1="8" y1="21" x2="16" y2="21"/>
                <line x1="12" y1="17" x2="12" y2="21"/>
              </svg>
            </div>
            <h3 class="tip-title">Monitor Regularly</h3>
            <p class="tip-description">
              Set up continuous monitoring to track performance metrics, 
              identify issues early, and maintain optimal site performance.
            </p>
          </div>
        </div>
      </div>
    </section>
  </main>
</MainLayout>

<style>
  .diagnostics-page {
    min-height: 100vh;
    background: linear-gradient(135deg, var(--color-muted) /* Fixed: design token */eea 0%, var(--color-warning) /* Fixed: design token */ba2 100%);
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 24px;
  }

  /* Header Section */
  .diagnostics-header {
    padding: var(--space-9) 0 40px;
    color: white;
  }

  .header-content {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: var(--space-6);
    align-items: center;
  }

  .page-title {
    display: flex;
    align-items: center;
    gap: var(--space-2);
    margin: 0 0 16px 0;
    font-size: 48px;
    font-weight: 700;
    line-height: 1.2;
  }

  .title-icon {
    width: var(--space-6);
    height: var(--space-6);
    color: var(--color-error) /* Fixed: design token */f24;
  }

  .page-description {
    font-size: 16px /* Fixed: 8px grid compliance */;
    line-height: 1.6;
    opacity: 0.9;
    margin: 0;
  }

  .header-stats {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-2);
  }

  .stat-card {
    padding: var(--space-3);
    background: var(--color-brand-signal-white-10) /* Fixed: design token */;
    backdrop-filter: blur(10px);
    border-radius: 8px /* Fixed: 8px grid */;
    border: 1px solid var(--color-brand-signal-white-20) /* Fixed: design token */;
    text-align: center;
  }

  .stat-value {
    font-size: 32px;
    font-weight: 700;
    margin-bottom: var(--space-1);
    color: var(--color-error) /* Fixed: design token */f24;
  }

  .stat-label {
    font-size: 14px;
    opacity: 0.8;
  }

  /* Dashboard Section */
  .dashboard-section {
    padding: var(--space-5) 0;
    background: var(--color-accent) /* Fixed: design token */afc;
  }

  /* System Info Section */
  .system-info-section {
    padding: var(--space-9) 0;
    background: white;
  }

  .info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: var(--space-3);
  }

  .info-card {
    padding: var(--space-4);
    background: var(--color-accent) /* Fixed: design token */afc;
    border-radius: 16px;
    border: 1px solid var(--color-accent-alt) /* Fixed: design token */8f0;
    transition: transform 0.2s, box-shadow 0.2s;
  }

  .info-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 10px 25px var(--color-shadow-light) /* Fixed: design token */;
  }

  .info-title {
    display: flex;
    align-items: center;
    gap: var(--space-1-5);
    margin: 0 0 24px 0;
    font-size: 24px /* Fixed: 8px grid */;
    font-weight: 600;
    color: var(--color-highlight) /* Fixed: design token */93b;
  }

  .info-icon {
    width: var(--space-3);
    height: var(--space-3);
    color: var(--color-success) /* Fixed: design token */2f6;
  }

  .info-content {
    display: flex;
    flex-direction: column;
    gap: var(--space-1-5);
  }

  .info-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--space-1) 0;
    border-bottom: 1px solid var(--color-accent-alt) /* Fixed: design token */8f0;
  }

  .info-item:last-child {
    border-bottom: none;
  }

  .info-key {
    font-weight: 500;
    color: var(--color-info) /* Fixed: design token */48b;
  }

  .info-value {
    font-weight: 600;
    color: var(--color-highlight) /* Fixed: design token */93b;
    text-align: right;
  }

  /* Tips Section */
  .tips-section {
    padding: var(--space-9) 0;
    background: var(--color-accent) /* Fixed: design token */afc;
  }

  .section-title {
    text-align: center;
    margin: 0 0 48px 0;
    font-size: 32px /* Fixed: 8px grid */;
    font-weight: 700;
    color: var(--color-highlight) /* Fixed: design token */93b;
  }

  .tips-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: var(--space-4);
  }

  .tip-card {
    padding: var(--space-4);
    background: white;
    border-radius: 16px;
    box-shadow: 0 4px 6px var(--color-shadow-subtle) /* Fixed: design token */;
    text-align: center;
    transition: transform 0.2s, box-shadow 0.2s;
  }

  .tip-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 10px 25px var(--color-shadow-light) /* Fixed: design token */;
  }

  .tip-icon {
    width: var(--space-6);
    height: var(--space-6);
    margin: 0 auto 16px;
    padding: var(--space-1-5);
    background: linear-gradient(135deg, var(--color-muted) /* Fixed: design token */eea 0%, var(--color-warning) /* Fixed: design token */ba2 100%);
    border-radius: 8px /* Fixed: 8px grid */;
    color: white;
  }

  .tip-title {
    margin: 0 0 16px 0;
    font-size: 24px /* Fixed: 8px grid */;
    font-weight: 600;
    color: var(--color-highlight) /* Fixed: design token */93b;
  }

  .tip-description {
    margin: 0;
    line-height: 1.6;
    color: var(--color-info) /* Fixed: design token */48b;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .header-content {
      grid-template-columns: 1fr;
      gap: var(--space-4);
      text-align: center;
    }

    .page-title {
      font-size: 32px /* Fixed: 8px grid */;
      justify-content: center;
    }

    .header-stats {
      grid-template-columns: repeat(3, 1fr);
    }

    .stat-card {
      padding: var(--space-2);
    }

    .stat-value {
      font-size: 24px;
    }

    .info-card,
    .tip-card {
      padding: var(--space-3);
    }

    .section-title {
      font-size: 32px /* Fixed: 8px grid */;
    }
  }

  @media (max-width: 480px) {
    .container {
      padding: 0 16px;
    }

    .diagnostics-header {
      padding: var(--space-7) 0 var(--space-4);
    }

    .page-title {
      font-size: 32px /* Fixed: 8px grid */;
      flex-direction: column;
      gap: var(--space-1);
    }

    .title-icon {
      width: 32px /* Fixed: 8px grid */;
      height: 32px /* Fixed: 8px grid */;
    }

    .header-stats {
      grid-template-columns: 1fr;
    }

    .info-item {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--space-0-5);
    }

    .info-value {
      text-align: left;
    }
  }
</style>

<script>
  // Initialize system information display
  function initializeSystemInfo() {
    // Browser information
    const userAgentEl = document.getElementById('user-agent');
    if (userAgentEl) userAgentEl.textContent = navigator.userAgent.split(' ').slice(-2).join(' ');
    
    const viewportSizeEl = document.getElementById('viewport-size');
    if (viewportSizeEl) viewportSizeEl.textContent = `${window.innerWidth} × ${window.innerHeight}`;
    
    const colorDepthEl = document.getElementById('color-depth');
    if (colorDepthEl) colorDepthEl.textContent = `${screen.colorDepth}-bit`;
    
    const browserLanguageEl = document.getElementById('browser-language');
    if (browserLanguageEl) browserLanguageEl.textContent = navigator.language;
    
    const onlineStatusEl = document.getElementById('online-status');
    if (onlineStatusEl) onlineStatusEl.textContent = navigator.onLine ? 'Online' : 'Offline';

    // Connection information
    const connection = (navigator as any).connection || (navigator as any).mozConnection || (navigator as any).webkitConnection;
    if (connection) {
      const connectionTypeEl = document.getElementById('connection-type');
      if (connectionTypeEl) connectionTypeEl.textContent = connection.type || 'Unknown';
      
      const effectiveTypeEl = document.getElementById('effective-type');
      if (effectiveTypeEl) effectiveTypeEl.textContent = connection.effectiveType || 'Unknown';
      
      const downlinkSpeedEl = document.getElementById('downlink-speed');
      if (downlinkSpeedEl) downlinkSpeedEl.textContent = connection.downlink ? `${connection.downlink} Mbps` : 'Unknown';
      
      const rttValueEl = document.getElementById('rtt-value');
      if (rttValueEl) rttValueEl.textContent = connection.rtt ? `${connection.rtt} ms` : 'Unknown';
      
      const saveDataEl = document.getElementById('save-data');
      if (saveDataEl) saveDataEl.textContent = connection.saveData ? 'Enabled' : 'Disabled';
    } else {
      ['connection-type', 'effective-type', 'downlink-speed', 'rtt-value', 'save-data'].forEach(id => {
        const element = document.getElementById(id);
        if (element) element.textContent = 'Not Available';
      });
    }

    // API Support
    const perfObserverEl = document.getElementById('perf-observer');
    if (perfObserverEl) perfObserverEl.textContent = 'PerformanceObserver' in window ? 'Supported' : 'Not Supported';
    
    const navTimingEl = document.getElementById('nav-timing');
    if (navTimingEl) navTimingEl.textContent = 'performance' in window && 'navigation' in performance ? 'Supported' : 'Not Supported';
    
    const resourceTimingEl = document.getElementById('resource-timing');
    if (resourceTimingEl) resourceTimingEl.textContent = 'performance' in window && 'getEntriesByType' in performance ? 'Supported' : 'Not Supported';
    
    const userTimingEl = document.getElementById('user-timing');
    if (userTimingEl) userTimingEl.textContent = 'performance' in window && 'mark' in performance ? 'Supported' : 'Not Supported';
    
    const memoryInfoEl = document.getElementById('memory-info');
    if (memoryInfoEl) memoryInfoEl.textContent = 'memory' in performance ? 'Available' : 'Not Available';

    // Security information
    const httpsStatusEl = document.getElementById('https-status');
    if (httpsStatusEl) httpsStatusEl.textContent = location.protocol === 'https:' ? 'Secure' : 'Insecure';
    
    const cookiesEnabledEl = document.getElementById('cookies-enabled');
    if (cookiesEnabledEl) cookiesEnabledEl.textContent = navigator.cookieEnabled ? 'Enabled' : 'Disabled';
    
    const doNotTrackEl = document.getElementById('do-not-track');
    if (doNotTrackEl) doNotTrackEl.textContent = navigator.doNotTrack === '1' ? 'Enabled' : 'Disabled';
    
    // Storage quota
    if ('storage' in navigator && 'estimate' in navigator.storage) {
      navigator.storage.estimate().then(estimate => {
        const quota = estimate.quota ? (estimate.quota / (1024 * 1024 * 1024)).toFixed(1) + ' GB' : 'Unknown';
        const storageQuotaEl = document.getElementById('storage-quota');
        if (storageQuotaEl) storageQuotaEl.textContent = quota;
      });
    } else {
      const storageQuotaEl2 = document.getElementById('storage-quota');
      if (storageQuotaEl2) storageQuotaEl2.textContent = 'Not Available';
    }

    const permissionsStatusEl = document.getElementById('permissions-status');
    if (permissionsStatusEl) permissionsStatusEl.textContent = 'permissions' in navigator ? 'API Available' : 'Not Available';

    // Update header stats
    updateHeaderStats();
  }

  function updateHeaderStats() {
    // Uptime
    const uptime = Math.floor(performance.now() / 1000);
    const hours = Math.floor(uptime / 3600);
    const minutes = Math.floor((uptime % 3600) / 60);
    const seconds = uptime % 60;
    const uptimeValueEl = document.getElementById('uptime-value');
    if (uptimeValueEl) uptimeValueEl.textContent = `${hours}h ${minutes}m ${seconds}s`;

    // Response time (simplified)
    const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
    if (navigation && navigation.responseEnd && navigation.requestStart) {
      const responseTime = navigation.responseEnd - navigation.requestStart;
      const responseTimeEl = document.getElementById('response-time');
      if (responseTimeEl) responseTimeEl.textContent = `${responseTime}ms`;
    }

    // Error count (from diagnostic errors)
    const errorCount = window.diagnosticErrors ? window.diagnosticErrors.length : 0;
    const errorCountEl = document.getElementById('error-count');
    if (errorCountEl) errorCountEl.textContent = errorCount.toString();
  }

  // Update stats periodically
  setInterval(updateHeaderStats, 1000);

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeSystemInfo);
  } else {
    initializeSystemInfo();
  }

  // Update viewport size on resize
  window.addEventListener('resize', () => {
    const viewportSizeEl = document.getElementById('viewport-size');
    if (viewportSizeEl) viewportSizeEl.textContent = `${window.innerWidth} × ${window.innerHeight}`;
  });

  // Update online status
  window.addEventListener('online', () => {
    const onlineStatusEl = document.getElementById('online-status');
    if (onlineStatusEl) onlineStatusEl.textContent = 'Online';
  });

  window.addEventListener('offline', () => {
    const onlineStatusEl = document.getElementById('online-status');
    if (onlineStatusEl) onlineStatusEl.textContent = 'Offline';
  });
</script>
