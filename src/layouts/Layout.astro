---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import '../styles/fonts.css';
import '../styles/global.css';

export interface Props {
	title: string;
	description?: string;
	ogTitle?: string;
	ogDescription?: string;
	ogImage?: string;
	ogUrl?: string;
	twitterCard?: string;
	twitterTitle?: string;
	twitterDescription?: string;
	twitterImage?: string;
	canonicalUrl?: string;
	jsonLd?: any;
}

const { 
	title,
	description = "Nosyt Labs - Pioneering the future of AI-driven solutions for small businesses and developers.",
	ogTitle,
	ogDescription,
	ogImage = "/images/og-image.jpg",
	ogUrl,
	twitterCard = "summary_large_image",
	twitterTitle,
	twitterDescription,
	twitterImage = "/images/twitter-image.jpg",
	canonicalUrl,
	jsonLd
} = Astro.props;
---

<!DOCTYPE html>
<html lang="en" class="dark">
	<head>
		<!-- Essential Meta Tags -->
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="description" content={description} />
		<link rel="icon" type="image/svg+xml" href="/images/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		
		<!-- Page Title -->
		<title>{title}</title>
		
		<!-- Web App Manifest -->
		<link rel="manifest" href="/manifest.json" />
		
		<!-- Canonical URL -->
		{canonicalUrl && <link rel="canonical" href={canonicalUrl} />}
		
		<!-- Open Graph / Facebook -->
		<meta property="og:type" content="website" />
		<meta property="og:title" content={ogTitle || title} />
		<meta property="og:description" content={ogDescription || description} />
		<meta property="og:image" content={ogImage} />
		{ogUrl && <meta property="og:url" content={ogUrl} />}
		
		<!-- Twitter -->
		<meta name="twitter:card" content={twitterCard} />
		<meta name="twitter:title" content={twitterTitle || ogTitle || title} />
		<meta name="twitter:description" content={twitterDescription || ogDescription || description} />
		<meta name="twitter:image" content={twitterImage || ogImage} />
		
		<!-- Structured Data -->
		{jsonLd && <script type="application/ld+json">{JSON.stringify(jsonLd)}</script>}
		
		<!-- Resource Hints -->
		<link rel="preconnect" href="https://api.fontshare.com" crossorigin>
		<link rel="preconnect" href="https://rsms.me" crossorigin>
		<link rel="preconnect" href="https://fonts.googleapis.com" crossorigin>
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		
		<!-- Critical Font Preload with Async Loading -->
		<link rel="preload" href="https://api.fontshare.com/v2/css?f[]=satoshi@1,900,700,500,400,300&display=swap" as="style" onload="this.onload=null;this.rel='stylesheet'">
		<link rel="preload" href="https://rsms.me/inter/inter.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
		
		<!-- Noscript Fallback for Critical Fonts -->
		<noscript>
			<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Satoshi:wght@1..900&display=swap">
			<link rel="stylesheet" href="https://rsms.me/inter/inter.css">
		</noscript>
		<noscript>
			<link rel="stylesheet" href="https://rsms.me/inter/inter.css">
		</noscript>
	</head>
	<body class="font-sans">
		<!-- Skip Navigation Links for Accessibility -->
		<div class="skip-links">
			<a href="#main-content" class="skip-nav-link sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 focus:z-50 focus:bg-background focus:text-foreground focus:px-4 focus:py-2 focus:rounded focus:ring-2 focus:ring-primary focus:shadow-lg">
				Skip to main content
			</a>
			<a href="#footer" class="skip-nav-link sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-40 focus:z-50 focus:bg-background focus:text-foreground focus:px-4 focus:py-2 focus:rounded focus:ring-2 focus:ring-primary focus:shadow-lg">
				Skip to footer
			</a>
		</div>
		
		<!-- Page Structure with Semantic HTML -->
		<div class="min-h-screen flex flex-col">
			<Header />
			
			<main id="main-content" class="flex-1" role="main" tabindex="-1">
				<slot />
			</main>
			
			<Footer id="footer" />
		</div>

		<!-- Live Region for Dynamic Content Announcements -->
		<div id="live-region" class="sr-only" aria-live="polite" aria-atomic="true"></div>
		
		<!-- Enhanced Accessibility Script -->
		<script>
			// Focus management for skip links
			document.addEventListener('DOMContentLoaded', () => {
				const skipLinks = document.querySelectorAll('.skip-nav-link');
				const mainContent = document.getElementById('main-content');
				
				skipLinks.forEach(link => {
					link.addEventListener('click', (e) => {
						e.preventDefault();
						const targetId = link.getAttribute('href').substring(1);
						const target = document.getElementById(targetId);
						
						if (target) {
							target.focus();
							target.scrollIntoView({ behavior: 'smooth', block: 'start' });
							
							// Announce to screen readers
							const liveRegion = document.getElementById('live-region');
							if (liveRegion) {
								liveRegion.textContent = `Navigated to ${target.tagName.toLowerCase()} content`;
								setTimeout(() => {
									liveRegion.textContent = '';
								}, 1000);
							}
						}
					});
				});
				
				// Enhanced keyboard navigation
				document.addEventListener('keydown', (e) => {
					// Alt + M for main content
					if (e.altKey && e.key === 'm') {
						e.preventDefault();
						if (mainContent) {
							mainContent.focus();
							mainContent.scrollIntoView({ behavior: 'smooth', block: 'start' });
						}
					}
					
					// Escape key to close modals/dropdowns
					if (e.key === 'Escape') {
						const activeElement = document.activeElement;
						if (activeElement && activeElement.getAttribute('aria-expanded') === 'true') {
							activeElement.click();
						}
					}
				});
				
				// Focus trap for mobile menu when open
				const mobileMenuButton = document.getElementById('mobile-menu-button');
				const mobileMenu = document.getElementById('mobile-menu');
				
				if (mobileMenuButton && mobileMenu) {
					const observer = new MutationObserver((mutations) => {
						mutations.forEach((mutation) => {
							if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
								const isMenuOpen = !mobileMenu.classList.contains('hidden');
								mobileMenuButton.setAttribute('aria-expanded', isMenuOpen.toString());
								mobileMenu.setAttribute('aria-hidden', (!isMenuOpen).toString());
								
								if (isMenuOpen) {
									// Focus first menu item
									const firstMenuItem = mobileMenu.querySelector('a, button');
									if (firstMenuItem) {
										firstMenuItem.focus();
									}
								}
							}
						});
					});
					
					observer.observe(mobileMenu, { attributes: true, attributeFilter: ['class'] });
				}
				
				// Announce page changes for SPA-like navigation
				let currentPath = window.location.pathname;
				const announcePageChange = () => {
					if (window.location.pathname !== currentPath) {
						currentPath = window.location.pathname;
						const liveRegion = document.getElementById('live-region');
						if (liveRegion) {
							liveRegion.textContent = `Page changed to ${document.title}`;
							setTimeout(() => {
								liveRegion.textContent = '';
							}, 2000);
						}
					}
				};
				
				// Listen for navigation changes
				window.addEventListener('popstate', announcePageChange);
				
				// Enhanced focus indicators
				document.addEventListener('keydown', (e) => {
					if (e.key === 'Tab') {
						document.body.classList.add('keyboard-navigation');
					}
				});
				
				document.addEventListener('mousedown', () => {
					document.body.classList.remove('keyboard-navigation');
				});
			});
		</script>
	</body>
	<!-- Service Worker Registration -->
	<script>
		if ('serviceWorker' in navigator) {
			window.addEventListener('load', () => {
				navigator.serviceWorker.register('/service-worker.js')
					.then((registration) => {
						console.log('SW registered: ', registration);
					})
					.catch((registrationError) => {
						console.log('SW registration failed: ', registrationError);
					});
			});
		}
	</script>
</html>