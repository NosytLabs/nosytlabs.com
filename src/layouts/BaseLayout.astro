---
// BaseLayout.astro - Modern layout for the website with Enhanced Accessibility & Interactivity
import UnifiedNavigation from '../components/navigation/UnifiedNavigation.astro';
import Footer from '../components/common/Footer.astro';
import VercelAnalytics from '../components/common/VercelAnalytics.astro';
import SEOHead from '../components/common/SEOHead.astro';
import PerformanceDashboard from '../components/sections/PerformanceDashboard.astro';
import { generateMetaTags, generateStructuredData } from '../utils/seoUtils.js';

export interface Props {
  title?: string;
  description?: string;
  ogImage?: string;
  isNosytOS95?: boolean;
  pageKey?: string;
  keywords?: string;
  ogType?: string;
  structuredDataType?: string;
  structuredData?: object;
}

const {
  title,
  description,
  ogImage,
  isNosytOS95 = false,
  pageKey = 'home',
  keywords,
  ogType = 'website',
  structuredDataType = 'Organization',
  structuredData = {}
} = Astro.props;

// Generate enhanced SEO meta tags
const seoData = generateMetaTags(pageKey, {
  title,
  description,
  ogImage,
  keywords,
  ogType
});

// Generate structured data
const structuredDataJson = generateStructuredData(structuredDataType, structuredData);

// Generate a unique ID for this page
const pageId = `page-${Math.random().toString(36).substring(2, 9)}`;
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <SEOHead
    title={seoData.title}
    description={seoData.description}
    keywords={seoData.keywords}
    image={seoData.ogImage}
    url={Astro.url.href}
    type={ogType}
  />
  <title>{seoData.title}</title>
  <meta name="description" content={seoData.description}>
  <meta name="author" content="NosytLabs">
  <meta name="robots" content="index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1">
  <meta name="googlebot" content="index, follow">
  <meta name="bingbot" content="index, follow">

  <!-- Enhanced Keywords -->
  <meta name="keywords" content={seoData.keywords}>

  <!-- Additional SEO Meta Tags -->
  <meta name="language" content="en">
  <meta name="revisit-after" content="7 days">
  <meta name="distribution" content="global">
  <meta name="rating" content="general">
  <meta name="referrer" content="origin-when-cross-origin">

  <!-- NosytLabs Brand Favicons -->
  <link rel="icon" type="image/svg+xml" href="/images/favicon.svg">
  <link rel="shortcut icon" href="/favicon.ico">
  <!-- Standard Favicons -->
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32.png">
  <!-- Apple Touch Icon -->
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon.png">
  <!-- Web Manifest -->
  <link rel="manifest" href="/site.webmanifest">

  <!-- Preload critical NosytLabs brand assets -->
  <link rel="preload" as="image" href="/images/NosytLabs.svg" type="image/svg+xml">
  <!-- NosytLabs Brand Theme Colors -->
  <meta name="theme-color" content="#2D1B69">
  <meta name="msapplication-TileColor" content="#2D1B69">

  <!-- Enhanced Open Graph / Social Media -->
  <meta property="og:type" content={seoData.ogType}>
  <meta property="og:url" content={Astro.url}>
  <meta property="og:title" content={seoData.ogTitle}>
  <meta property="og:description" content={seoData.ogDescription}>
  <meta property="og:image" content={seoData.ogImage}>
  <meta property="og:image:width" content="1200">
  <meta property="og:image:height" content="630">
  <meta property="og:image:type" content="image/svg+xml">
  <meta property="og:site_name" content="NosytLabs">
  <meta property="og:locale" content="en_US">

  <!-- Enhanced Twitter Cards -->
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content={seoData.twitterTitle}>
  <meta name="twitter:description" content={seoData.twitterDescription}>
  <meta name="twitter:image" content={seoData.twitterImage}>
  <meta name="twitter:image:alt" content="NosytLabs - Web Development & AI Solutions">

  <!-- Canonical URL -->
  <link rel="canonical" href={seoData.canonical}>

  <!-- Enhanced Structured Data -->
  <script type="application/ld+json" set:html={JSON.stringify(structuredDataJson)}></script>

  <!-- Additional Structured Data for WebSite -->
  <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "WebSite",
      "name": "NosytLabs",
      "url": "https://nosytlabs.com",
      "description": "Professional web development and AI integration services"
    }
  </script>

  <!-- Critical CSS - Inline for fastest rendering -->
  <style>
/* Z-Index Hierarchy Fix */
.hero-background { z-index: 1000; position: relative; }
.hero-image { z-index: 1400; position: relative; }
.hero-video { z-index: 1500; position: relative; }
.hero-gradient { z-index: 1600; position: absolute; }
.hero-floating-elements { z-index: 1700; position: absolute; pointer-events: none; }
.hero-particles { z-index: 1800; position: absolute; pointer-events: none; }
.hero-content { z-index: 1900; position: relative; isolation: isolate; }

/* Navigation Z-Index */
.navigation-unified { z-index: 8000; position: sticky; isolation: isolate; }
.nav-dropdown { z-index: 9997; position: absolute; }
.mobile-menu { z-index: 7999; position: fixed; }

/* Content Z-Index */
.section-content { z-index: 900; position: relative; }
.card-overlay { z-index: 800; position: absolute; }
.text-overlay { z-index: 600; position: absolute; }

/* Stacking Contexts */
.hero-unified { isolation: isolate; }
.navigation-unified { isolation: isolate; }
.main-content { isolation: isolate; }
.footer-unified { isolation: isolate; }

/* Modern CSS Grid Utilities */
.grid-auto-fit { display: grid; grid-template-columns: repeat(auto-fit, minmax(18.75rem, 1fr)); gap: 1.5rem; }
.grid-auto-fill { display: grid; grid-template-columns: repeat(auto-fill, minmax(15rem, 1fr)); gap: 1rem; }
.flex-responsive { display: flex; flex-wrap: wrap; gap: 1rem; }
.flex-responsive > * { flex: 1 1 18.75rem; }

    /* Critical above-the-fold styles */
    *,*::before,*::after{box-sizing:border-box;margin:0;padding:0}
    html{font-family:'Inter',-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,'Helvetica Neue',Arial,sans-serif;font-size: 1.000rem;line-height:1.6;scroll-behavior:smooth;-webkit-text-size-adjust:100%;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}
    body{background-color:#ffffff;color:#1f2937;font-weight:400;overflow-x:hidden}
    .container{max-width: 100.0%;margin:0 auto;padding:0 1rem}
    .nosyt-header{position:sticky;top:0;z-index:1000;background:rgba(255,255,255,0.95);backdrop-filter:blur(0.625rem);border-bottom:1px solid rgba(0,0,0,0.1);transition:all 0.3s ease}
    .nav-container{max-width: 100.0%;margin:0 auto;padding:0 1rem;display:flex;align-items:center;justify-content:space-between;height: 4.500rem}
    .hero-section{min-height:100vh;display:flex;align-items:center;justify-content:center;padding:2rem 0;background:linear-gradient(135deg,#2D1B69 0%,#6B46C1 100%);position:relative;overflow:hidden}
    .hero-title{font-size:2.5rem;font-weight:800;color:white;margin-bottom:1.5rem;line-height:1.2;letter-spacing:-0.025em}
    .loading{opacity:0;transition:opacity 0.3s ease}.loaded{opacity:1}
    img{max-width:100%;height:auto;display:block}
    .sr-only{position:absolute;width: 0.063rem;height: 0.063rem;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border:0}
    .skip-nav{position:absolute;top:-2.50rem;left:1rem;background:#2D1B69;color:white;padding:0.5rem 1rem;text-decoration:none;border-radius:0.25rem;font-weight:600;z-index:1001;transition:top 0.3s ease}
    .skip-nav:focus{top:1rem}
    @media (prefers-color-scheme:dark){body{background-color:#0f0f23;color:#e5e7eb}}
    [data-theme="dark"] body{background-color:#0f0f23;color:#e5e7eb}
    [data-theme="dark"] .nosyt-header{background:rgba(15,15,35,0.95);border-bottom-color:rgba(255,255,255,0.1)}
  </style>

  <!-- Resource hints for critical resources -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link rel="preconnect" href="https://cdnjs.cloudflare.com" crossorigin>
  <link rel="dns-prefetch" href="https://vercel.live">
  <link rel="dns-prefetch" href="https://vitals.vercel-analytics.com">

  <!-- Preload critical resources with high priority -->
  <link rel="preload" href="/images/NosytLabs.svg" as="image" fetchpriority="high">

  <!-- Fonts with optimized loading -->
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
        rel="stylesheet"
        media="print"
        onload="this.media='all'">
  <noscript>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  </noscript>

  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <!-- Optimized CSS Architecture 2025 -->
  <!-- Critical CSS - Inlined for performance -->
  <link rel="stylesheet" href="/src/styles/optimized/critical.css" media="all">

  <!-- Unified Styles - Main design system -->
  <link rel="stylesheet" href="/src/styles/optimized/unified-styles.css" media="all">
  
  <!-- Brand-specific styles -->
  <link rel="stylesheet" href="/src/styles/nosytlabs-brand.css" media="all">

  <!-- Animation CSS Bundle - Loaded with lower priority -->
  <link rel="stylesheet" href="/src/styles/optimized/animations.css" media="all" loading="lazy">

  <!-- NosytOS95 specific styles -->
  {isNosytOS95 && (
    <style>
      /* Windows 95 specific styles inline to avoid 404 */
      .win95-window {
        border: 2px outset #c0c0c0;
        background: #c0c0c0;
        font-family: 'MS Sans Serif', sans-serif;
      }
      .win95-titlebar {
        background: linear-gradient(90deg, #0000ff, #000080);
        color: white;
        padding: 2px 4px;
        font-weight: bold;
      }
    </style>
  )}

  <!-- Core functionality - Essential scripts only -->
  <script is:inline defer>
    // Simplified core functionality without problematic imports
    const NosytLabs = {
      config: {
        features: {
          darkMode: true,
          animations: true,
          lazyLoading: true,
          serviceWorker: false
        }
      },

      init: function() {
        try {
          this.initTheme();
          this.initCore();
        } catch (error) {
          console.warn('NosytLabs init error:', error);
        }
      },

      initCore: function() {
        // Basic error handling
        window.addEventListener('error', (event) => {
          console.warn('Global error:', event.error);
        });

        window.addEventListener('unhandledrejection', (event) => {
          console.warn('Unhandled promise rejection:', event.reason);
        });
      },

      initTheme: function() {
        try {
          const savedTheme = localStorage.getItem('theme');
          const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;

          if (savedTheme) {
            document.documentElement.classList.toggle('dark', savedTheme === 'dark');
          } else {
            document.documentElement.classList.toggle('dark', prefersDark);
          }

          const themeToggles = document.querySelectorAll('[data-theme-toggle]');
          themeToggles.forEach(toggle => {
            toggle.addEventListener('click', () => {
              document.documentElement.classList.toggle('dark');
              const isDark = document.documentElement.classList.contains('dark');
              localStorage.setItem('theme', isDark ? 'dark' : 'light');
            });
          });
        } catch (error) {
          console.warn('Theme init error:', error);
        }
      }
    };

    // Initialize when DOM is loaded
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => NosytLabs.init());
    } else {
      NosytLabs.init();
    }

    // Export to global scope
    window.NosytLabs = NosytLabs;
  </script>

  <!-- Performance Manifest -->
  <link rel="manifest" href="/performance-manifest.json">

  <!-- Enhanced Dark Mode Toggle Script -->
  <script is:inline>
    // Enhanced dark mode functionality
    function initDarkMode() {
      const darkModeToggles = document.querySelectorAll('[data-theme-toggle], [data-toggle="dark-mode"]');
      const html = document.documentElement;

      // Load saved preference
      const savedTheme = localStorage.getItem('theme');
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;

      if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
        html.classList.add('dark');
      }

      // Update all toggle buttons
      function updateToggleButtons() {
        const isDark = html.classList.contains('dark');
        darkModeToggles.forEach(toggle => {
          // Update icon spans
          const lightIcon = toggle.querySelector('.theme-icon-light');
          const darkIcon = toggle.querySelector('.theme-icon-dark');

          if (lightIcon && darkIcon) {
            lightIcon.style.display = isDark ? 'none' : 'block';
            darkIcon.style.display = isDark ? 'block' : 'none';
          }

          // Update single span icons
          const icon = toggle.querySelector('span');
          if (icon && !lightIcon && !darkIcon) {
            icon.textContent = isDark ? '☀️' : '🌙';
          }

          // Update aria-label
          toggle.setAttribute('aria-label', isDark ? 'Switch to light mode' : 'Switch to dark mode');
        });
      }

      // Toggle functionality for all buttons
      darkModeToggles.forEach(toggle => {
        toggle.addEventListener('click', () => {
          html.classList.toggle('dark');
          const isDark = html.classList.contains('dark');
          localStorage.setItem('theme', isDark ? 'dark' : 'light');
          updateToggleButtons();
        });
      });

      // Initial update
      updateToggleButtons();
    }

    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initDarkMode);
    } else {
      initDarkMode();
    }
  </script>
</head>

<body class="layout-container">
  <!-- Enhanced Skip Links for Grade A Accessibility -->
  <a href="#main-content" class="skip-nav">Skip to main content</a>
  <a href="#navigation" class="skip-nav">Skip to navigation</a>
  <a href="#footer" class="skip-nav">Skip to footer</a>

  <!-- Header - Only show modern header on non-NosytOS pages -->
  {!isNosytOS95 && (
    <header id="navigation" class="layout-header" role="banner">
      <UnifiedNavigation
        currentPath={Astro.url.pathname}
        variant={isNosytOS95 ? 'retro' : 'modern'}
        isRetroMode={isNosytOS95}
      />
    </header>
  )}

  <!-- Main Content -->
  <main id="main-content" class="layout-main no-overlap" role="main" aria-label="Main content">
    {!isNosytOS95 && (
      <div id="particle-background" class="particle-background absolute inset-0 pointer-events-none z-0"
        data-color="rgba(45, 27, 105, 0.1)"
        data-secondary-color="rgba(255, 107, 53, 0.1)"
        data-particle-count="50"
        data-particle-size="2"
        data-particle-speed="0.5"
        data-interactive="false"
        data-connect-particles="false"
        data-gradient="true">
      </div>
    )}

    <!-- Main Content -->
    <div class="relative z-10">
      <slot />
    </div>
  </main>

  <!-- Footer - Only show modern footer on non-NosytOS95 pages -->
  {!isNosytOS95 && (
    <footer id="footer" class="layout-footer" role="contentinfo">
      <Footer />
    </footer>
  )}

  <!-- Back to top button -->
  {!isNosytOS95 && (
    <button
      id="back-to-top"
      class="fixed bottom-6 right-6 bg-primary hover:bg-primary-dark text-white w-12 h-12 rounded-full shadow-lg flex items-center justify-center transition-all duration-300 opacity-0 invisible z-50"
      aria-label="Back to top"
    >
      <i class="fas fa-arrow-up"></i>
    </button>
  )}



  <!-- Back to top button script -->
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const backToTopButton = document.getElementById('back-to-top');

      if (backToTopButton) {
        // Show/hide button based on scroll position
        window.addEventListener('scroll', () => {
          if (window.scrollY > 300) {
            backToTopButton.classList.remove('opacity-0', 'invisible');
            backToTopButton.classList.add('opacity-100', 'visible');
          } else {
            backToTopButton.classList.remove('opacity-100', 'visible');
            backToTopButton.classList.add('opacity-0', 'invisible');
          }
        });

        // Scroll to top when clicked
        backToTopButton.addEventListener('click', () => {
          window.scrollTo({
            top: 0,
            behavior: 'smooth'
          });
        });
      }
    });
  </script>

  <!-- Performance Dashboard (Development Only) -->
  <PerformanceDashboard devOnly={true} position="bottom-right" compact={false} />

  <!-- Vercel Analytics & Speed Insights -->
  <VercelAnalytics />
  <!-- Service Worker Registration Removed for Performance -->

<script>
  // Advanced Keyboard Navigation Support
  class AccessibilityManager {
    constructor() {
      this.init();
    }

    init() {
      this.setupKeyboardNavigation();
      this.setupFocusManagement();
      this.setupAriaLiveRegions();
      this.setupMotionPreferences();
    }

    setupKeyboardNavigation() {
      document.addEventListener('keydown', (e) => {
        // Escape key handling
        if (e.key === 'Escape') {
          this.closeModals();
          this.closeMobileMenu();
        }

        // Tab navigation enhancement
        if (e.key === 'Tab') {
          document.body.classList.add('keyboard-navigation');
        }

        // Arrow key navigation for menus
        if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {
          this.handleArrowNavigation(e);
        }
      });

      // Remove keyboard navigation class on mouse use
      document.addEventListener('mousedown', () => {
        document.body.classList.remove('keyboard-navigation');
      });
    }

    setupFocusManagement() {
      // Focus trap for modals
      const modals = document.querySelectorAll('[role="dialog"]');
      modals.forEach(modal => {
        this.createFocusTrap(modal);
      });
    }

    setupAriaLiveRegions() {
      // Create live region for announcements
      const liveRegion = document.createElement('div');
      liveRegion.setAttribute('aria-live', 'polite');
      liveRegion.setAttribute('aria-atomic', 'true');
      liveRegion.className = 'live-region';
      document.body.appendChild(liveRegion);

      window.announceToScreenReader = (message) => {
        liveRegion.textContent = message;
        setTimeout(() => liveRegion.textContent = '', 1000);
      };
    }

    setupMotionPreferences() {
      // Respect user's motion preferences
      const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)');

      if (prefersReducedMotion.matches) {
        document.body.classList.add('respect-motion-preferences');
      }

      prefersReducedMotion.addEventListener('change', (e) => {
        if (e.matches) {
          document.body.classList.add('respect-motion-preferences');
        } else {
          document.body.classList.remove('respect-motion-preferences');
        }
      });
    }

    closeModals() {
      const openModals = document.querySelectorAll('[role="dialog"][aria-hidden="false"]');
      openModals.forEach(modal => {
        modal.setAttribute('aria-hidden', 'true');
        modal.style.display = 'none';
      });
    }

    closeMobileMenu() {
      const mobileMenu = document.querySelector('.mobile-menu');
      if (mobileMenu && mobileMenu.classList.contains('open')) {
        mobileMenu.classList.remove('open');
        mobileMenu.setAttribute('aria-hidden', 'true');
      }
    }

    handleArrowNavigation(e) {
      const focusedElement = document.activeElement;
      const menuItems = Array.from(document.querySelectorAll('[role="menuitem"], .nav-link'));
      const currentIndex = menuItems.indexOf(focusedElement);

      if (currentIndex === -1) return;

      let nextIndex;
      if (e.key === 'ArrowDown' || e.key === 'ArrowRight') {
        nextIndex = (currentIndex + 1) % menuItems.length;
      } else if (e.key === 'ArrowUp' || e.key === 'ArrowLeft') {
        nextIndex = (currentIndex - 1 + menuItems.length) % menuItems.length;
      }

      if (nextIndex !== undefined) {
        e.preventDefault();
        menuItems[nextIndex].focus();
      }
    }

    createFocusTrap(element) {
      const focusableElements = element.querySelectorAll(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
      );

      if (focusableElements.length === 0) return;

      const firstElement = focusableElements[0];
      const lastElement = focusableElements[focusableElements.length - 1];

      element.addEventListener('keydown', (e) => {
        if (e.key === 'Tab') {
          if (e.shiftKey) {
            if (document.activeElement === firstElement) {
              e.preventDefault();
              lastElement.focus();
            }
          } else {
            if (document.activeElement === lastElement) {
              e.preventDefault();
              firstElement.focus();
            }
          }
        }
      });
    }
  }

  // Initialize accessibility manager when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new AccessibilityManager();
  });
</script>

<!-- Enhanced Performance Monitoring -->
<script src="/scripts/performance-monitor.js" defer></script>
<script type="module">
  import { initializePerformanceOptimizations } from '/src/utils/enhanced-performance.ts';
  import { initializeEnhancedErrorHandling } from '/src/utils/enhanced-error-handling.ts';

  // Initialize enhanced systems
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize error handling first
    initializeEnhancedErrorHandling();

    // Initialize performance optimizations
    const optimizer = initializePerformanceOptimizations();
    window.NosytLabsPerformanceOptimizer = optimizer;

    // Dispatch performance update events
    const originalSendMetrics = window.NosytLabsPerformance?.sendMetrics;
    if (window.NosytLabsPerformance && originalSendMetrics) {
      window.NosytLabsPerformance.sendMetrics = function() {
        const metrics = this.getMetrics();
        window.dispatchEvent(new CustomEvent('performance-update', { detail: metrics }));
        return originalSendMetrics.call(this);
      };
    }

    console.log('✅ NosytLabs enhanced systems initialized');
  });
</script>

<!-- Service Worker Registration -->
<script>
  if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
      navigator.serviceWorker.register('/sw.js')
        .then(registration => {
          console.log('SW registered: ', registration);

          // Check for updates
          registration.addEventListener('updatefound', () => {
            const newWorker = registration.installing;
            newWorker.addEventListener('statechange', () => {
              if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                // New content available, notify user
                if (window.announceToScreenReader) {
                  window.announceToScreenReader('New content available. Refresh to update.');
                }
              }
            });
          });
        })
        .catch(registrationError => {
          console.log('SW registration failed: ', registrationError);
        });
    });
  }
</script>

<!-- Build Performance Integration -->
<script>
  // Load performance configuration and start monitoring
  fetch('/performance-config.json')
    .then(response => response.json())
    .then(config => {
      if (window.PerformanceMonitor) {
        const monitor = new window.PerformanceMonitor();
        monitor.config = config;

        // Send build analysis data with performance metrics
        const originalSendMetrics = monitor.sendMetrics;
        monitor.sendMetrics = function() {
          const metricsData = {
            ...this.metrics,
            buildInfo: config.buildAnalysis,
            url: window.location.href,
            userAgent: navigator.userAgent,
            timestamp: Date.now(),
            sessionId: this.getSessionId()
          };

          // Send to performance API
          if (navigator.sendBeacon) {
            navigator.sendBeacon('/api/performance', JSON.stringify(metricsData));
          } else {
            fetch('/api/performance', {
              method: 'POST',
              body: JSON.stringify(metricsData),
              headers: { 'Content-Type': 'application/json' },
              keepalive: true
            }).catch(console.error);
          }
        };
      }
    })
    .catch(error => {
      console.warn('Could not load performance config:', error);
    });
</script>
</body>
</html>
