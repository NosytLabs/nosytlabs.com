---
import { SITE, TWITTER_USER_NAME } from '../config';
import { generateSEOTags, generateWebSiteStructuredData, generateOrganizationStructuredData } from '../utils/seo';
import { ViewTransitions } from 'astro:transitions';
import { Toaster } from 'sonner';
import SpeedInsights from "@vercel/speed-insights/astro";
import { Analytics } from "@vercel/analytics/react"
import { getNonce } from '../utils/nonce-helpers';
import '../styles/main.css';


import Navigation from '../components/navigation/Navigation.astro';
import Footer from '../components/layout/footer.astro';

// Define the props that the layout can accept
export interface Props {
    title?: string;
    description?: string;
    url?: string;
    image?: string;
    author?: string;
    keywords?: string | string[];
    type?: 'website' | 'article';
    publishedTime?: string;
    modifiedTime?: string;
    tags?: string[];
    noindex?: boolean;
    nofollow?: boolean;
    ogImage?: string;
    twitterImage?: string;
    twitterUser?: string;
    twitterCard?: 'summary' | 'summary_large_image' | 'app' | 'player';
    canonicalUrl?: string;
    structuredData?: Record<string, any>;
    aiPowered?: boolean;
    preloadImages?: string[];
}

// Set default props
const {
    title = SITE.name,
    description = SITE.description,
    image = SITE.image,
    author = SITE.author,
    keywords,
    type = 'website',
    publishedTime,
    modifiedTime,
    tags,
    noindex = false,
    nofollow = false,
    ogImage,
    twitterImage,
    twitterUser = TWITTER_USER_NAME,
    twitterCard = 'summary_large_image',
    canonicalUrl,
    structuredData,
    aiPowered = false,
    preloadImages = [],
} = Astro.props as Props;

// Analytics configuration
const GA_ID = import.meta.env.PUBLIC_GA_ID;
const SENTRY_DSN = import.meta.env.PUBLIC_SENTRY_DSN;

// Generate SEO tags
const seoTags = generateSEOTags({
    title,
    description,
    keywords: Array.isArray(keywords) ? keywords : (typeof keywords === 'string' ? [keywords] : undefined),
    image: ogImage || twitterImage || image,
    type,
    author,
    publishedTime,
    modifiedTime,
    tags,
    canonicalUrl: canonicalUrl || Astro.url.href,
    noindex,
    nofollow,
}, Astro.url.href);

const currentUrl = Astro.url?.pathname || '/';

// Generate structured data
const finalStructuredData = structuredData || [generateOrganizationStructuredData().data, generateWebSiteStructuredData().data];





const nonce = getNonce(Astro);
---

<!DOCTYPE html>
<html lang={SITE.lang}>
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <meta name="generator" content={Astro.generator} />

    <!-- Basic SEO Meta Tags -->
    <title>{seoTags.title}</title>
    <meta name="description" content={seoTags.description} />
    <meta name="keywords" content={seoTags.keywords} />
    <meta name="author" content={seoTags.author} />
    <meta name="robots" content={seoTags.robots} />

    <!-- Search Engine Specific -->
    <meta name="googlebot" content="index, follow" />
    <meta name="bingbot" content="index, follow" />

    <!-- Open Graph Meta Tags -->
    <meta property="og:type" content={seoTags.type} />
    <meta property="og:url" content={seoTags.canonicalUrl} />
    <meta property="og:title" content={seoTags.title} />
    <meta property="og:description" content={seoTags.description} />
    <meta property="og:image" content={seoTags.ogImage} />
    <meta property="og:image:alt" content={seoTags.imageAlt} />
    <meta property="og:site_name" content={SITE.name} />
    <meta property="og:locale" content={SITE.locale} />

    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={seoTags.title} />
    <meta name="twitter:description" content={seoTags.description} />
    <meta name="twitter:image" content={seoTags.ogImage} />
    <meta name="twitter:image:alt" content={seoTags.imageAlt} />
    <meta name="twitter:site" content={`@${TWITTER_USER_NAME}`} />
    <meta name="twitter:creator" content={`@${TWITTER_USER_NAME}`} />

    <!-- Canonical URL -->
    <link rel="canonical" href={seoTags.canonicalUrl} />

    <!-- Critical CSS for Core Web Vitals -->
    <link rel="preload" href="/assets/css/critical.css" as="style" onload="this.onload=null;this.rel='stylesheet'" />
    <noscript><link rel="stylesheet" href="/assets/css/critical.css" /></noscript>

    <!-- Preload Critical Resources -->
    <link rel="preload" href="/assets/fonts/Inter-Regular.woff2" as="font" type="font/woff2" crossorigin />
    <link rel="preload" href="/assets/fonts/Inter-Bold.woff2" as="font" type="font/woff2" crossorigin />
    <link rel="preload" href="/api/health" as="fetch" crossorigin />
    <link rel="dns-prefetch" href="//fonts.googleapis.com" />
    <link rel="dns-prefetch" href="//www.google-analytics.com" />
    
    {preloadImages.map((src) => (
        <link rel="preload" as="image" href={src} fetchpriority="high" />
    ))}

    <style>
      /* Critical CSS for Core Web Vitals optimization */
      .section-xl { padding-block: clamp(3rem, 5vw, 6rem); }
      html { 
        scrollbar-gutter: stable;
        font-display: swap;
      }
      .container { 
        margin-left: auto; 
        margin-right: auto; 
        padding-left: 1rem; 
        padding-right: 1rem; 
        width: 100%;
        max-width: 1280px;
      }
      h1 { line-height: 1.1; letter-spacing: -0.01em; }
      
      /* LCP optimization */
      .optimize-lcp {
        content-visibility: auto;
        contain-intrinsic-size: 0 400px;
      }
      
      /* CLS prevention */
      .optimize-cls {
        aspect-ratio: attr(width) / attr(height);
      }
      
      /* Skip links for accessibility */
      .skip-link {
        position: absolute;
        top: -40px;
        left: 6px;
        background: #000;
        color: #fff;
        padding: 8px;
        text-decoration: none;
        z-index: 1000;
      }
      .skip-link:focus {
        top: 6px;
      }
    </style>

    <!-- AI-Powered Meta Tags (Conditional) -->
    {aiPowered && (
        <Fragment>
            <meta name="robots" content="max-snippet:-1, max-image-preview:large, max-video-preview:-1" />
            <meta name="ia_archiver" content="noindex, nofollow" />
        </Fragment>
    )}

    <!-- Article/Content Specific Meta Tags -->
    {type === 'article' && (
        <Fragment>
            <meta property="article:published_time" content={publishedTime} />
            <meta property="article:modified_time" content={modifiedTime} />
            <meta property="article:section" content={tags && tags.length > 0 ? tags[0] : ''} />
            {tags && tags.map(tag => <meta property="article:tag" content={tag} />)}
        </Fragment>
    )}

    <!-- Theme, Manifest and Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="manifest" href="/site.webmanifest" />
    <meta name="theme-color" content="var(--color-primary-500)" />

    <!-- Structured Data -->
    <script type="application/ld+json" set:html={JSON.stringify(finalStructuredData)} nonce={nonce}></script>

    <ViewTransitions />
    <SpeedInsights />
    <!-- Analytics Integration -->
    <script>
      // Analytics configuration
      window.ANALYTICS_CONFIG = {
        googleAnalytics: {
          measurementId: import.meta.env.PUBLIC_GA_ID,
          enableEnhancedEcommerce: true,
          enableCustomEvents: true,
          enableWebVitals: true
        },
        sentry: {
          dsn: import.meta.env.PUBLIC_SENTRY_DSN,
          environment: import.meta.env.MODE || 'production',
          tracesSampleRate: import.meta.env.MODE === 'development' ? 1.0 : 0.1,
          enablePerformanceMonitoring: true,
          enableErrorTracking: true
        },
        enableAutoTracking: true,
        enableWebVitalsTracking: true,
        enableErrorTracking: true,
        enableUserInteractionTracking: true,
        gdprCompliant: true,
        privacyFirst: true
      };
    </script>

    <Analytics />
</head>
<body class="bg-background text-foreground antialiased">
    <!-- Skip Links for Screen Readers -->
    <a href="#main-content" class="skip-link">Skip to main content</a>
    <a href="#navigation" class="skip-link">Skip to navigation</a>
    
    <!-- Performance Monitor (Development Only) -->
    {import.meta.env.DEV && (
        <div id="performance-monitor-root"></div>
    )}
    
    <Navigation currentPath={currentUrl} id="navigation" />
    <main id="main-content" class="main-content optimize-lcp">
        <slot />
    </main>
    <Toaster />
    <Footer />
    
    <!-- Service Worker Registration -->
    <script is:inline>
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('/sw.js')
                    .then(registration => {
                        console.log('SW registered: ', registration);
                    })
                    .catch(registrationError => {
                        console.log('SW registration failed: ', registrationError);
                    });
            });
        }
    </script>
    
    <!-- Initialize Analytics Integration -->
    <script type="module">
      // Initialize comprehensive analytics integration
      if (typeof window !== 'undefined' && window.ANALYTICS_CONFIG) {
        import('/src/services/analytics-integration.js').then(module => {
          const { analyticsIntegration } = module;
          
          // Initialize with configuration
          analyticsIntegration.initialize(window.ANALYTICS_CONFIG).then(() => {
            console.log('Analytics integration initialized successfully');
            
            // Track initial page view
            analyticsIntegration.trackPageView(window.location.pathname, document.title);
            
            // Set up GDPR compliance if needed
            if (window.ANALYTICS_CONFIG.gdprCompliant) {
              // Check for consent before full tracking
              const hasConsent = localStorage.getItem('analytics-consent') === 'true';
              if (!hasConsent) {
                // Show consent banner or disable tracking until consent is given
                console.log('Analytics consent required - tracking limited until consent provided');
              }
            }
            
            // Track performance budget violations
            const performanceBudgets = {
              LCP: 2500, // Largest Contentful Paint
              FID: 100,  // First Input Delay
              CLS: 0.1,  // Cumulative Layout Shift
              FCP: 1800, // First Contentful Paint
              TTFB: 800  // Time to First Byte
            };
            
            // Set up performance monitoring with budgets
            window.addEventListener('load', () => {
              // Monitor for budget violations
              if ('PerformanceObserver' in window) {
                const observer = new PerformanceObserver((list) => {
                  for (const entry of list.getEntries()) {
                    const metric = entry.name;
                    const value = entry.value || entry.duration;
                    
                    if (performanceBudgets[metric] && value > performanceBudgets[metric]) {
                      analyticsIntegration.trackBudgetViolation({
                        metric,
                        actual: value,
                        budget: performanceBudgets[metric],
                        severity: value > performanceBudgets[metric] * 1.5 ? 'error' : 'warning'
                      });
                    }
                  }
                });
                
                try {
                  observer.observe({ entryTypes: ['measure', 'navigation'] });
                } catch (e) {
                  console.warn('Performance monitoring not fully supported:', e);
                }
              }
            });
            
          }).catch(error => {
            console.error('Failed to initialize analytics integration:', error);
          });
        }).catch(error => {
          console.error('Failed to load analytics integration:', error);
        });
      }
    </script>
    
    <!-- GDPR Compliance Banner -->
    <script type="module">
      // Simple GDPR compliance banner
      if (window.ANALYTICS_CONFIG?.gdprCompliant && !localStorage.getItem('analytics-consent')) {
        const banner = document.createElement('div');
        banner.id = 'gdpr-banner';
        banner.style.cssText = `
          position: fixed;
          bottom: 0;
          left: 0;
          right: 0;
          background: #2d3748;
          color: white;
          padding: 1rem;
          z-index: 10000;
          display: flex;
          justify-content: space-between;
          align-items: center;
          font-family: system-ui, -apple-system, sans-serif;
          font-size: 14px;
        `;
        
        banner.innerHTML = `
          <div>
            <p style="margin: 0;">We use analytics to improve your experience. By continuing to use this site, you consent to our use of cookies and analytics tracking.</p>
          </div>
          <div style="display: flex; gap: 1rem;">
            <button id="gdpr-accept" style="background: #4299e1; color: white; border: none; padding: 0.5rem 1rem; border-radius: 4px; cursor: pointer;">Accept</button>
            <button id="gdpr-decline" style="background: transparent; color: white; border: 1px solid white; padding: 0.5rem 1rem; border-radius: 4px; cursor: pointer;">Decline</button>
          </div>
        `;
        
        document.body.appendChild(banner);
        
        document.getElementById('gdpr-accept').addEventListener('click', () => {
          localStorage.setItem('analytics-consent', 'true');
          banner.remove();
          // Reinitialize analytics with full tracking
          window.location.reload();
        });
        
        document.getElementById('gdpr-decline').addEventListener('click', () => {
          localStorage.setItem('analytics-consent', 'false');
          banner.remove();
          // Continue with limited tracking
        });
      }
    </script>
    
    <!-- Performance Dashboard (Development Only) -->
    {import.meta.env.DEV && (
        <script type="module">
            import PerformanceDashboard from '/src/components/performance/PerformanceDashboard.tsx';
            import { createRoot } from 'react-dom/client';
            import React from 'react';
            
            const container = document.getElementById('performance-monitor-root');
            if (container) {
                const root = createRoot(container);
                root.render(React.createElement(PerformanceDashboard));
            }
        </script>
    )}
</body>
</html>
