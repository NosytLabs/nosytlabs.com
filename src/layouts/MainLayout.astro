---
import '../styles/main.css';
import CriticalCSS from '../components/CriticalCSS.astro';
import Header from '@/components/layout/Header.astro';
import Footer from '@/components/layout/Footer.astro';

export interface Props {
  title: string;
  description: string;
  image?: string;
  ogTitle?: string;
  ogDescription?: string;
  ogImage?: string;
  type?: string;
  publishedTime?: string;
  modifiedTime?: string;
  author?: string;
  keywords?: string[];
  noIndex?: boolean;
  canonicalUrl?: string;
  jsonLd?: Record<string, unknown>;
  containerClass?: string;
  pageClass?: string;
}

const { 
  title, 
  description,
  image = '/images/og-default.jpg',
  ogTitle = title,
  ogDescription = description,
  ogImage = image,
  type = 'website',
  publishedTime,
  modifiedTime,
  author = 'NOSYT Labs',
  keywords = [],
  noIndex = false,
  canonicalUrl = Astro.url.href,
  jsonLd,
  containerClass: _containerClass,
  pageClass: _pageClass
} = Astro.props;
---

<style>
  @import '../styles/main.css';
</style>

<html lang="en">
  <head>
    <CriticalCSS />
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <!-- Basic SEO Meta Tags -->
    <title>{title}</title>
    <meta name="description" content={description} />
    {author && <meta name="author" content={author} />}
    {keywords.length > 0 && <meta name="keywords" content={keywords.join(', ')} />}
    {noIndex && <meta name="robots" content="noindex, nofollow" />}
    {!noIndex && <meta name="robots" content="index, follow" />}
    
    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalUrl} />
    
    <!-- Open Graph Meta Tags -->
    <meta property="og:title" content={ogTitle} />
    <meta property="og:description" content={ogDescription} />
    <meta property="og:image" content={new URL(ogImage, Astro.site).href} />
    <meta property="og:url" content={canonicalUrl} />
    <meta property="og:type" content={type} />
    <meta property="og:site_name" content="NOSYT Labs" />
    {publishedTime && <meta property="article:published_time" content={publishedTime} />}
    {modifiedTime && <meta property="article:modified_time" content={modifiedTime} />}
    {author && <meta property="article:author" content={author} />}
    
    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={ogTitle} />
    <meta name="twitter:description" content={ogDescription} />
    <meta name="twitter:image" content={new URL(ogImage, Astro.site).href} />
    <meta name="twitter:site" content="@nosytlabs" />
    <meta name="twitter:creator" content="@nosytlabs" />
    
    <!-- Additional Meta Tags -->
    <meta name="theme-color" content="#1a1a1a" />
    <meta name="msapplication-TileColor" content="#1a1a1a" />
    
    <!-- Structured Data (JSON-LD) -->
    {jsonLd && (
      <script type="application/ld+json" is:inline set:html={JSON.stringify(jsonLd)} />
    )}
    
    <!-- Font Preloading for Performance -->
    <link rel="preload" href={`${import.meta.env.BASE_URL.replace(/\/$/, '')}/fonts/inter-var.woff2`} as="font" type="font/woff2" crossorigin />
    <link rel="preload" href={`${import.meta.env.BASE_URL.replace(/\/$/, '')}/fonts/inter-latin.woff2`} as="font" type="font/woff2" crossorigin />
    
    <!-- DNS Prefetch for External Resources -->
    <link rel="dns-prefetch" href="//fonts.googleapis.com" />
    <link rel="dns-prefetch" href="//images.unsplash.com" />
    
    <!-- Resource Hints for Performance -->
    <link rel="preconnect" href="https://fonts.googleapis.com" crossorigin />
    <link rel="preconnect" href="https://images.unsplash.com" crossorigin />

  </head>
  <body>
    <Header />
    
    <main id="main-content" class="pt-16 lg:pt-18">
      <slot />
    </main>
    
    <Footer />
    
    <script>
      // Theme initialization - must run immediately to prevent flash
      (function() {
        const getPreferredTheme = () => {
          const stored = localStorage.getItem('theme');
          if (stored && (stored === 'light' || stored === 'dark')) {
            return stored;
          }
          return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        };

        const setTheme = (theme: string) => {
          document.documentElement.setAttribute('data-theme', theme);
          document.documentElement.classList.toggle('dark', theme === 'dark');
          localStorage.setItem('theme', theme);
        };

        // Initialize theme immediately
        const preferredTheme = getPreferredTheme();
        setTheme(preferredTheme);
      })();
    </script>
  </body>
</html>
