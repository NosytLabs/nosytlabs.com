/**
 * Security Middleware for NosytLabs Website
 *
 * This middleware integrates security measures for the application including:
 * - Rate limiting
 * - CSRF protection
 * - Security headers
 *
 * The middleware is designed to be lightweight and efficient while providing
 * comprehensive security coverage for all routes.
 *
 * Version: 2.0.0 - Modular Architecture
 * Enhanced with modular components for better maintainability and performance.
 */

import type { APIContext, MiddlewareNext } from 'astro';
import { createMiddlewareComposer } from './middleware/core/MiddlewareComposer';

// Legacy imports for backward compatibility
// Legacy imports removed - functionality moved to modular architecture
// Legacy imports removed - functionality moved to modular architecture

// Create middleware composer instance with configuration
const middlewareComposer = createMiddlewareComposer({
  enablePerformanceTracking: true,
  enableDetailedLogging: process.env.NODE_ENV === 'development',
  skipPrerenderingRequests: true,
  enableRateLimit: true,
  enableCsrfProtection: true,
  enableSecurityHeaders: true,
});

// Legacy function removed - functionality moved to SecurityHeadersManager in modular architecture

// Main middleware function using the modular architecture
export const onRequest = async (context: APIContext, next: MiddlewareNext) => {
  // Use the modular middleware composer for all security processing
  return await middlewareComposer.execute(context, next);
};

// Legacy exports removed - functionality moved to modular architecture
export { securityLogger, logSuspiciousRequest } from './utils/security-logger';
export { securityAlertManager } from './utils/security-alerts';

// Export new modular components for advanced usage
export { createMiddlewareComposer } from './middleware/core/MiddlewareComposer';
export { CsrfValidator } from './middleware/csrf/CsrfValidator';
export { SecurityHeadersManager } from './middleware/security/SecurityHeadersManager';
export { SecurityErrorHandler } from './middleware/error/SecurityErrorHandler';
export { createSecurityContext } from './middleware/core/SecurityContext';

// Export performance metrics access
export const getMiddlewareMetrics = () => middlewareComposer.getPerformanceMetrics();
export const resetMiddlewareMetrics = () => middlewareComposer.resetPerformanceMetrics();
export const getMiddlewareConfig = () => middlewareComposer.getConfig();
export const updateMiddlewareConfig = (config: any) => middlewareComposer.updateConfig(config);
