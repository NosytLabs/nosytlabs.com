---
import type { CollectionEntry } from 'astro:content';
import { createInternalLink, createImagePath } from '@/lib/constants';
import { formatDate } from '@/lib/blog-utils';

interface Props {
  posts: CollectionEntry<'blog'>[];
  currentSlug: string;
}

const { posts, currentSlug } = Astro.props;

// Filter out current post
const relatedPosts = posts.filter(post => post.slug !== currentSlug).slice(0, 3);
---

{relatedPosts.length > 0 && (
  <section class="mt-16 pt-16 border-t border-slate-200 dark:border-slate-700">
    <h2 class="text-3xl font-bold text-slate-900 dark:text-white mb-8">
      Related Articles
    </h2>
    
    <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
      {relatedPosts.map((post) => (
        <article class="group bg-white dark:bg-slate-800 rounded-2xl shadow-sm hover:shadow-xl transition-all duration-300 overflow-hidden border border-slate-200 dark:border-slate-700">
          {post.data.heroImage && (
            <div class="aspect-video overflow-hidden">
              <img 
                src={createImagePath(post.data.heroImage)} 
                alt={post.data.heroImageAlt || `Featured image for ${post.data.title}`}
                loading="lazy"
                decoding="async"
                class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                loading="lazy"
                onerror={`this.onerror=null; this.src='${createImagePath('images/blog-index-og.jpg')}'; this.alt='NOSYT Labs Blog Fallback Image'; void 0;`}
              />
            </div>
          )}
          
          <div class="p-6">
            <div class="flex items-center gap-4 mb-4">
              <time 
                datetime={post.data.pubDate.toISOString()}
                class="text-sm text-slate-500 dark:text-slate-400"
              >
                {formatDate(post.data.pubDate)}
              </time>
              
              {post.data.tags && post.data.tags.length > 0 && (
                <span class="px-2 py-1 text-xs font-medium bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded-full">
                  {post.data.tags[0]}
                </span>
              )}
            </div>
            
            <h3 class="text-xl font-bold text-slate-900 dark:text-white mb-3 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors line-clamp-2">
              <a href={createInternalLink(`/blog/${post.slug}`)} class="stretched-link">
                {post.data.title}
              </a>
            </h3>
            
            <p class="text-slate-600 dark:text-slate-300 mb-4 line-clamp-2">
              {post.data.description}
            </p>
            
            <div class="flex items-center justify-between">
              <span class="text-sm text-slate-500 dark:text-slate-400">
                {post.data.readingTime || '5 min read'}
              </span>
              
              <svg class="w-5 h-5 text-blue-600 dark:text-blue-400 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
              </svg>
            </div>
          </div>
        </article>
      ))}
    </div>
  </section>
)}

<style>
  .stretched-link::after {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 1;
    content: "";
  }
  
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>

