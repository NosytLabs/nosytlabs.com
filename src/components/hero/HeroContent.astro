---
import Button from '../ui/Button.astro';

export interface Props {
  title: string;
  subtitle?: string;
  ctaText?: string;
  ctaLink?: string;
  secondaryCtaText?: string;
  secondaryCtaLink?: string;
  size?: 'small' | 'medium' | 'large';
}

const {
  title,
  subtitle,
  ctaText,
  ctaLink,
  secondaryCtaText,
  secondaryCtaLink,
  size = 'medium',
} = Astro.props;
---

<!-- Content - 2025 WCAG 2.2 Compliant -->
<div class="container relative z-10">
  <div class="text-center max-w-4xl mx-auto">
    {
      size === 'large' ? (
        <h1
class="text-4xl md:text-5xl lg:text-6xl xl:text-7xl font-bold tracking-tight leading-tight mb-6 text-balance entrance-fade text-on-primary text-shadow-hero-primary"
        >
          {title}
        </h1>
      ) : size === 'small' ? (
        <h3
class="text-2xl md:text-3xl lg:text-4xl font-semibold tracking-tight leading-tight mb-6 text-balance entrance-fade text-on-primary text-shadow-hero-primary"
        >
          {title}
        </h3>
      ) : (
        <h2
class="text-3xl md:text-4xl lg:text-5xl font-bold tracking-tight leading-tight mb-6 text-balance entrance-fade text-on-primary text-shadow-hero-primary"
        >
          {title}
        </h2>
      )
    }

    {
      subtitle && (
        <p
class="text-xl md:text-2xl text-on-primary-muted leading-relaxed mb-8 max-w-3xl mx-auto text-balance entrance-slide-up text-shadow-hero-secondary"
        >
          {subtitle}
        </p>
      )
    }

    {
      (ctaText || secondaryCtaText) && (
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          {ctaText && ctaLink && (
            <Button
              variant="primary"
              href={ctaLink}
              class="group touch-target"
              aria-label={`${ctaText} - Primary action`}
            >
              <span class="absolute inset-0 bg-gradient-to-r from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
              <span class="relative z-10">{ctaText}</span>
              <svg
                class="w-5 h-5 ml-2 flex-shrink-0 transform group-hover:translate-x-1 transition-transform duration-300 relative z-10"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                aria-hidden="true"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  strokeWidth="2"
                  d="M13 7l5 5m0 0l-5 5m5-5H6"
                />
              </svg>
            </Button>
          )}

          {secondaryCtaText && secondaryCtaLink && (
            <Button
              variant="secondary"
              href={secondaryCtaLink}
              class="group touch-target"
              aria-label={`${secondaryCtaText} - Secondary action`}
            >
              <span class="absolute inset-0 bg-gradient-to-r from-white/10 to-white/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
              <span class="relative z-10">{secondaryCtaText}</span>
              <svg
                class="w-5 h-5 ml-2 flex-shrink-0 transform group-hover:rotate-12 transition-transform duration-300 relative z-10"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                aria-hidden="true"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  strokeWidth="2"
                  d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                />
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  strokeWidth="2"
                  d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                />
              </svg>
            </Button>
          )}
        </div>
      )
    }
  </div>
</div>


