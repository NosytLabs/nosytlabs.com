---
/**
 * Enhanced Hero Section with Modern Animations and Interactions
 * Features: Interactive particles, typing animation, scroll indicators, and modern UI
 */

import HeroBackground from './HeroBackground.astro';
import HeroQuantumParticles from './HeroQuantumParticles.astro';
import HeroNeuralNetwork from './HeroNeuralNetwork.astro';
import Button from '../ui/Button.astro';
import AstroIcon from '../ui/AstroIcon.astro';

export interface Props {
  title: string;
  subtitle?: string;
  ctaText?: string;
  ctaLink?: string;
  secondaryCtaText?: string;
  secondaryCtaLink?: string;
  background?: 'gradient' | 'image' | 'simple';
  size?: 'small' | 'medium' | 'large';
  showStats?: boolean;
  showScrollIndicator?: boolean;
}

const {
  title,
  subtitle,
  ctaText = 'Get Started',
  ctaLink = '/contact',
  secondaryCtaText = 'View Our Work',
  secondaryCtaLink = '/projects',
  background = 'gradient',
  size = 'large',
  showStats = true,
  showScrollIndicator = true,
} = Astro.props;

const sizeClasses = {
  small: 'min-h-[60vh] py-16 md:py-20',
  medium: 'min-h-[80vh] py-20 md:py-28',
  large: 'min-h-screen py-24 md:py-32',
};
---

<section
  id="hero"
  class={`relative overflow-hidden ${sizeClasses[size]} flex items-center justify-center`}
  role="banner"
  aria-label="Hero section"
>
  <!-- Enhanced Background -->
  <HeroBackground {background} />

  <!-- Interactive Background Elements -->
  <div class="absolute inset-0 overflow-hidden pointer-events-none">
    <!-- Quantum AI Particles -->
    <HeroQuantumParticles />

    <!-- Advanced AI Connection Network -->
    <HeroNeuralNetwork />

    <!-- Floating Geometric Shapes -->
    <div class="absolute top-20 left-10 w-20 h-20 bg-primary/10 rounded-full blur-xl animate-float" style="animation-delay: 0s;"></div>
    <div class="absolute top-40 right-20 w-32 h-32 bg-secondary/10 rounded-full blur-2xl animate-float" style="animation-delay: 2s;"></div>
    <div class="absolute bottom-40 left-1/4 w-16 h-16 bg-accent/10 rounded-full blur-lg animate-float" style="animation-delay: 4s;"></div>
    <div class="absolute top-1/3 right-1/3 w-24 h-24 bg-primary/5 rounded-full blur-xl animate-float" style="animation-delay: 1s;"></div>
  </div>

  <!-- Main Content -->
  <div class="container relative z-10 px-4 sm:px-6 lg:px-8">
    <div class="text-center max-w-6xl mx-auto">
      <!-- Badge/Announcement -->
      <div class="inline-flex items-center gap-2 bg-background/20 backdrop-blur-sm px-6 py-3 rounded-full mb-8 border border-background/30 entrance-fade">
        <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
        <span class="text-on-primary font-semibold text-sm">ðŸš€ Now Available - AI-Powered Solutions</span>
      </div>

      <!-- Main Title with Typing Effect -->
      <h1 class="text-4xl md:text-6xl lg:text-7xl xl:text-8xl font-bold tracking-tight leading-tight mb-8 text-balance">
        <span class="bg-gradient-to-r from-white via-primary-200 to-secondary-200 bg-clip-text text-transparent animate-gradient-x text-shadow-hero-primary">
          <span id="typing-text" data-text={title}>{title}</span>
        </span>
      </h1>

      <!-- Subtitle with Stagger Animation -->
      {subtitle && (
        <p class="text-xl md:text-2xl lg:text-3xl text-text-secondary leading-relaxed mb-12 max-w-4xl mx-auto text-balance entrance-slide-up" style="animation-delay: 0.5s;">
          {subtitle}
        </p>
      )}

      <!-- Enhanced CTA Buttons -->
      <div class="flex flex-col sm:flex-row gap-6 justify-center mb-16 entrance-slide-up" style="animation-delay: 1s;">
        <Button
          variant="primary"
          href={ctaLink}
          class="group relative overflow-hidden px-8 py-4 text-lg font-semibold transform hover:scale-105 transition-all duration-300 hover:shadow-2xl hover:shadow-primary/25"
        >
          <span class="absolute inset-0 bg-gradient-to-r from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></span>
          <span class="relative z-10 flex items-center gap-3">
            <AstroIcon name="tabler:rocket" class="w-5 h-5" />
            {ctaText}
            <AstroIcon name="tabler:arrow-right" class="w-5 h-5 transform group-hover:translate-x-1 transition-transform duration-300" />
          </span>
        </Button>

        <Button
          variant="secondary"
          href={secondaryCtaLink}
          class="group relative overflow-hidden px-8 py-4 text-lg font-semibold transform hover:scale-105 transition-all duration-300 hover:shadow-xl"
        >
          <span class="absolute inset-0 bg-gradient-to-r from-white/10 to-white/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></span>
          <span class="relative z-10 flex items-center gap-3">
            <AstroIcon name="tabler:eye" class="w-5 h-5" />
            {secondaryCtaText}
            <AstroIcon name="tabler:external-link" class="w-5 h-5 transform group-hover:rotate-12 transition-transform duration-300" />
          </span>
        </Button>
      </div>

      <!-- Stats Section -->
        {showStats && (
        <div class="grid grid-cols-2 md:grid-cols-4 gap-8 max-w-4xl mx-auto entrance-fade" style="animation-delay: 1.5s;">
          <div class="text-center group hover:scale-105 transition-transform duration-300">
            <div class="text-3xl md:text-4xl font-bold text-on-primary mb-2 group-hover:text-primary transition-colors duration-300">
              <span class="counter" data-target="50">0</span>+
            </div>
            <div class="text-on-primary-muted text-sm md:text-base">Projects Completed</div>
          </div>
          <div class="text-center group hover:scale-105 transition-transform duration-300">
            <div class="text-3xl md:text-4xl font-bold text-on-primary mb-2 group-hover:text-primary transition-colors duration-300">
              <span class="counter" data-target="100">0</span>%
            </div>
            <div class="text-on-primary-muted text-sm md:text-base">Client Satisfaction</div>
          </div>
          <div class="text-center group hover:scale-105 transition-transform duration-300">
            <div class="text-3xl md:text-4xl font-bold text-on-primary mb-2 group-hover:text-primary transition-colors duration-300">
              <span class="counter" data-target="24">0</span>/7
            </div>
            <div class="text-on-primary-muted text-sm md:text-base">Support Available</div>
          </div>
          <div class="text-center group hover:scale-105 transition-transform duration-300">
            <div class="text-3xl md:text-4xl font-bold text-on-primary mb-2 group-hover:text-primary transition-colors duration-300">
              <span class="counter" data-target="5">0</span>+
            </div>
            <div class="text-on-primary-muted text-sm md:text-base">Years Experience</div>
          </div>
        </div>
      )}
    </div>
  </div>

  <!-- Scroll Indicator -->
  {showScrollIndicator && (
    <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 animate-bounce">
      <div class="flex flex-col items-center gap-2 text-on-primary-muted hover:text-primary transition-colors duration-300 cursor-pointer" onclick="document.getElementById('main-content')?.scrollIntoView({behavior: 'smooth'});">
        <span class="text-sm font-medium">Scroll to explore</span>
        <AstroIcon name="tabler:chevron-down" class="w-6 h-6" />
      </div>
    </div>
  )}
</section>

<!-- Enhanced Styles and Animations -->
<style>
  @keyframes float {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    33% { transform: translateY(-20px) rotate(5deg); }
    66% { transform: translateY(-10px) rotate(-5deg); }
  }

  @keyframes gradient-x {
    0%, 100% {
      background-size: 200% 200%;
      background-position: left center;
    }
    50% {
      background-size: 200% 200%;
      background-position: right center;
    }
  }


  .animate-float {
    animation: float 6s ease-in-out infinite;
  }

  .animate-gradient-x {
    animation: gradient-x 3s ease infinite;
  }


  /* Typing cursor effect */
  #typing-text::after {
    content: '|';
    animation: blink 1s infinite;
    color: var(--color-primary);
  }

  @keyframes blink {
    0%, 50% { opacity: 1; }
    51%, 100% { opacity: 0; }
  }
</style>

<!-- Enhanced JavaScript for Interactions -->
<script>
  // Typing animation
  function initTypingAnimation() {
    const typingElement = document.getElementById('typing-text');
    if (!typingElement) return;

    const text = typingElement.getAttribute('data-text') || '';
    typingElement.textContent = '';
    
    let i = 0;
    const typeWriter = () => {
      if (i < text.length) {
        typingElement.textContent += text.charAt(i);
        i++;
        setTimeout(typeWriter, 100);
      }
    };
    
    setTimeout(typeWriter, 1000);
  }

  // Counter animation
  function initCounterAnimation() {
    const counters = document.querySelectorAll('.counter');
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const counter = entry.target as HTMLElement;
          const target = parseInt(counter.getAttribute('data-target') || '0');
          let current = 0;
          const increment = target / 50;
          
          const updateCounter = () => {
            if (current < target) {
              current += increment;
              counter.textContent = Math.ceil(current).toString();
              requestAnimationFrame(updateCounter);
            } else {
              counter.textContent = target.toString();
            }
          };
          
          updateCounter();
          observer.unobserve(counter);
        }
      });
    });

    counters.forEach(counter => observer.observe(counter));
  }

  // Parallax effect for background elements
  function initParallaxEffect() {
    const handleScroll = () => {
      const scrolled = window.pageYOffset;
      const parallaxElements = document.querySelectorAll('.animate-float');
      
      parallaxElements.forEach((element, index) => {
        const speed = 0.5 + (index * 0.1);
        const yPos = -(scrolled * speed);
        (element as HTMLElement).style.transform = `translateY(${yPos}px)`;
      });
    };

    window.addEventListener('scroll', handleScroll, { passive: true });
  }

  // Initialize all animations when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    initTypingAnimation();
    initCounterAnimation();
    initParallaxEffect();
  });
</script>
