---
// Web Vitals Tracker Component for Real User Monitoring
export interface Props {
  enableReporting?: boolean;
  sampleRate?: number;
  endpoint?: string;
}

const { 
  enableReporting = true, 
  sampleRate = 0.1,
  endpoint = '/api/analytics/vitals'
} = Astro.props;
---

<script define:vars={{ enableReporting, sampleRate, endpoint }}>
  class WebVitalsTracker {
    constructor() {
      this.vitals = {};
      this.sessionId = this.generateSessionId();
      this.init();
    }
    
    init() {
      // Only track for a sample of users
      if (Math.random() > sampleRate) return;
      
      this.trackCoreWebVitals();
      this.trackCustomMetrics();
      this.setupReporting();
    }
    
    trackCoreWebVitals() {
      // LCP - Largest Contentful Paint
      this.observeMetric('largest-contentful-paint', (entry) => {
        this.vitals.lcp = {
          value: entry.startTime,
          rating: this.getRating(entry.startTime, [2500, 4000]),
          element: entry.element?.tagName || 'unknown',
          url: entry.url || window.location.href
        };
        this.reportVital('LCP', this.vitals.lcp);
      });
      
      // FID - First Input Delay
      this.observeMetric('first-input', (entry) => {
        this.vitals.fid = {
          value: entry.processingStart - entry.startTime,
          rating: this.getRating(entry.processingStart - entry.startTime, [100, 300]),
          eventType: entry.name,
          target: entry.target?.tagName || 'unknown'
        };
        this.reportVital('FID', this.vitals.fid);
      });
      
      // CLS - Cumulative Layout Shift
      let clsValue = 0;
      let sessionValue = 0;
      let sessionEntries = [];
      
      this.observeMetric('layout-shift', (entry) => {
        if (!entry.hadRecentInput) {
          const firstSessionEntry = sessionEntries[0];
          const lastSessionEntry = sessionEntries[sessionEntries.length - 1];
          
          if (sessionValue && 
              entry.startTime - lastSessionEntry.startTime < 1000 &&
              entry.startTime - firstSessionEntry.startTime < 5000) {
            sessionValue += entry.value;
            sessionEntries.push(entry);
          } else {
            sessionValue = entry.value;
            sessionEntries = [entry];
          }
          
          if (sessionValue > clsValue) {
            clsValue = sessionValue;
            this.vitals.cls = {
              value: clsValue,
              rating: this.getRating(clsValue, [0.1, 0.25]),
              entries: sessionEntries.length,
              sources: sessionEntries.map(e => e.sources?.[0]?.node?.tagName).filter(Boolean)
            };
            this.reportVital('CLS', this.vitals.cls);
          }
        }
      });
      
      // FCP - First Contentful Paint
      this.observeMetric('paint', (entry) => {
        if (entry.name === 'first-contentful-paint') {
          this.vitals.fcp = {
            value: entry.startTime,
            rating: this.getRating(entry.startTime, [1800, 3000])
          };
          this.reportVital('FCP', this.vitals.fcp);
        }
      });
      
      // TTFB - Time to First Byte
      this.observeMetric('navigation', (entry) => {
        const ttfb = entry.responseStart - entry.requestStart;
        this.vitals.ttfb = {
          value: ttfb,
          rating: this.getRating(ttfb, [800, 1800]),
          connectionType: navigator.connection?.effectiveType || 'unknown'
        };
        this.reportVital('TTFB', this.vitals.ttfb);
      });
    }
    
    trackCustomMetrics() {
      // Time to Interactive (TTI) approximation
      this.trackTimeToInteractive();
      
      // Resource loading performance
      this.trackResourcePerformance();
      
      // User interaction metrics
      this.trackUserInteractions();
      
      // Memory usage
      this.trackMemoryUsage();
    }
    
    trackTimeToInteractive() {
      let ttiStartTime = performance.now();
      let isInteractive = false;
      
      const checkInteractive = () => {
        if (!isInteractive && document.readyState === 'complete') {
          // Wait for main thread to be idle
          if ('requestIdleCallback' in window) {
            requestIdleCallback(() => {
              const tti = performance.now() - ttiStartTime;
              this.vitals.tti = {
                value: tti,
                rating: this.getRating(tti, [3800, 7300])
              };
              this.reportVital('TTI', this.vitals.tti);
              isInteractive = true;
            });
          } else {
            // Fallback for browsers without requestIdleCallback
            setTimeout(() => {
              const tti = performance.now() - ttiStartTime;
              this.vitals.tti = {
                value: tti,
                rating: this.getRating(tti, [3800, 7300])
              };
              this.reportVital('TTI', this.vitals.tti);
              isInteractive = true;
            }, 100);
          }
        }
      };
      
      if (document.readyState === 'complete') {
        checkInteractive();
      } else {
        window.addEventListener('load', checkInteractive);
      }
    }
    
    trackResourcePerformance() {
      this.observeMetric('resource', (entry) => {
        const resourceType = this.getResourceType(entry.name);
        const size = entry.transferSize || 0;
        const duration = entry.duration;
        
        // Track slow resources
        if (duration > 1000 || size > 500000) {
          this.reportCustomMetric('slow_resource', {
            name: entry.name,
            type: resourceType,
            size: size,
            duration: duration,
            cached: entry.transferSize === 0 && entry.decodedBodySize > 0
          });
        }
        
        // Track resource efficiency
        if (size > 0 && duration > 0) {
          const efficiency = size / duration; // bytes per ms
          if (efficiency < 100) {
            this.reportCustomMetric('inefficient_resource', {
              name: entry.name,
              type: resourceType,
              efficiency: efficiency
            });
          }
        }
      });
    }
    
    trackUserInteractions() {
      let interactionCount = 0;
      let firstInteractionTime = null;
      
      ['click', 'keydown', 'scroll', 'touchstart'].forEach(eventType => {
        document.addEventListener(eventType, (event) => {
          interactionCount++;
          
          if (!firstInteractionTime) {
            firstInteractionTime = performance.now();
            this.reportCustomMetric('first_interaction', {
              type: eventType,
              time: firstInteractionTime,
              element: event.target?.tagName || 'unknown'
            });
          }
        }, { passive: true, once: eventType !== 'scroll' });
      });
      
      // Track engagement time
      let engagementStartTime = Date.now();
      let totalEngagementTime = 0;
      
      const updateEngagementTime = () => {
        const now = Date.now();
        totalEngagementTime += now - engagementStartTime;
        engagementStartTime = now;
      };
      
      document.addEventListener('visibilitychange', () => {
        if (document.hidden) {
          updateEngagementTime();
        } else {
          engagementStartTime = Date.now();
        }
      });
      
      window.addEventListener('beforeunload', () => {
        updateEngagementTime();
        this.reportCustomMetric('engagement', {
          totalTime: totalEngagementTime,
          interactions: interactionCount,
          engagementRate: totalEngagementTime / (Date.now() - performance.timeOrigin)
        });
      });
    }
    
    trackMemoryUsage() {
      if ('memory' in performance) {
        const memoryInfo = performance.memory;
        this.reportCustomMetric('memory_usage', {
          usedJSHeapSize: memoryInfo.usedJSHeapSize,
          totalJSHeapSize: memoryInfo.totalJSHeapSize,
          jsHeapSizeLimit: memoryInfo.jsHeapSizeLimit,
          memoryPressure: memoryInfo.usedJSHeapSize / memoryInfo.jsHeapSizeLimit
        });
      }
    }
    
    observeMetric(entryType, callback) {
      if ('PerformanceObserver' in window) {
        try {
          const observer = new PerformanceObserver((list) => {
            list.getEntries().forEach(callback);
          });
          observer.observe({ entryTypes: [entryType] });
        } catch (error) {
          console.warn(`Failed to observe ${entryType}:`, error);
        }
      }
    }
    
    getRating(value, thresholds) {
      if (value <= thresholds[0]) return 'good';
      if (value <= thresholds[1]) return 'needs-improvement';
      return 'poor';
    }
    
    getResourceType(url) {
      if (url.includes('.css')) return 'css';
      if (url.includes('.js')) return 'javascript';
      if (url.match(/\.(jpg|jpeg|png|gif|webp|avif|svg)$/i)) return 'image';
      if (url.match(/\.(woff|woff2|ttf|otf)$/i)) return 'font';
      if (url.includes('/api/')) return 'api';
      return 'other';
    }
    
    setupReporting() {
      // Batch reports to reduce network overhead
      this.reportQueue = [];
      this.reportTimer = null;
      
      // Send reports when page is about to unload
      window.addEventListener('beforeunload', () => {
        this.flushReports(true);
      });
      
      // Send reports periodically
      setInterval(() => {
        this.flushReports();
      }, 30000); // Every 30 seconds
    }
    
    reportVital(name, data) {
      if (!enableReporting) return;
      
      this.queueReport({
        type: 'vital',
        name: name,
        data: data,
        timestamp: Date.now(),
        sessionId: this.sessionId,
        url: window.location.href,
        userAgent: navigator.userAgent,
        connection: navigator.connection ? {
          effectiveType: navigator.connection.effectiveType,
          downlink: navigator.connection.downlink,
          rtt: navigator.connection.rtt
        } : null
      });
      
      // Send to Google Analytics if available
      if ('gtag' in window) {
        window.gtag('event', name, {
          event_category: 'Web Vitals',
          value: Math.round(data.value),
          custom_parameter_1: data.rating,
          custom_parameter_2: this.sessionId
        });
      }
    }
    
    reportCustomMetric(name, data) {
      if (!enableReporting) return;
      
      this.queueReport({
        type: 'custom',
        name: name,
        data: data,
        timestamp: Date.now(),
        sessionId: this.sessionId,
        url: window.location.href
      });
    }
    
    queueReport(report) {
      this.reportQueue.push(report);
      
      // Auto-flush if queue gets too large
      if (this.reportQueue.length >= 10) {
        this.flushReports();
      }
    }
    
    flushReports(immediate = false) {
      if (this.reportQueue.length === 0) return;
      
      const reports = [...this.reportQueue];
      this.reportQueue = [];
      
      const sendReports = () => {
        if ('fetch' in window) {
          fetch(endpoint, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              reports: reports,
              meta: {
                timestamp: Date.now(),
                sessionId: this.sessionId,
                url: window.location.href,
                referrer: document.referrer,
                viewport: {
                  width: window.innerWidth,
                  height: window.innerHeight
                }
              }
            })
          }).catch(error => {
            console.warn('Failed to send performance reports:', error);
          });
        }
      };
      
      if (immediate) {
        // Use sendBeacon for immediate sending (e.g., on page unload)
        if ('sendBeacon' in navigator) {
          navigator.sendBeacon(endpoint, JSON.stringify({
            reports: reports,
            meta: {
              timestamp: Date.now(),
              sessionId: this.sessionId,
              url: window.location.href
            }
          }));
        } else {
          sendReports();
        }
      } else {
        sendReports();
      }
    }
    
    generateSessionId() {
      return Math.random().toString(36).substring(2, 15) + 
             Math.random().toString(36).substring(2, 15);
    }
    
    // Public API
    getVitals() {
      return { ...this.vitals };
    }
    
    forceReport() {
      this.flushReports(true);
    }
  }
  
  // Initialize Web Vitals tracking
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      window.webVitalsTracker = new WebVitalsTracker();
    });
  } else {
    window.webVitalsTracker = new WebVitalsTracker();
  }
</script>

<style>
  /* Web Vitals Tracker doesn't need visual styles */
  .web-vitals-tracker {
    display: none;
  }
</style>
