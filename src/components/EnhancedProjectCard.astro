---
// EnhancedProjectCard.astro
// A 3D project card component with hover effects and improved contrast

export interface Props {
  title: string;
  description: string;
  image: string;
  imageAlt?: string;
  link: string;
  tags?: string[];
  category?: string;
  date?: string;
  className?: string;
  animationDelay?: number;
}

const {
  title,
  description,
  image,
  imageAlt = title,
  link,
  tags = [],
  category = "Project",
  date,
  className = "",
  animationDelay = 0
} = Astro.props;

// Generate a unique ID for this card
const cardId = `card-${Math.random().toString(36).substring(2, 9)}`;
---

<div 
  id={cardId}
  class={`enhanced-project-card card-3d ${className}`}
  style={`--animation-delay: ${animationDelay}s;`}
  data-link={link}
>
  <div class="card-inner">
    <!-- Image Container with Overlay -->
    <div class="image-container">
      <img 
        src={image} 
        alt={imageAlt} 
        loading="lazy" 
        class="card-image"
      />
      <div class="image-overlay"></div>
      
      <!-- Category Badge -->
      {category && (
        <span class="category-badge">
          {category}
        </span>
      )}
    </div>
    
    <!-- Content -->
    <div class="content">
      <h3 class="title">{title}</h3>
      <p class="description">{description}</p>
      
      <!-- Tags -->
      {tags.length > 0 && (
        <div class="technologies">
          {tags.map((tag) => (
            <span class="tech-tag">{tag}</span>
          ))}
        </div>
      )}
      
      <!-- Action Button -->
      <div class="actions">
        <span class="view-button">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
          </svg>
          <span>View Project</span>
        </span>
        
        {date && (
          <span class="date">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            <span>{date}</span>
          </span>
        )}
      </div>
    </div>
  </div>
</div>

<style>
  .enhanced-project-card {
    position: relative;
    height: 100%;
    border-radius: 0.75rem;
    overflow: hidden;
    background-color: var(--color-bg-secondary);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    transform: translateY(30px);
    opacity: 0;
    animation: reveal-card 0.6s forwards;
    animation-delay: var(--animation-delay);
    cursor: pointer;
  }

  .enhanced-project-card:hover {
    transform: translateY(-10px) scale(1.02);
    box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
  }

  .card-inner {
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  /* Image Container */
  .image-container {
    position: relative;
    overflow: hidden;
    border-top-left-radius: 0.75rem;
    border-top-right-radius: 0.75rem;
  }

  .card-image {
    width: 100%;
    height: 220px;
    object-fit: cover;
    transition: transform 0.6s ease;
  }

  .enhanced-project-card:hover .card-image {
    transform: scale(1.05);
  }

  /* Image Overlay */
  .image-overlay {
    position: absolute;
    inset: 0;
    background: linear-gradient(to top, 
      rgba(0, 0, 0, 0.8) 0%, 
      rgba(0, 0, 0, 0.4) 30%,
      rgba(0, 0, 0, 0) 100%);
    opacity: 0;
    transition: opacity 0.4s ease;
  }

  .enhanced-project-card:hover .image-overlay {
    opacity: 1;
  }

  /* Category Badge */
  .category-badge {
    position: absolute;
    top: 1rem;
    right: 1rem;
    padding: 0.35rem 0.75rem;
    background-color: var(--nosyt-orange-dark);
    color: white;
    font-size: 0.75rem;
    font-weight: 700;
    border-radius: 9999px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    z-index: 10;
    transform: translateY(-5px);
    opacity: 0;
    transition: all 0.4s ease;
  }

  .enhanced-project-card:hover .category-badge {
    transform: translateY(0);
    opacity: 1;
  }

  /* Content */
  .content {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    flex: 1;
  }

  .title {
    font-size: 1.25rem;
    font-weight: 700;
    color: var(--color-text-primary);
    margin-bottom: 0.5rem;
    position: relative;
    display: inline-block;
  }

  .title::after {
    content: '';
    position: absolute;
    bottom: -4px;
    left: 0;
    width: 0;
    height: 2px;
    background-color: var(--nosyt-orange-main);
    transition: width 0.4s ease;
  }

  .enhanced-project-card:hover .title::after {
    width: 100%;
  }

  .description {
    color: var(--color-text-secondary);
    font-size: 0.95rem;
    line-height: 1.5;
    margin-bottom: 1.25rem;
    flex-grow: 1;
  }

  /* Technology Tags */
  .technologies {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 1.5rem;
  }

  .tech-tag {
    padding: 0.25rem 0.5rem;
    background-color: rgba(var(--nosyt-orange-rgb, 249, 115, 22), 0.1);
    color: var(--nosyt-orange-dark);
    font-size: 0.75rem;
    font-weight: 600;
    border-radius: 0.25rem;
    border: 1px solid rgba(var(--nosyt-orange-rgb, 249, 115, 22), 0.2);
  }

  /* Actions */
  .actions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: auto;
  }

  .view-button {
    display: inline-flex;
    align-items: center;
    padding: 0.5rem 1rem;
    background-color: var(--nosyt-orange-dark);
    color: white;
    font-weight: 600;
    border-radius: 0.375rem;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .view-button:hover {
    background-color: var(--nosyt-orange-main);
    transform: translateY(-2px);
  }

  .view-button svg {
    margin-right: 0.5rem;
    transition: transform 0.3s ease;
  }

  .view-button:hover svg {
    transform: translateX(2px);
  }

  /* Button Glow Effect */
  .view-button::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(
      circle,
      rgba(255, 255, 255, 0.3) 0%,
      rgba(255, 255, 255, 0) 70%
    );
    opacity: 0;
    transform: scale(0.5);
    transition: opacity 0.5s ease, transform 0.5s ease;
  }

  .view-button:hover::after {
    opacity: 1;
    transform: scale(1);
  }

  .date {
    display: flex;
    align-items: center;
    font-size: 0.75rem;
    color: var(--color-text-secondary);
  }

  .date svg {
    margin-right: 0.25rem;
  }

  /* Animation */
  @keyframes reveal-card {
    0% {
      opacity: 0;
      transform: translateY(30px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Dark Mode Adjustments */
  :global(.dark) .enhanced-project-card {
    background-color: var(--color-bg-secondary);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  :global(.dark) .tech-tag {
    background-color: rgba(var(--nosyt-orange-rgb, 249, 115, 22), 0.15);
    border-color: rgba(var(--nosyt-orange-rgb, 249, 115, 22), 0.3);
  }

  /* Responsive Adjustments */
  @media (max-width: 768px) {
    .card-image {
      height: 180px;
    }
    
    .content {
      padding: 1.25rem;
    }
    
    .title {
      font-size: 1.1rem;
    }
    
    .description {
      font-size: 0.9rem;
    }
  }
</style>

<script define:vars={{ cardId, link }}>
  document.addEventListener('DOMContentLoaded', () => {
    const card = document.getElementById(cardId);
    if (!card) return;

    // Make the entire card clickable
    card.addEventListener('click', (e) => {
      // Don't navigate if clicking on a link inside the card
      if (e.target.tagName === 'A' || e.target.closest('a')) {
        return;
      }
      
      window.open(link, '_blank');
    });

    // 3D tilt effect
    const handleMouseMove = (e) => {
      const { left, top, width, height } = card.getBoundingClientRect();
      const x = (e.clientX - left) / width;
      const y = (e.clientY - top) / height;
      
      const tiltX = (y - 0.5) * 10; // Tilt up/down
      const tiltY = (0.5 - x) * 10; // Tilt left/right
      
      card.style.transform = `perspective(1000px) rotateX(${tiltX}deg) rotateY(${tiltY}deg) scale3d(1.02, 1.02, 1.02) translateY(-10px)`;
    };
    
    const resetTilt = () => {
      card.style.transform = '';
    };
    
    // Only apply 3D effect on non-touch devices
    if (!('ontouchstart' in window)) {
      card.addEventListener('mousemove', handleMouseMove);
      card.addEventListener('mouseleave', resetTilt);
    }
  });
</script>
