---
/**
 * ResponsiveImage.astro
 * A high-performance responsive image component that supports:
 * - Automatic WebP and AVIF format selection based on browser support
 * - Responsive image sizes with srcset
 * - Lazy loading with LQIP (Low Quality Image Placeholders)
 * - Blur-up loading effect
 * - Fallback for older browsers
 * - Proper accessibility attributes
 */

interface Props {
  src: string;                  // Original image source
  alt: string;                  // Alt text for accessibility
  width?: number;               // Original image width
  height?: number;              // Original image height
  sizes?: string;               // Sizes attribute for responsive images
  loading?: 'lazy' | 'eager';   // Loading strategy
  decoding?: 'async' | 'sync' | 'auto'; // Decoding strategy
  class?: string;               // Additional CSS classes
  style?: string;               // Additional inline styles
  fetchpriority?: 'high' | 'low' | 'auto'; // Fetch priority
  id?: string;                  // Element ID
  objectFit?: string;           // Object-fit style
  objectPosition?: string;      // Object-position style
  aspectRatio?: string;         // Aspect ratio (e.g., "16/9")
}

const {
  src,
  alt,
  width,
  height,
  sizes = '(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw',
  loading = 'lazy',
  decoding = 'async',
  class: className = '',
  style = '',
  fetchpriority = 'auto',
  id,
  objectFit = 'cover',
  objectPosition = 'center',
  aspectRatio
} = Astro.props;

// Extract file information
const fileExtension = src.split('.').pop()?.toLowerCase();
const basePath = src.substring(0, src.lastIndexOf('.'));
const isExternal = src.startsWith('http') || src.startsWith('//');

// Define responsive sizes for srcset
const responsiveSizes = [320, 640, 960, 1280, 1600];

// Generate srcset for original format
const originalSrcset = isExternal 
  ? src 
  : responsiveSizes
      .filter(size => !width || size <= width)
      .map(size => `${basePath}-${size}.${fileExtension} ${size}w`)
      .join(', ');

// Generate srcset for WebP format
const webpSrcset = isExternal
  ? ''
  : responsiveSizes
      .filter(size => !width || size <= width)
      .map(size => `${basePath}-${size}.webp ${size}w`)
      .join(', ');

// Generate srcset for AVIF format
const avifSrcset = isExternal
  ? ''
  : responsiveSizes
      .filter(size => !width || size <= width)
      .map(size => `${basePath}-${size}.avif ${size}w`)
      .join(', ');

// Try to load placeholder
let placeholder = '';
try {
  if (!isExternal) {
    const placeholderPath = `${basePath}.placeholder.json`;
    // In a real implementation, you would load this from the file system
    // For now, we'll use a simple approach
    placeholder = '';
  }
} catch (e) {
  // Placeholder not available
}

// Combine styles
const combinedStyle = `
  ${objectFit ? `object-fit: ${objectFit};` : ''}
  ${objectPosition ? `object-position: ${objectPosition};` : ''}
  ${aspectRatio ? `aspect-ratio: ${aspectRatio};` : ''}
  ${placeholder ? 'filter: blur(10px); transition: filter 0.3s ease-out;' : ''}
  ${style}
`.trim();

// Combine classes
const combinedClass = `responsive-image ${className}`.trim();
---

<picture class="responsive-picture">
  {!isExternal && (
    <>
      <!-- AVIF format for browsers that support it -->
      <source
        srcset={avifSrcset}
        sizes={sizes}
        type="image/avif"
      />
      
      <!-- WebP format for browsers that support it -->
      <source
        srcset={webpSrcset}
        sizes={sizes}
        type="image/webp"
      />
    </>
  )}
  
  <!-- Original format as fallback -->
  <img
    src={src}
    srcset={originalSrcset}
    sizes={sizes}
    alt={alt}
    width={width}
    height={height}
    loading={loading}
    decoding={decoding}
    fetchpriority={fetchpriority}
    id={id}
    class={combinedClass}
    style={combinedStyle}
    onload={placeholder ? "this.style.filter='none';" : undefined}
  />
</picture>

<style>
  .responsive-picture {
    display: block;
    width: 100%;
    overflow: hidden;
  }
  
  .responsive-image {
    display: block;
    width: 100%;
    height: auto;
    transition: transform 0.3s ease, filter 0.3s ease;
  }
  
  /* Add a subtle animation when image loads */
  @keyframes imageReveal {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  
  .responsive-image[loading="lazy"] {
    animation: imageReveal 0.5s ease forwards;
  }
  
  /* Ensure proper aspect ratio before image loads */
  .responsive-picture:not([style*="aspect-ratio"]) {
    position: relative;
  }
  
  /* Prevent layout shift with aspect ratio */
  .responsive-picture[style*="aspect-ratio"] .responsive-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
</style>

<script>
  // Handle image loading events
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll('.responsive-image[loading="lazy"]');
    
    images.forEach(img => {
      // Remove blur filter when image loads
      img.addEventListener('load', () => {
        img.style.filter = 'none';
      });
      
      // Handle error by showing a fallback
      img.addEventListener('error', () => {
        // Try to load a fallback image
        const imgElement = img as HTMLImageElement;
        imgElement.src = '/images/fallback-image.svg';
        imgElement.srcset = '';
      });
    });
  });
</script>
