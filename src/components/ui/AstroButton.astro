---
/**
 * Astro Button Component
 * 
 * A wrapper around the React Button component that enables seamless integration
 * in Astro files while maintaining all React Button functionality.
 */

import { Button } from './button';

export interface Props {
  variant?: 'primary' | 'secondary' | 'outline' | 'outline-secondary' | 'ghost' | 'ghost-primary' | 'link' | 'success' | 'danger' | 'warning' | 'gradient' | 'ai' | 'neural' | 'quantum';
  size?: 'xs' | 'sm' | 'default' | 'lg' | 'xl' | 'icon' | 'icon-sm' | 'icon-lg';
  href?: string;
  disabled?: boolean;
  loading?: boolean;
  loadingText?: string;
  animated?: boolean;
  class?: string;
  'aria-label'?: string;
  'aria-describedby'?: string;
  'aria-expanded'?: boolean;
  'aria-pressed'?: boolean;
  'aria-controls'?: string;
  type?: 'button' | 'submit' | 'reset';
  form?: string;
  name?: string;
  value?: string;
  onClick?: string; // For inline event handlers in Astro
}

const {
  variant = 'primary',
  size = 'default',
  href,
  disabled = false,
  loading = false,
  loadingText = 'Loading...',
  animated = false,
  class: className,
  'aria-label': ariaLabel,
  'aria-describedby': ariaDescribedBy,
  'aria-expanded': ariaExpanded,
  'aria-pressed': ariaPressed,
  'aria-controls': ariaControls,
  type = 'button',
  form,
  name,
  value,
  onClick,
  ...rest
} = Astro.props;
---

<Button
  client:idle
  variant={variant}
  size={size}
  href={href}
  disabled={disabled}
  loading={loading}
  loadingText={loadingText}
  animated={animated}
  className={className}
  aria-label={ariaLabel}
  aria-describedby={ariaDescribedBy}
  aria-expanded={ariaExpanded}
  aria-pressed={ariaPressed}
  aria-controls={ariaControls}
  type={type}
  form={form}
  name={name}
  value={value}
  {...rest}
>
  <slot />
  <div slot="fallback">
    <button class={className} disabled>
      Loading...
    </button>
  </div>
</Button>

<script define:vars={{ onClick }}>
  if (onClick && typeof onClick === 'string') {
    // Handle inline onClick handlers for Astro compatibility
    const button = document.currentScript?.previousElementSibling;
    if (button) {
      button.addEventListener('click', new Function('event', onClick));
    }
  }
</script>