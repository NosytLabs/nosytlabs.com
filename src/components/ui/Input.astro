---
export interface Props {
  type?: 'text' | 'email' | 'password' | 'number' | 'tel' | 'url' | 'search' | 'date' | 'time' | 'datetime-local';
  size?: 'sm' | 'md' | 'lg';
  variant?: 'default' | 'filled' | 'outlined';
  state?: 'default' | 'error' | 'success' | 'warning';
  disabled?: boolean;
  readonly?: boolean;
  required?: boolean;
  fullWidth?: boolean;
  placeholder?: string;
  value?: string | number;
  name?: string;
  id?: string;
  label?: string;
  helperText?: string;
  errorMessage?: string;
  successMessage?: string;
  warningMessage?: string;
  ariaLabel?: string;
  ariaDescribedBy?: string;
  autocomplete?: string;
  pattern?: string;
  min?: string | number;
  max?: string | number;
  step?: string | number;
  maxlength?: number;
  minlength?: number;
  class?: string;
}

const {
  type = 'text',
  size = 'md',
  variant = 'default',
  state = 'default',
  disabled = false,
  readonly = false,
  required = false,
  fullWidth = false,
  placeholder,
  value,
  name,
  id,
  label,
  helperText,
  errorMessage,
  successMessage,
  warningMessage,
  ariaLabel,
  ariaDescribedBy,
  autocomplete,
  pattern,
  min,
  max,
  step,
  maxlength,
  minlength,
  class: className = '',
  ...rest
} = Astro.props;

// Generate unique ID if not provided
const inputId = id || `input-${Math.random().toString(36).substr(2, 9)}`;
const helperId = `${inputId}-helper`;
const errorId = `${inputId}-error`;

// Base classes
const baseClasses = [
  'input',
  'block',
  'transition-all',
  'duration-200',
  'ease-in-out',
  'focus:outline-none',
  'focus:ring-2',
  'focus:ring-offset-1',
  'disabled:opacity-60',
  'disabled:cursor-not-allowed',
  'readonly:bg-neutral-50',
  'readonly:cursor-default'
];

// Size classes
const sizeClasses = {
  sm: ['text-sm leading-relaxed leading-relaxed leading-relaxed', 'px-3', 'py-1.5', 'rounded-md'],
  md: ['text-base leading-normal leading-normal leading-normal', 'px-4', 'py-2', 'rounded-md'],
  lg: ['text-lg leading-relaxed leading-relaxed leading-relaxed', 'px-4', 'py-3', 'rounded-lg']
};

// Variant classes
const variantClasses = {
  default: [
    'bg-white',
    'border',
    'border-neutral-300',
    'hover:border-neutral-400',
    'focus:border-accent',
    'focus:ring-brand-accent'
  ],
  filled: [
    'bg-neutral-100',
    'border',
    'border-transparent',
    'hover:bg-neutral-200',
    'focus:bg-white',
    'focus:border-brand-accent',
    'focus:ring-brand-accent'
  ],
  outlined: [
    'bg-transparent',
    'border-2',
    'border-neutral-300',
    'hover:border-neutral-400',
    'focus:border-brand-accent',
    'focus:ring-brand-accent'
  ]
};

// State classes
const stateClasses = {
  default: [],
  error: [
    'border-error-500',
    'focus:border-error-500',
    'focus:ring-error-500',
    'text-error-900'
  ],
  success: [
    'border-success-500',
    'focus:border-success-500',
    'focus:ring-success-500',
    'text-success-900'
  ],
  warning: [
    'border-warning-500',
    'focus:border-warning-500',
    'focus:ring-warning-500',
    'text-warning-900'
  ]
};

// Width classes
const widthClasses = fullWidth ? ['w-full'] : [];

// Combine all classes
const allClasses = [
  ...baseClasses,
  ...sizeClasses[size],
  ...variantClasses[variant],
  ...stateClasses[state],
  ...widthClasses,
  className
].filter(Boolean).join(' ');

// Label classes
const labelClasses = [
  'block',
  'text-sm leading-relaxed leading-relaxed leading-relaxed',
  'font-medium',
  'text-neutral-700',
  'mb-1'
].join(' ');

// Helper text classes
const helperClasses = [
  'mt-1',
  'text-sm leading-relaxed leading-relaxed leading-relaxed',
  state === 'error' ? 'text-error-600' :
  state === 'success' ? 'text-success-600' :
  state === 'warning' ? 'text-warning-600' :
  'text-neutral-500'
].join(' ');

// Get the appropriate message based on state
const getMessage = () => {
  if (state === 'error' && errorMessage) return errorMessage;
  if (state === 'success' && successMessage) return successMessage;
  if (state === 'warning' && warningMessage) return warningMessage;
  return helperText;
};

const message = getMessage();

// Component props
const inputProps = {
  type,
  class: allClasses,
  disabled,
  readonly,
  required,
  placeholder,
  value,
  name,
  id: inputId,
  'aria-label': ariaLabel || label,
  'aria-describedby': message ? (ariaDescribedBy ? `${ariaDescribedBy} ${helperId}` : helperId) : ariaDescribedBy,
  'aria-invalid': state === 'error' ? 'true' : undefined,
  'aria-required': required ? 'true' : undefined,
  autocomplete,
  pattern,
  min,
  max,
  step,
  maxlength,
  minlength,
  ...rest
};
---

<div class={fullWidth ? 'w-full' : ''}>
  {label && (
    <label for={inputId} class={labelClasses}>
      {label}
      {required && (
        <span class="text-error-500 ml-1 focus:outline-none focus:ring-2 focus:ring-accent" aria-label="required">*</span>
      )}
    </label>
  )}
  
  <div class="relative">
    <input {...inputProps} />
    
    {/* State icons */}
    {state === 'error' && (
      <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
        <svg class="h-5 w-5 text-error-500" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
          <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
        </svg>
      </div>
    )}
    
    {state === 'success' && (
      <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
        <svg class="h-5 w-5 text-success-500" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
        </svg>
      </div>
    )}
    
    {state === 'warning' && (
      <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
        <svg class="h-5 w-5 text-warning-500" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
          <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
        </svg>
      </div>
    )}
  </div>
  
  {message && (
    <p id={helperId} class={helperClasses} role={state === 'error' ? 'alert' : undefined}>
      {message}
    </p>
  )}
</div>

<style>
  .input {
    font-family: var(--font-family-body);
    line-height: 1.5;
  }
  
  .input::placeholder {
    color: var(--color-neutral-400);
    opacity: 1;
  }
  
  .input:focus {
    outline: var(--space-0-5) solid var(--brand-accent);
    outline-offset: var(--space-0-5);
  }
  
  /* Remove default number input spinners */
  .input[type="number"]::-webkit-outer-spin-button,
  .input[type="number"]::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
  
  .input[type="number"] {
    -moz-appearance: textfield;
  }
  
  /* Remove default search input styling */
  .input[type="search"]::-webkit-search-decoration,
  .input[type="search"]::-webkit-search-cancel-button,
  .input[type="search"]::-webkit-search-results-button,
  .input[type="search"]::-webkit-search-results-decoration {
    -webkit-appearance: none;
  }
  
  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .input {
      border-width: var(--space-0-5); /* 2px -> 4px for grid alignment */
    }
    
    .input:focus {
      outline-width: var(--space-0-5); /* 3px -> 4px for grid alignment */
    }
  }
  
  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .input {
      transition: none;
    }
  }
  
  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .input {
      background-color: var(--color-neutral-800);
      border-color: var(--color-neutral-600);
      color: var(--color-neutral-100);
    }
    
    .input::placeholder {
      color: var(--color-neutral-400);
    }
    
    .input:focus {
      background-color: var(--color-neutral-700);
    }
  }
</style>