---
import { cva, type VariantProps } from "class-variance-authority";

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-all duration-300 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 touch-target relative overflow-hidden group",
  {
    variants: {
      variant: {
        default:
          "bg-[var(--color-brand-accent)] text-[var(--color-brand-primary)] border-2 border-[var(--color-brand-accent)] hover:bg-transparent hover:text-[var(--color-brand-accent)] hover:shadow-[var(--shadow-glow)] transform hover:-translate-y-0.5 before:absolute before:inset-0 before:bg-gradient-to-r before:from-[var(--color-brand-accent)] before:to-[var(--color-brand-purple)] before:opacity-0 hover:before:opacity-100 before:transition-opacity before:duration-300 z-0 pulse hover-lift",
        destructive:
          "bg-red-600 text-white hover:bg-red-700 shadow-md hover:shadow-lg transform hover:-translate-y-0.5 pulse hover-lift",
        outline:
          "border border-input bg-transparent hover:bg-surface-secondary shadow-md hover:shadow-lg transform hover:-translate-y-0.5 hover:shadow-[var(--shadow-glow)] hover-lift",
        secondary:
          "bg-surface-secondary text-foreground hover:bg-surface-tertiary shadow-md hover:shadow-lg transform hover:-translate-y-0.5 hover:shadow-[var(--shadow-glow)] hover-lift",
        ghost: "hover:bg-surface-secondary transform hover:-translate-y-0.5 hover-lift",
        link: "text-[var(--color-brand-accent)] underline-offset-4 hover:underline transform hover:-translate-y-0.5 hover:shadow-[var(--shadow-glow)] hover-lift",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-12 rounded-lg px-8 text-base",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

export interface Props extends VariantProps<typeof buttonVariants> {
  class?: string;
  [key: string]: any;
}

const { variant, size, class: className, ...props } = Astro.props;
---

<button class={buttonVariants({ variant, size, class: className })} {...props}>
  <slot />
</button>