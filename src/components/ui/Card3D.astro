---
// Card3D.astro
// A card component with 3D hover effect

interface Props {
  title: string;
  description?: string;
  image?: string;
  link?: string;
  icon?: string;
  category?: string;
  theme?: 'default' | 'primary' | 'secondary' | 'accent' | 'dark';
  className?: string;
  flippable?: boolean;
}

const {
  title,
  description,
  image,
  link,
  icon,
  category,
  theme = 'default',
  className = '',
  flippable = false
} = Astro.props;

// Generate a unique ID for the card
const cardId = `card-${Math.random().toString(36).substring(2, 11)}`;

// Determine theme classes
let themeClasses = '';
switch (theme) {
  case 'primary':
    themeClasses = 'bg-primary-light text-white';
    break;
  case 'secondary':
    themeClasses = 'bg-secondary-light text-white';
    break;
  case 'accent':
    themeClasses = 'bg-accent text-white';
    break;
  case 'dark':
    themeClasses = 'bg-gray-800 text-white';
    break;
  default:
    themeClasses = 'bg-white text-gray-800';
}
---

<div class={`card-3d ${flippable ? 'card-3d-flip' : ''} ${className} reveal-on-scroll mouse-tracking-3d`} id={cardId}>
  <div class="card-3d-inner h-full">
    <!-- Front of the card -->
    <div class={`card-3d-front rounded-lg overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 h-full ${themeClasses}`}>
      {image && (
        <div class="card-image-container relative overflow-hidden">
          <img
            data-src={image}
            src="/images/placeholder.svg"
            alt={title}
            class="w-full h-48 object-cover transition-transform duration-500 hover:scale-110"
            loading="lazy"
          />
          {category && (
            <span class="absolute top-2 right-2 px-3 py-1 bg-accent text-white text-xs font-bold rounded-full">
              {category}
            </span>
          )}
        </div>
      )}

      <div class="p-6 staggered-container">
        {icon && (
          <div class="text-3xl mb-4 float-animation">
            {icon}
          </div>
        )}

        <h3 class="text-xl font-semibold mb-2 card-title text-reveal">{title}</h3>

        {description && (
          <p class="opacity-80 mb-4 card-description line-clamp-3 fade-in-scale">{description}</p>
        )}

        {link && (
          <div class="mt-4 slide-up-fade" style="--animation-delay: 0.4s;">
            <a
              href={link}
              target="_blank"
              rel="noopener noreferrer"
              class="inline-block bg-accent hover:bg-accent-dark text-white font-medium py-2 px-4 rounded transition-colors button-pulse"
            >
              View Project
            </a>
          </div>
        )}

        {flippable && (
          <button class="flip-button absolute bottom-4 right-4 text-accent hover:text-accent-dark transition-colors">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
          </button>
        )}
      </div>
    </div>

    <!-- Back of the card (only for flippable cards) -->
    {flippable && (
      <div class={`card-3d-back rounded-lg overflow-hidden shadow-lg p-6 ${themeClasses}`}>
        <h3 class="text-xl font-semibold mb-4">{title} - Details</h3>

        <p class="opacity-80 mb-6">
          {description || "No additional details available."}
        </p>

        {link && (
          <a
            href={link}
            class="inline-block bg-accent hover:bg-accent-dark text-white font-medium py-2 px-4 rounded transition-colors"
          >
            Learn More
          </a>
        )}

        <button class="flip-button absolute bottom-4 right-4 text-accent hover:text-accent-dark transition-colors">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
        </button>
      </div>
    )}
  </div>
</div>

<style>
  /* Card 3D effect styles */
  .card-3d {
    perspective: 1000px;
    transform-style: preserve-3d;
    transition: transform 0.3s ease-out, box-shadow 0.3s ease-out;
  }

  .card-3d:hover {
    transform: translateY(-10px) scale(1.02);
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }

  .card-3d-inner {
    position: relative;
    width: 100%;
    height: 100%;
    transition: transform 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    transform-style: preserve-3d;
  }

  .card-3d-front,
  .card-3d-back {
    position: absolute;
    width: 100%;
    height: 100%;
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
  }

  .card-3d-back {
    transform: rotateY(180deg);
  }

  .card-3d-flip .card-3d-inner.flipped {
    transform: rotateY(180deg);
  }

  /* Float animation for icons */
  .float-animation {
    animation: float 5s ease-in-out infinite;
  }

  @keyframes float {
    0% {
      transform: translateY(0px) rotate(0deg);
    }
    25% {
      transform: translateY(-5px) rotate(2deg);
    }
    50% {
      transform: translateY(-10px) rotate(0deg);
    }
    75% {
      transform: translateY(-5px) rotate(-2deg);
    }
    100% {
      transform: translateY(0px) rotate(0deg);
    }
  }

  /* Button pulse animation */
  .button-pulse {
    animation: button-pulse 2s infinite;
  }

  @keyframes button-pulse {
    0% {
      box-shadow: 0 0 0 0 rgba(255, 122, 47, 0.4);
    }
    70% {
      box-shadow: 0 0 0 10px rgba(255, 122, 47, 0);
    }
    100% {
      box-shadow: 0 0 0 0 rgba(255, 122, 47, 0);
    }
  }

  /* Text reveal animation */
  .text-reveal {
    animation: textReveal 0.8s cubic-bezier(0.77, 0, 0.175, 1) forwards;
    animation-delay: var(--animation-delay, 0s);
  }

  @keyframes textReveal {
    0% {
      clip-path: inset(0 100% 0 0);
      opacity: 0;
    }
    100% {
      clip-path: inset(0 0 0 0);
      opacity: 1;
    }
  }

  /* Fade in scale animation */
  .fade-in-scale {
    animation: fadeInScale 0.8s cubic-bezier(0.77, 0, 0.175, 1) forwards;
    animation-delay: var(--animation-delay, 0.2s);
    opacity: 0;
  }

  @keyframes fadeInScale {
    0% {
      transform: scale(0.9);
      opacity: 0;
    }
    100% {
      transform: scale(1);
      opacity: 1;
    }
  }

  /* Slide up fade animation */
  .slide-up-fade {
    animation: slideUpFade 0.8s cubic-bezier(0.77, 0, 0.175, 1) forwards;
    animation-delay: var(--animation-delay, 0.4s);
    opacity: 0;
  }

  @keyframes slideUpFade {
    0% {
      transform: translateY(20px);
      opacity: 0;
    }
    100% {
      transform: translateY(0);
      opacity: 1;
    }
  }

  /* Respect user preferences */
  @media (prefers-reduced-motion: reduce) {
    .card-3d-inner,
    .float-animation,
    .button-pulse,
    .text-reveal,
    .fade-in-scale,
    .slide-up-fade {
      animation: none !important;
      transition: none !important;
    }
  }
</style>

<script>
  // Initialize 3D card flip effect and animations
  document.addEventListener('DOMContentLoaded', function() {
    // Handle card flipping
    const cards = document.querySelectorAll('.card-3d-flip');
    cards.forEach(card => {
      const flipButtons = card.querySelectorAll('.flip-button');
      flipButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          const cardInner = card.querySelector('.card-3d-inner');
          cardInner.classList.toggle('flipped');
        });
      });
    });

    // Lazy load images
    const lazyImages = document.querySelectorAll('img[data-src]');
    lazyImages.forEach(img => {
      const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            img.src = img.getAttribute('data-src');
            observer.unobserve(img);
          }
        });
      });
      observer.observe(img);
    });

    // Add 3D tilt effect to cards
    const tiltCards = document.querySelectorAll('.mouse-tracking-3d');
    tiltCards.forEach(card => {
      card.addEventListener('mousemove', (e) => {
        if (window.matchMedia('(prefers-reduced-motion: no-preference)').matches) {
          const rect = card.getBoundingClientRect();
          const x = e.clientX - rect.left;
          const y = e.clientY - rect.top;

          const xPercent = x / rect.width;
          const yPercent = y / rect.height;

          const rotateX = (0.5 - yPercent) * 10;
          const rotateY = (xPercent - 0.5) * 10;

          card.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale3d(1.02, 1.02, 1.02)`;
        }
      });

      card.addEventListener('mouseleave', () => {
        card.style.transform = '';
      });
    });

    // Reveal elements on scroll
    const revealElements = document.querySelectorAll('.reveal-on-scroll');
    const observer = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('revealed');
          observer.unobserve(entry.target);
        }
      });
    }, { threshold: 0.1 });

    revealElements.forEach(el => {
      observer.observe(el);
    });
  });
</script>

<style>
  /* Additional animation styles */
  .reveal-on-scroll {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.8s ease, transform 0.8s ease;
  }

  .reveal-on-scroll.revealed {
    opacity: 1;
    transform: translateY(0);
  }
</style>
