---
/**
 * CodeDisplay.astro
 * A clean, professional code display component for showcasing code snippets.
 * 
 * Features:
 * - Syntax highlighting
 * - Copy to clipboard functionality
 * - Optional line numbers
 * - Expandable view
 * - Multiple themes
 * - Terminal mode option
 */

export interface Props {
  title?: string;
  language?: string;
  code?: string;
  dark?: boolean;
  showLineNumbers?: boolean;
  terminalMode?: boolean;
  expandable?: boolean;
  theme?: 'default' | 'professional' | 'tech' | 'minimal';
}

const {
  title = "main.js",
  language = "javascript",
  code = "",
  dark = true,
  showLineNumbers = true,
  terminalMode = false,
  expandable = false,
  theme = "default"
} = Astro.props;

function addLineNumbers(code: string) {
  return code.split("\n").map((line, i) => 
    `<span class="line-number">${i + 1}</span>${line}`
  ).join("\n");
}

let themeClasses = "";
if (theme === "professional") {
  themeClasses = "theme-professional";
} else if (theme === "tech") {
  themeClasses = "theme-tech";
} else if (theme === "minimal") {
  themeClasses = "theme-minimal";
}

const editorClass = terminalMode ? "terminal-editor" : "code-display";
---

<div class={`${editorClass} ${themeClasses} rounded-lg overflow-hidden shadow-lg ${dark ? "bg-gray-900" : "bg-white"} ${expandable ? "expandable" : ""}`}>
  <!-- Code Editor Header -->
  <div class={`editor-header px-4 py-2 flex items-center justify-between ${dark ? "bg-gray-800" : "bg-gray-100"}`}>
    <div class="flex items-center space-x-2">
      <div class="w-3 h-3 rounded-full bg-red-500 window-button close-button"></div>
      <div class="w-3 h-3 rounded-full bg-yellow-500 window-button minimize-button"></div>
      <div class="w-3 h-3 rounded-full bg-green-500 window-button maximize-button"></div>
    </div>
    <div class={`text-sm font-medium ${dark ? "text-gray-300" : "text-gray-700"}`}>
      {title}
    </div>
    <div class="flex items-center space-x-2">
      {expandable && (
        <button class="expand-button text-xs px-2 py-1 rounded bg-gray-700 bg-opacity-20 hover:bg-opacity-30 transition-colors" aria-label="Expand code">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5v-4m0 4h-4m4 0l-5-5" />
          </svg>
        </button>
      )}
      <button class="copy-button text-xs px-2 py-1 rounded bg-gray-700 bg-opacity-20 hover:bg-opacity-30 transition-colors" aria-label="Copy code">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
        </svg>
      </button>
    </div>
  </div>

  <!-- Code Editor Content -->
  <div class="editor-content p-4 overflow-auto max-h-[500px]">
    {code && (
      <div class="code-container relative">
        {terminalMode && <div class="terminal-prompt">$&nbsp;</div>}
        <pre class={`code-block font-mono text-sm ${showLineNumbers ? "with-line-numbers" : ""} ${dark ? "text-gray-300" : "text-gray-800"}`}>
          <code class={`language-${language}`} data-language={language}>
            {showLineNumbers ? addLineNumbers(code) : code}
          </code>
        </pre>
        <div class="copy-notification">Copied!</div>
      </div>
    )}
  </div>
</div>

<style>
  .code-display, .terminal-editor {
    transition: all 0.3s;
    position: relative;
    overflow: hidden;
  }
  
  .code-display:before, .terminal-editor:before {
    content: "";
    z-index: 10;
    background: linear-gradient(90deg, var(--accent-color, #FF7A2F), var(--primary-color, #2E1A47));
    height: 2px;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
  }
  
  .window-button {
    cursor: pointer;
    transition: transform 0.2s;
  }
  
  .window-button:hover {
    transform: scale(1.2);
  }
  
  .code-container {
    position: relative;
    overflow: hidden;
  }
  
  .with-line-numbers {
    counter-reset: line;
    padding-left: 3.5rem;
  }
  
  .line-number {
    color: #6c7280;
    opacity: 0.5;
    text-align: right;
    user-select: none;
    width: 2.5rem;
    padding-right: 0.5rem;
    position: absolute;
    left: 0;
  }
  
  .terminal-editor {
    font-family: 'Courier New', monospace;
  }
  
  .terminal-prompt {
    color: #50fa7b;
    font-weight: bold;
    position: absolute;
    top: 0;
    left: 0.5rem;
  }
  
  .copy-notification {
    color: white;
    opacity: 0;
    pointer-events: none;
    background-color: rgba(0, 0, 0, 0.7);
    border-radius: 0.25rem;
    padding: 0.25rem 0.5rem;
    transition: opacity 0.3s;
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
  }
  
  .expandable {
    cursor: pointer;
    transition: all 0.3s;
  }
  
  .expanded {
    z-index: 50;
    position: fixed;
    inset: 2rem;
    width: auto;
    max-width: none;
    height: auto;
  }
  
  .expanded .editor-content {
    height: calc(100% - 2.5rem);
    overflow: auto;
  }
  
  .code-block {
    white-space: pre-wrap;
    word-break: break-word;
    max-width: 100%;
    height: auto;
    position: relative;
    overflow: hidden;
  }
  
  /* Theme styles */
  .theme-professional {
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
  }
  
  .theme-professional .editor-header {
    background: linear-gradient(to right, #2E1A47, #3A2259);
    color: white;
  }
  
  .theme-tech {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .theme-tech .editor-header {
    background: linear-gradient(to right, #1E293B, #334155);
    color: white;
  }
  
  .theme-minimal {
    box-shadow: none;
    border: 1px solid rgba(0, 0, 0, 0.1);
  }
  
  .theme-minimal .editor-header {
    background: transparent;
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  }
  
  .theme-minimal.dark .editor-header {
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }
</style>

<script>
  // Initialize code display functionality
  function initializeCodeDisplay() {
    // Copy button functionality
    const copyButtons = document.querySelectorAll('.copy-button');
    copyButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.stopPropagation();
        const codeBlock = button.closest('.code-display, .terminal-editor').querySelector('code');
        const codeText = codeBlock.innerText;
        
        navigator.clipboard.writeText(codeText).then(() => {
          const notification = button.closest('.code-display, .terminal-editor').querySelector('.copy-notification');
          notification.style.opacity = '1';
          setTimeout(() => {
            notification.style.opacity = '0';
          }, 2000);
        });
      });
    });
    
    // Expandable functionality
    const expandableEditors = document.querySelectorAll('.expandable');
    expandableEditors.forEach(editor => {
      editor.addEventListener('click', () => {
        editor.classList.toggle('expanded');
      });
      
      // Close on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && editor.classList.contains('expanded')) {
          editor.classList.remove('expanded');
        }
      });
    });
    
    // Prevent clicks inside the editor from toggling expand
    const editorContents = document.querySelectorAll('.editor-content');
    editorContents.forEach(content => {
      content.addEventListener('click', (e) => {
        e.stopPropagation();
      });
    });
  }
  
  // Run initialization when the DOM is loaded
  document.addEventListener('DOMContentLoaded', initializeCodeDisplay);
  
  // Also run when the document is ready (for Astro partial hydration)
  if (document.readyState === 'complete' || document.readyState === 'interactive') {
    setTimeout(initializeCodeDisplay, 1);
  }
</script>
