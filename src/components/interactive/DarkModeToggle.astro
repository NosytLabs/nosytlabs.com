---
/**
 * Dark Mode Toggle Component
 * Modern theme switcher with smooth transitions and system preference detection
 */
interface Props {
  className?: string;
}

const { className = '' } = Astro.props;
---

<button
  id="dark-mode-toggle"
  class={`dark-mode-toggle ${className}`}
  aria-label="Toggle dark mode"
  type="button"
>
  <span class="toggle-icon sun-icon" aria-hidden="true">
    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <circle cx="12" cy="12" r="5"></circle>
      <line x1="12" y1="1" x2="12" y2="3"></line>
      <line x1="12" y1="21" x2="12" y2="23"></line>
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
      <line x1="1" y1="12" x2="3" y2="12"></line>
      <line x1="21" y1="12" x2="23" y2="12"></line>
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
    </svg>
  </span>
  <span class="toggle-icon moon-icon" aria-hidden="true">
    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
    </svg>
  </span>
  <span class="toggle-background"></span>
</button>

<script>
  class DarkModeToggle {
    constructor() {
      this.button = document.getElementById('dark-mode-toggle');
      this.prefersDark = window.matchMedia('(prefers-color-scheme: dark)');
      this.currentTheme = this.getStoredTheme() || (this.prefersDark.matches ? 'dark' : 'light');
      
      this.init();
    }

    init() {
      // Set initial theme
      this.setTheme(this.currentTheme);
      
      // Add event listeners
      this.button?.addEventListener('click', () => this.toggleTheme());
      this.prefersDark.addEventListener('change', (e) => this.handleSystemThemeChange(e));
      
      // Add keyboard support
      this.button?.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          this.toggleTheme();
        }
      });
    }

    getStoredTheme() {
      try {
        return localStorage.getItem('theme');
      } catch {
        return null;
      }
    }

    setStoredTheme(theme) {
      try {
        localStorage.setItem('theme', theme);
      } catch {
        // Silently fail if localStorage is not available
      }
    }

    setTheme(theme) {
      this.currentTheme = theme;
      document.documentElement.setAttribute('data-theme', theme);
      this.setStoredTheme(theme);
      this.updateButtonState();
      
      // Dispatch custom event for other components
      window.dispatchEvent(new CustomEvent('themechange', { 
        detail: { theme } 
      }));
    }

    toggleTheme() {
      const newTheme = this.currentTheme === 'dark' ? 'light' : 'dark';
      this.setTheme(newTheme);
    }

    handleSystemThemeChange(e) {
      // Only update if user hasn't manually set a preference
      if (!this.getStoredTheme()) {
        this.setTheme(e.matches ? 'dark' : 'light');
      }
    }

    updateButtonState() {
      if (!this.button) return;
      
      const isDark = this.currentTheme === 'dark';
      this.button.setAttribute('aria-pressed', isDark.toString());
      this.button.classList.toggle('dark', isDark);
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new DarkModeToggle());
  } else {
    new DarkModeToggle();
  }
</script>

<style>
  .dark-mode-toggle {
    position: relative;
    width: 3rem;
    height: 1.5rem;
    background: var(--glass-white-strong);
    backdrop-filter: var(--glass-blur);
    -webkit-backdrop-filter: var(--glass-blur);
    border: var(--glass-border);
    border-radius: 1.5rem;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.125rem;
    overflow: hidden;
    box-shadow: var(--glass-shadow);
  }

  .dark-mode-toggle:hover {
    background: var(--glass-white);
    box-shadow: var(--glass-shadow-strong);
    transform: scale(1.05);
  }

  .dark-mode-toggle:focus {
    outline: 2px solid var(--color-focus);
    outline-offset: 2px;
    box-shadow: 0 0 0 4px var(--color-focus-ring), var(--glass-shadow-strong);
  }

  .toggle-background {
    position: absolute;
    top: 0.125rem;
    left: 0.125rem;
    width: 1.25rem;
    height: 1.25rem;
    background: var(--gradient-primary);
    border-radius: 50%;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    z-index: 1;
  }

  .dark-mode-toggle.dark .toggle-background {
    transform: translateX(1.5rem);
    background: var(--gradient-accent);
  }

  .toggle-icon {
    position: relative;
    z-index: 2;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 1.25rem;
    height: 1.25rem;
    color: var(--color-text-secondary);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .sun-icon {
    opacity: 1;
    transform: rotate(0deg) scale(1);
  }

  .moon-icon {
    opacity: 0;
    transform: rotate(180deg) scale(0.8);
  }

  .dark-mode-toggle.dark .sun-icon {
    opacity: 0;
    transform: rotate(-180deg) scale(0.8);
  }

  .dark-mode-toggle.dark .moon-icon {
    opacity: 1;
    transform: rotate(0deg) scale(1);
    color: var(--color-text-inverse);
  }

  .toggle-icon svg {
    width: 100%;
    height: 100%;
    transition: inherit;
  }

  /* Dark mode styles */
  [data-theme="dark"] .dark-mode-toggle {
    background: var(--glass-dark-strong);
    border: var(--glass-border);
  }

  [data-theme="dark"] .dark-mode-toggle:hover {
    background: var(--glass-dark);
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .dark-mode-toggle,
    .toggle-background,
    .toggle-icon,
    .toggle-icon svg {
      transition: none;
    }
  }

  /* High contrast mode */
  @media (prefers-contrast: high) {
    .dark-mode-toggle {
      border: 2px solid var(--color-border-strong);
      background: var(--color-surface);
    }

    .toggle-background {
      background: var(--color-primary-500);
    }
  }
</style>
