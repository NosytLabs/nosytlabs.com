---
/**
 * Dark Mode Toggle Component
 * Modern theme switcher with smooth transitions and system preference detection
 */
interface Props {
  className?: string;
}

const { className = '' } = Astro.props;
---

<button
  id="dark-mode-toggle"
  class={`relative w-12 h-6 bg-glass backdrop-blur-glass border border-white/20 rounded-full cursor-pointer nosyt-button-hover flex items-center justify-between p-0.5 overflow-hidden shadow-lg nosyt-focus dark:bg-gray-800/80 dark:border-gray-600/30 ${className}`}
  aria-label="Toggle dark mode"
  type="button"
>
  <span class="sun-icon relative z-10 flex items-center justify-center w-5 h-5 text-gray-600 transition-all duration-300 ease-out opacity-100 rotate-0 scale-100 dark:opacity-0 dark:-rotate-180 dark:scale-75" aria-hidden="true">
    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="w-full h-full">
      <circle cx="12" cy="12" r="5"></circle>
      <line x1="12" y1="1" x2="12" y2="3"></line>
      <line x1="12" y1="21" x2="12" y2="23"></line>
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
      <line x1="1" y1="12" x2="3" y2="12"></line>
      <line x1="21" y1="12" x2="23" y2="12"></line>
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
    </svg>
  </span>
  <span class="moon-icon relative z-10 flex items-center justify-center w-5 h-5 text-gray-400 transition-all duration-300 ease-out opacity-0 rotate-180 scale-75 dark:opacity-100 dark:rotate-0 dark:scale-100 dark:text-white" aria-hidden="true">
    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="w-full h-full">
      <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
    </svg>
  </span>
  <span class="toggle-background absolute top-0.5 left-0.5 w-5 h-5 bg-gradient-to-r from-nosyt-purple to-nosyt-purple-light rounded-full transition-all duration-300 ease-out shadow-md z-0 dark:translate-x-6 dark:from-nosyt-orange dark:to-orange-400"></span>
</button>

<script>
  class DarkModeToggle {
    constructor() {
      this.button = document.getElementById('dark-mode-toggle');
      this.prefersDark = window.matchMedia('(prefers-color-scheme: dark)');
      this.currentTheme = this.getStoredTheme() || (this.prefersDark.matches ? 'dark' : 'light');
      
      this.init();
    }

    init() {
      // Set initial theme
      this.setTheme(this.currentTheme);
      
      // Add event listeners
      this.button?.addEventListener('click', () => this.toggleTheme());
      this.prefersDark.addEventListener('change', (e) => this.handleSystemThemeChange(e));
      
      // Add keyboard support
      this.button?.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          this.toggleTheme();
        }
      });
    }

    getStoredTheme() {
      try {
        return localStorage.getItem('theme');
      } catch {
        return null;
      }
    }

    setStoredTheme(theme) {
      try {
        localStorage.setItem('theme', theme);
      } catch {
        // Silently fail if localStorage is not available
      }
    }

    setTheme(theme) {
      this.currentTheme = theme;
      document.documentElement.setAttribute('data-theme', theme);
      this.setStoredTheme(theme);
      this.updateButtonState();
      
      // Announce theme change to screen readers
      if (typeof window.announceToScreenReader === 'function') {
        const themeName = theme === 'dark' ? 'Dark' : 'Light';
        window.announceToScreenReader(`${themeName} mode activated`, 'polite');
      }
      
      // Dispatch custom event for other components
      window.dispatchEvent(new CustomEvent('themechange', {
        detail: { theme }
      }));
    }

    toggleTheme() {
      const newTheme = this.currentTheme === 'dark' ? 'light' : 'dark';
      this.setTheme(newTheme);
    }

    handleSystemThemeChange(e) {
      // Only update if user hasn't manually set a preference
      if (!this.getStoredTheme()) {
        this.setTheme(e.matches ? 'dark' : 'light');
      }
    }

    updateButtonState() {
      if (!this.button) return;
      
      const isDark = this.currentTheme === 'dark';
      this.button.setAttribute('aria-pressed', isDark.toString());
      this.button.classList.toggle('dark', isDark);
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new DarkModeToggle());
  } else {
    new DarkModeToggle();
  }
</script>

