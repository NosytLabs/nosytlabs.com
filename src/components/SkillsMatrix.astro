---
/**
 * SkillsMatrix Component
 * 
 * Interactive skills matrix displaying technical proficiency levels
 * with animated progress bars and hover effects.
 */

interface Skill {
  name: string;
  level: number;
  experience: string;
}

interface SkillCategory {
  [category: string]: Skill[];
}

interface Props {
  /**
   * Skills data organized by category
   */
  skills: SkillCategory;
  
  /**
   * Whether to animate on scroll
   * @default true
   */
  animateOnScroll?: boolean;
  
  /**
   * Additional CSS classes
   */
  class?: string;
}

const {
  skills,
  animateOnScroll = true,
  class: className = '',
} = Astro.props;

// Get skill level color based on proficiency
function getSkillColor(level: number): string {
  if (level >= 90) return 'skill-expert';
  if (level >= 80) return 'skill-advanced';
  if (level >= 70) return 'skill-intermediate';
  return 'skill-beginner';
}

// Get skill level text
function getSkillLevelText(level: number): string {
  if (level >= 90) return 'Expert';
  if (level >= 80) return 'Advanced';
  if (level >= 70) return 'Intermediate';
  return 'Beginner';
}
---

<div class:list={['skills-matrix', className]}>
  <div class="skills-grid">
    {Object.entries(skills).map(([category, categorySkills]) => (
      <div class="skill-category" data-category={category}>
        <div class="category-header">
          <h3 class="category-title">{category}</h3>
          <div class="category-stats">
            <span class="skill-count">{categorySkills.length} skills</span>
          </div>
        </div>
        
        <div class="skills-list">
          {categorySkills.map((skill, index) => (
            <div 
              class="skill-item"
              data-skill={skill.name}
              style={animateOnScroll ? `animation-delay: ${index * 0.1}s;` : ''}
            >
              <div class="skill-info">
                <div class="skill-name">{skill.name}</div>
                <div class="skill-experience">{skill.experience}</div>
              </div>
              
              <div class="skill-level">
                <div class="skill-percentage">{skill.level}%</div>
                <div class="skill-bar">
                  <div 
                    class:list={['skill-progress', getSkillColor(skill.level)]}
                    data-level={skill.level}
                    style="width: 0%;"
                  ></div>
                </div>
                <div class="skill-label">{getSkillLevelText(skill.level)}</div>
              </div>
            </div>
          ))}
        </div>
      </div>
    ))}
  </div>
  
  <!-- Skills Legend -->
  <div class="skills-legend">
    <h4 class="legend-title">Proficiency Levels</h4>
    <div class="legend-items">
      <div class="legend-item">
        <div class="legend-color skill-expert"></div>
        <span>Expert (90%+)</span>
      </div>
      <div class="legend-item">
        <div class="legend-color skill-advanced"></div>
        <span>Advanced (80-89%)</span>
      </div>
      <div class="legend-item">
        <div class="legend-color skill-intermediate"></div>
        <span>Intermediate (70-79%)</span>
      </div>
      <div class="legend-item">
        <div class="legend-color skill-beginner"></div>
        <span>Beginner (60-69%)</span>
      </div>
    </div>
  </div>
</div>

<style>
  .skills-matrix {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
  }
  
  .skills-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
    margin-bottom: 3rem;
  }
  
  .skill-category {
    background: white;
    border-radius: 16px;
    padding: 2rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05), 0 1px 3px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    border: 1px solid rgba(124, 58, 237, 0.1);
  }
  
  .skill-category:hover {
    transform: translateY(-4px);
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1), 0 4px 8px rgba(0, 0, 0, 0.06);
    border-color: rgba(124, 58, 237, 0.2);
  }
  
  .category-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding-bottom: 1rem;
    border-bottom: 2px solid #f3f4f6;
  }
  
  .category-title {
    font-size: 1.25rem;
    font-weight: 700;
    color: #1f2937;
    margin: 0;
  }
  
  .category-stats {
    font-size: 0.875rem;
    color: #6b7280;
    background: #f3f4f6;
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
  }
  
  .skills-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .skill-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    background: #f9fafb;
    border-radius: 12px;
    transition: all 0.3s ease;
    opacity: 0;
    transform: translateX(-20px);
    animation: slideInLeft 0.6s ease forwards;
  }
  
  .skill-item:hover {
    background: #f3f4f6;
    transform: translateX(4px);
  }
  
  .skill-info {
    flex: 1;
  }
  
  .skill-name {
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 0.25rem;
  }
  
  .skill-experience {
    font-size: 0.875rem;
    color: #6b7280;
  }
  
  .skill-level {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    gap: 0.25rem;
    min-width: 120px;
  }
  
  .skill-percentage {
    font-weight: 700;
    color: #1f2937;
    font-size: 0.875rem;
  }
  
  .skill-bar {
    width: 100px;
    height: 8px;
    background: #e5e7eb;
    border-radius: 4px;
    overflow: hidden;
    position: relative;
  }
  
  .skill-progress {
    height: 100%;
    border-radius: 4px;
    transition: width 1.5s ease-in-out;
    position: relative;
    overflow: hidden;
  }
  
  .skill-progress::after {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
    animation: shimmer 2s infinite;
  }
  
  .skill-expert {
    background: linear-gradient(90deg, #10b981, #059669);
  }
  
  .skill-advanced {
    background: linear-gradient(90deg, #3b82f6, #1d4ed8);
  }
  
  .skill-intermediate {
    background: linear-gradient(90deg, #f59e0b, #d97706);
  }
  
  .skill-beginner {
    background: linear-gradient(90deg, #ef4444, #dc2626);
  }
  
  .skill-label {
    font-size: 0.75rem;
    font-weight: 500;
    color: #6b7280;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
  
  .skills-legend {
    background: white;
    border-radius: 16px;
    padding: 2rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    border: 1px solid rgba(124, 58, 237, 0.1);
  }
  
  .legend-title {
    font-size: 1.125rem;
    font-weight: 700;
    color: #1f2937;
    margin: 0 0 1rem 0;
  }
  
  .legend-items {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
  }
  
  .legend-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    color: #6b7280;
  }
  
  .legend-color {
    width: 16px;
    height: 8px;
    border-radius: 4px;
  }
  
  @keyframes slideInLeft {
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
  
  @keyframes shimmer {
    0% {
      left: -100%;
    }
    100% {
      left: 100%;
    }
  }
  
  /* Dark mode styles */
  @media (prefers-color-scheme: dark) {
    .skill-category,
    .skills-legend {
      background: #1f2937;
      border-color: rgba(255, 107, 0, 0.1);
    }
    
    .category-header {
      border-bottom-color: #374151;
    }
    
    .category-title,
    .skill-name,
    .skill-percentage,
    .legend-title {
      color: #f9fafb;
    }
    
    .category-stats {
      background: #374151;
      color: #d1d5db;
    }
    
    .skill-item {
      background: #374151;
    }
    
    .skill-item:hover {
      background: #4b5563;
    }
    
    .skill-bar {
      background: #4b5563;
    }
  }
  
  /* Responsive design */
  @media (max-width: 768px) {
    .skills-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }
    
    .skill-category {
      padding: 1.5rem;
    }
    
    .skill-item {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }
    
    .skill-level {
      align-items: flex-start;
      width: 100%;
    }
    
    .skill-bar {
      width: 100%;
    }
    
    .legend-items {
      justify-content: center;
    }
  }
</style>

<script>
  // Animate skill bars on scroll
  document.addEventListener('DOMContentLoaded', function() {
    const skillBars = document.querySelectorAll('.skill-progress');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const bar = entry.target as HTMLElement;
          const level = bar.dataset.level;
          if (level) {
            setTimeout(() => {
              bar.style.width = level + '%';
            }, 200);
          }
        }
      });
    }, { 
      threshold: 0.3,
      rootMargin: '0px 0px -50px 0px'
    });
    
    skillBars.forEach(bar => observer.observe(bar));
    
    // Add hover effects for skill items
    const skillItems = document.querySelectorAll('.skill-item');
    skillItems.forEach(item => {
      item.addEventListener('mouseenter', function() {
        const bar = this.querySelector('.skill-progress') as HTMLElement;
        if (bar) {
          bar.style.transform = 'scaleY(1.2)';
        }
      });
      
      item.addEventListener('mouseleave', function() {
        const bar = this.querySelector('.skill-progress') as HTMLElement;
        if (bar) {
          bar.style.transform = 'scaleY(1)';
        }
      });
    });
  });
</script>
