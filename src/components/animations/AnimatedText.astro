---
// AnimatedText.astro
// Enhanced component for animated text rotation and effects with modern animations

interface Props {
  texts: string[];
  tag?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p' | 'span' | 'div';
  color?: string;
  size?: string;
  weight?: string;
  className?: string;
  animation?: 'rotate' | 'fade' | 'slide' | 'typewriter' | 'glitch' | 'gradient' | 'blur' | '3d' | 'wave' | 'highlight' | 'neon' | 'bounce' | 'flip' | 'reveal' | 'particle';
  rotationSpeed?: number; // in seconds
  prefix?: string;
  suffix?: string;
  highlightColor?: string;
  gradientFrom?: string;
  gradientTo?: string;
  interactive?: boolean;
  letterSpacing?: string;
  staggerDelay?: number; // delay between letters in ms for staggered animations
  initialDelay?: number; // initial delay before animation starts in ms
  particleColor?: string; // color for particle animation
  particleCount?: number; // number of particles for particle animation
  particleSpeed?: number; // speed of particles for particle animation
}

const {
  texts,
  tag = 'span',
  color = 'text-accent',
  size = 'text-xl',
  weight = 'font-bold',
  className = '',
  animation = 'rotate',
  rotationSpeed = 3,
  prefix = '',
  suffix = '',
  highlightColor = 'rgba(255, 107, 0, 0.3)',
  gradientFrom = '#ff6b00',
  gradientTo = '#4c1d95',
  interactive = false,
  letterSpacing = 'normal',
  staggerDelay = 50,
  initialDelay = 0,
  particleColor = 'rgba(255, 107, 0, 0.8)',
  particleCount = 30,
  particleSpeed = 2
} = Astro.props;

const Tag = tag;
const containerId = `animated-text-${Math.random().toString(36).substring(2, 9)}`;
---

<div class="animated-text-container">
  {prefix && <span class="prefix">{prefix}</span>}
  <Tag id={containerId} class={`animated-text ${animation}-text ${color} ${size} ${weight} ${className}`}>
    {texts[0]}
  </Tag>
  {suffix && <span class="suffix">{suffix}</span>}
</div>

<style define:vars={{ rotationSpeed, highlightColor, gradientFrom, gradientTo, letterSpacing, particleColor, particleCount, particleSpeed }}>
  .animated-text-container {
    display: inline-flex;
    align-items: center;
    position: relative;
  }

  .animated-text {
    position: relative;
    display: inline-block;
    letter-spacing: var(--letterSpacing);
  }

  /* Rotation animation */
  .rotate-text {
    opacity: 1;
    transition: opacity 0.5s ease;
  }

  /* Fade animation */
  .fade-text {
    opacity: 1;
    transition: opacity 0.5s ease;
  }

  /* Slide animation */
  .slide-text {
    transform: translateY(0);
    opacity: 1;
    transition: transform 0.5s ease, opacity 0.5s ease;
  }

  /* Typewriter animation */
  .typewriter-text {
    overflow: hidden;
    white-space: nowrap;
    border-right: 3px solid currentColor;
    width: 0;
    animation: typing 3.5s steps(40, end) forwards, blink 1s step-end infinite;
    max-width: 100%;
    display: inline-block;
  }

  @keyframes typing {
    from { width: 0 }
    to { width: 100% }
  }

  @keyframes blink {
    from, to { border-color: transparent }
    50% { border-color: currentColor }
  }

  /* Glitch animation */
  .glitch-text {
    position: relative;
  }

  .glitch-text::before,
  .glitch-text::after {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .glitch-text::before {
    left: 2px;
    text-shadow: -1px 0 #ff00c1;
    clip: rect(44px, 450px, 56px, 0);
    animation: glitch-anim-1 5s linear infinite alternate-reverse;
  }

  .glitch-text::after {
    left: -2px;
    text-shadow: -1px 0 #0000ff;
    clip: rect(44px, 450px, 56px, 0);
    animation: glitch-anim-2 5s linear infinite alternate-reverse;
  }

  /* Gradient animation */
  .gradient-text {
    background: linear-gradient(90deg, var(--gradientFrom), var(--gradientTo));
    background-size: 200% 200%;
    animation: gradient-shift 5s ease infinite;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    text-fill-color: transparent;
  }

  @keyframes gradient-shift {
    0% { background-position: 0% 50% }
    50% { background-position: 100% 50% }
    100% { background-position: 0% 50% }
  }

  /* Blur animation */
  .blur-text {
    filter: blur(0);
    transition: filter 0.5s ease;
  }

  .blur-text.blurred {
    filter: blur(5px);
  }

  /* 3D animation */
  .3d-text {
    text-shadow:
      0 1px 0 rgba(0,0,0,0.2),
      0 2px 0 rgba(0,0,0,0.2),
      0 3px 0 rgba(0,0,0,0.2),
      0 4px 0 rgba(0,0,0,0.1),
      0 5px 10px rgba(0,0,0,0.3);
    transform-style: preserve-3d;
    transition: transform 0.5s ease, text-shadow 0.5s ease;
  }

  .3d-text.active {
    transform: translateY(-5px) rotateX(10deg);
    text-shadow:
      0 1px 0 rgba(0,0,0,0.2),
      0 2px 0 rgba(0,0,0,0.2),
      0 3px 0 rgba(0,0,0,0.2),
      0 4px 0 rgba(0,0,0,0.1),
      0 10px 20px rgba(0,0,0,0.3);
  }

  /* Wave animation */
  .wave-text {
    display: inline-block;
  }

  .wave-text .letter {
    display: inline-block;
    transform-origin: 50% 100%;
    animation: wave-animation 2s infinite;
  }

  @keyframes wave-animation {
    0% { transform: translateY(0) }
    25% { transform: translateY(-10px) }
    50% { transform: translateY(0) }
    75% { transform: translateY(2px) }
    100% { transform: translateY(0) }
  }

  /* Highlight animation */
  .highlight-text {
    position: relative;
    display: inline-block;
  }

  .highlight-text::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0;
    height: 30%;
    background-color: var(--highlightColor);
    z-index: -1;
    transition: width 0.5s ease;
  }

  .highlight-text.highlighted::after {
    width: 100%;
  }

  /* Neon animation with improved visibility and contrast */
  .neon-text {
    text-shadow:
      0 0 5px rgba(255, 255, 255, 0.9),
      0 0 10px rgba(255, 255, 255, 0.7),
      0 0 15px var(--gradientFrom),
      0 0 20px var(--gradientFrom),
      0 0 30px var(--gradientFrom),
      0 0 40px var(--gradientFrom);
    animation: neon-pulse 3s ease-in-out infinite alternate;
    color: white;
    font-weight: bold;
  }

  @keyframes neon-pulse {
    from {
      text-shadow:
        0 0 5px rgba(255, 255, 255, 0.9),
        0 0 10px rgba(255, 255, 255, 0.7),
        0 0 15px var(--gradientFrom),
        0 0 20px var(--gradientFrom),
        0 0 30px var(--gradientFrom),
        0 0 40px var(--gradientFrom);
    }
    to {
      text-shadow:
        0 0 3px rgba(255, 255, 255, 0.9),
        0 0 7px rgba(255, 255, 255, 0.7),
        0 0 12px var(--gradientFrom),
        0 0 17px var(--gradientFrom),
        0 0 25px var(--gradientFrom),
        0 0 35px var(--gradientFrom);
    }
  }

  /* Bounce animation */
  .bounce-text {
    display: inline-block;
    animation: bounce-text 1s ease infinite;
  }

  @keyframes bounce-text {
    0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
    40% { transform: translateY(-10px); }
    60% { transform: translateY(-5px); }
  }

  /* Flip animation */
  .flip-text {
    display: inline-block;
    backface-visibility: visible;
    transform-style: preserve-3d;
    perspective: 1000px;
  }

  .flip-text.flipping {
    animation: flip-animation 1.5s ease;
  }

  @keyframes flip-animation {
    0% { transform: rotateX(0deg); }
    50% { transform: rotateX(180deg); }
    100% { transform: rotateX(360deg); }
  }

  /* Reveal animation */
  .reveal-text {
    position: relative;
    overflow: hidden;
  }

  .reveal-text::after {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    width: 100%;
    height: 100%;
    background: var(--gradientFrom);
    animation: reveal 2s cubic-bezier(0.77, 0, 0.18, 1) forwards;
  }

  @keyframes reveal {
    0% { width: 100%; }
    100% { width: 0; }
  }

  /* Particle animation */
  .particle-text {
    position: relative;
  }

  .particle-text .particle {
    position: absolute;
    background-color: var(--particleColor);
    border-radius: 50%;
    pointer-events: none;
    opacity: 0;
    animation: particle-float 3s ease-in-out infinite;
  }

  @keyframes particle-float {
    0% { transform: translate(0, 0); opacity: 0; }
    10% { opacity: 1; }
    90% { opacity: 0.5; }
    100% { transform: translate(var(--x), var(--y)); opacity: 0; }
  }

  /* Glitch animation keyframes */
  @keyframes glitch-anim-1 {
    0% { clip: rect(27px, 9999px, 30px, 0); }
    10% { clip: rect(68px, 9999px, 72px, 0); }
    20% { clip: rect(18px, 9999px, 22px, 0); }
    30% { clip: rect(94px, 9999px, 98px, 0); }
    40% { clip: rect(35px, 9999px, 39px, 0); }
    50% { clip: rect(81px, 9999px, 85px, 0); }
    60% { clip: rect(50px, 9999px, 54px, 0); }
    70% { clip: rect(6px, 9999px, 10px, 0); }
    80% { clip: rect(62px, 9999px, 66px, 0); }
    90% { clip: rect(15px, 9999px, 19px, 0); }
    100% { clip: rect(53px, 9999px, 57px, 0); }
  }

  @keyframes glitch-anim-2 {
    0% { clip: rect(53px, 9999px, 57px, 0); }
    10% { clip: rect(15px, 9999px, 19px, 0); }
    20% { clip: rect(62px, 9999px, 66px, 0); }
    30% { clip: rect(6px, 9999px, 10px, 0); }
    40% { clip: rect(50px, 9999px, 54px, 0); }
    50% { clip: rect(81px, 9999px, 85px, 0); }
    60% { clip: rect(35px, 9999px, 39px, 0); }
    70% { clip: rect(94px, 9999px, 98px, 0); }
    80% { clip: rect(18px, 9999px, 22px, 0); }
    90% { clip: rect(68px, 9999px, 72px, 0); }
    100% { clip: rect(27px, 9999px, 30px, 0); }
  }
</style>

<script define:vars={{ containerId, texts, animation, rotationSpeed, interactive, staggerDelay, initialDelay, particleCount, particleSpeed }}>
  document.addEventListener('DOMContentLoaded', function() {
    const container = document.getElementById(containerId);
    if (!container) return;

    // Set data-text attribute for glitch effect
    if (animation === 'glitch') {
      container.setAttribute('data-text', texts[0]);
    }

    // Special setup for wave animation
    if (animation === 'wave') {
      // Split text into individual letters with spans
      const text = container.textContent;
      container.innerHTML = '';

      for (let i = 0; i < text.length; i++) {
        const letter = document.createElement('span');
        letter.className = 'letter';
        letter.textContent = text[i];
        letter.style.animationDelay = `${i * (staggerDelay / 1000)}s`;
        container.appendChild(letter);
      }
    }

    // Setup for 3D animation
    if (animation === '3d') {
      if (interactive) {
        container.addEventListener('mouseenter', () => {
          container.classList.add('active');
        });

        container.addEventListener('mouseleave', () => {
          container.classList.remove('active');
        });
      } else {
        // Auto-animate if not interactive
        setInterval(() => {
          container.classList.add('active');
          setTimeout(() => {
            container.classList.remove('active');
          }, 1000);
        }, 3000);
      }
    }

    // Setup for highlight animation
    if (animation === 'highlight') {
      if (interactive) {
        container.addEventListener('mouseenter', () => {
          container.classList.add('highlighted');
        });

        container.addEventListener('mouseleave', () => {
          container.classList.remove('highlighted');
        });
      } else {
        // Auto-animate if not interactive
        setInterval(() => {
          container.classList.add('highlighted');
          setTimeout(() => {
            container.classList.remove('highlighted');
          }, 1500);
        }, 3000);
      }
    }

    // Setup for flip animation
    if (animation === 'flip') {
      if (interactive) {
        container.addEventListener('mouseenter', () => {
          container.classList.add('flipping');
          setTimeout(() => {
            container.classList.remove('flipping');
          }, 1500);
        });
      } else {
        // Auto-animate if not interactive
        setInterval(() => {
          container.classList.add('flipping');
          setTimeout(() => {
            container.classList.remove('flipping');
          }, 1500);
        }, 4000);
      }
    }

    // Setup for particle animation
    if (animation === 'particle') {
      container.classList.add('particle-text');

      // Create particles
      for (let i = 0; i < particleCount; i++) {
        createParticle(container);
      }

      // Create new particles periodically
      setInterval(() => {
        if (container.querySelectorAll('.particle').length < particleCount) {
          createParticle(container);
        }
      }, 500);
    }

    // Function to create a particle
    function createParticle(container) {
      const particle = document.createElement('div');
      particle.className = 'particle';

      // Random size between 2px and 6px
      const size = Math.random() * 4 + 2;
      particle.style.width = `${size}px`;
      particle.style.height = `${size}px`;

      // Random position within container
      const rect = container.getBoundingClientRect();
      const x = Math.random() * rect.width;
      const y = Math.random() * rect.height;
      particle.style.left = `${x}px`;
      particle.style.top = `${y}px`;

      // Random movement direction
      const angle = Math.random() * Math.PI * 2;
      const distance = Math.random() * 100 + 50;
      const xMove = Math.cos(angle) * distance * particleSpeed;
      const yMove = Math.sin(angle) * distance * particleSpeed;

      // Set custom properties for animation
      particle.style.setProperty('--x', `${xMove}px`);
      particle.style.setProperty('--y', `${yMove}px`);

      // Random animation duration
      const duration = Math.random() * 2 + 2;
      particle.style.animationDuration = `${duration}s`;

      container.appendChild(particle);

      // Remove particle after animation completes
      setTimeout(() => {
        if (particle.parentNode === container) {
          container.removeChild(particle);
        }
      }, duration * 1000);
    }

    // Handle text rotation if multiple texts are provided
    if (texts.length > 1) {
      let currentIndex = 0;

      // Apply initial delay if specified
      setTimeout(() => {
        const rotationInterval = setInterval(() => {
          currentIndex = (currentIndex + 1) % texts.length;

          if (animation === 'fade') {
            // Fade out, change text, fade in
            container.style.opacity = '0';
            setTimeout(() => {
              updateText(container, texts[currentIndex], animation);
              container.style.opacity = '1';
            }, 500);
          } else if (animation === 'slide') {
            // Slide out down, change text, slide in from top
            container.style.transform = 'translateY(20px)';
            container.style.opacity = '0';
            setTimeout(() => {
              updateText(container, texts[currentIndex], animation);
              container.style.transform = 'translateY(-20px)';
              setTimeout(() => {
                container.style.transform = 'translateY(0)';
                container.style.opacity = '1';
              }, 50);
            }, 500);
          } else if (animation === 'typewriter') {
            // For typewriter, we need to reset the animation
            container.style.animation = 'none';
            container.offsetHeight; // Trigger reflow
            updateText(container, texts[currentIndex], animation);
            container.style.width = '0';
            container.style.animation = `typing 3.5s steps(40, end) forwards, blink 1s step-end infinite`;
          } else if (animation === 'blur') {
            // Blur out, change text, blur in
            container.classList.add('blurred');
            setTimeout(() => {
              updateText(container, texts[currentIndex], animation);
              container.classList.remove('blurred');
            }, 500);
          } else if (animation === 'wave') {
            // For wave, we need to rebuild the letter spans
            container.innerHTML = '';
            for (let i = 0; i < texts[currentIndex].length; i++) {
              const letter = document.createElement('span');
              letter.className = 'letter';
              letter.textContent = texts[currentIndex][i];
              letter.style.animationDelay = `${i * (staggerDelay / 1000)}s`;
              container.appendChild(letter);
            }
          } else if (animation === 'neon') {
            // For neon, just update the text
            updateText(container, texts[currentIndex], animation);
          } else if (animation === 'bounce') {
            // For bounce, just update the text
            updateText(container, texts[currentIndex], animation);
          } else if (animation === 'flip') {
            // For flip, add the flipping class temporarily
            container.classList.add('flipping');
            setTimeout(() => {
              updateText(container, texts[currentIndex], animation);
              setTimeout(() => {
                container.classList.remove('flipping');
              }, 750);
            }, 750);
          } else if (animation === 'reveal') {
            // For reveal, we need to reset the animation
            const currentText = container.textContent;
            if (currentText !== texts[currentIndex]) {
              const wrapper = document.createElement('div');
              wrapper.className = 'reveal-text';
              wrapper.textContent = texts[currentIndex];
              container.innerHTML = '';
              container.appendChild(wrapper);
            }
          } else if (animation === 'particle') {
            // For particle, update text and recreate particles
            updateText(container, texts[currentIndex], animation);
            // Clear existing particles
            const particles = container.querySelectorAll('.particle');
            particles.forEach(p => p.remove());
            // Create new particles
            for (let i = 0; i < particleCount; i++) {
              createParticle(container);
            }
          } else if (animation === 'gradient') {
            // For gradient, just update the text
            updateText(container, texts[currentIndex], animation);
          } else if (animation === 'glitch') {
            // For glitch, update text and data-text attribute
            updateText(container, texts[currentIndex], animation);
          } else if (animation === '3d') {
            // For 3D, update text and trigger animation
            updateText(container, texts[currentIndex], animation);
            container.classList.add('active');
            setTimeout(() => {
              container.classList.remove('active');
            }, 1000);
          } else if (animation === 'highlight') {
            // For highlight, update text and trigger animation
            updateText(container, texts[currentIndex], animation);
            container.classList.add('highlighted');
            setTimeout(() => {
              container.classList.remove('highlighted');
            }, 1500);
          } else {
            // Default rotation (instant change)
            updateText(container, texts[currentIndex], animation);
          }
        }, rotationSpeed * 1000);

        // Store interval ID for potential cleanup
        container.dataset.intervalId = rotationInterval;
      }, initialDelay);
    }
  });

  // Helper function to update text with appropriate attributes
  function updateText(container, text, animation) {
    if (animation === 'wave') {
      // For wave, we handle this separately
      return;
    }

    container.textContent = text;

    // Update data attributes for specific animations
    if (animation === 'glitch') {
      container.setAttribute('data-text', text);
    }
  }
</script>
