---
/**
 * Service-Specific CTA Form Component
 * 
 * Replaces placeholder buttons on service pages with functional,
 * service-specific conversion forms that include:
 * - Dynamic form fields based on service type
 * - Social proof integration
 * - Urgency messaging
 * - Progressive disclosure
 * - Real-time validation
 */

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';
import { Button } from '@/components/ui/Button';
import { 
  conversionConfig, 
  getServiceFormConfig, 
  getUrgencyMessage, 
  getTestimonialByService,
  getCTAVariant,
  type ServiceFormConfig 
} from '@/config/conversion-config';
import { CheckCircle, Star, Clock, Users, ArrowRight } from 'lucide-react';

interface Props {
  /**
   * Service slug to determine form configuration
   */
  serviceSlug: string;
  
  /**
   * Service name for display
   */
  serviceName: string;
  
  /**
   * Service price for value proposition
   */
  servicePrice: string;
  
  /**
   * Service timeline for urgency
   */
  serviceTimeline: string;
  
  /**
   * Form variant - inline or modal
   */
  variant?: 'inline' | 'modal';
  
  /**
   * Additional CSS classes
   */
  class?: string;
  
  /**
   * Show social proof section
   */
  showSocialProof?: boolean;
  
  /**
   * Show urgency banner
   */
  showUrgency?: boolean;
}

const {
  serviceSlug,
  serviceName,
  servicePrice,
  serviceTimeline,
  variant = 'inline',
  class: className = '',
  showSocialProof = true,
  showUrgency = true
} = Astro.props;

// Get service-specific configuration
const formConfig = getServiceFormConfig(serviceSlug);
const urgencyMessage = getUrgencyMessage('consultation');
const testimonial = getTestimonialByService(serviceSlug);
const ctaVariant = getCTAVariant('primary', serviceSlug);

// Fallback configuration if service not found
const defaultConfig: ServiceFormConfig = {
  serviceSlug: 'default',
  formFields: [
    {
      id: 'project-description',
      type: 'textarea',
      label: 'Project Description',
      placeholder: 'Tell us about your project...',
      required: true
    },
    {
      id: 'timeline',
      type: 'select',
      label: 'Timeline',
      placeholder: 'When do you need this completed?',
      required: true,
      options: [
        'ASAP',
        'Within 1 month',
        '1-2 months',
        '2-3 months',
        '3+ months',
        'Flexible'
      ]
    },
    {
      id: 'budget',
      type: 'select',
      label: 'Budget Range',
      placeholder: 'Select budget range',
      required: true,
      options: [
        '$2,000 - $5,000',
        '$5,000 - $10,000',
        '$10,000 - $25,000',
        '$25,000 - $50,000',
        '$50,000+',
        'Not sure yet'
      ]
    }
  ],
  ctaText: 'Get Started',
  valueProposition: 'Professional solutions tailored to your needs'
};

const config = formConfig || defaultConfig;

// Generate form ID for JavaScript targeting
const formId = `service-cta-form-${serviceSlug}`;
---

<div class={`service-cta-form ${className}`}>
  <!-- Urgency Banner -->
  {showUrgency && (
    <div class="mb-6 p-4 bg-gradient-to-r from-orange-50 to-red-50 border border-orange-200 rounded-lg">
      <div class="flex items-center gap-2">
        <Clock className="w-5 h-5 text-orange-600" />
        <p class="text-sm font-medium text-orange-800">{urgencyMessage}</p>
      </div>
    </div>
  )}

  <!-- Main Form Card -->
  <Card className="shadow-lg border-2 border-brand-blue-100 hover:border-brand-blue-300 transition-all duration-300">
    <CardHeader>
      <CardTitle className="text-2xl text-brand-blue-600">
        {config.ctaText}
      </CardTitle>
      <p class="text-neutral-600 leading-relaxed">
        {config.valueProposition}
      </p>
      
      <!-- Value Indicators -->
      <div class="flex flex-wrap gap-4 mt-4">
        <div class="flex items-center gap-2 text-sm text-neutral-600">
          <CheckCircle className="w-4 h-4 text-green-500" />
          <span>Starting from {servicePrice}</span>
        </div>
        <div class="flex items-center gap-2 text-sm text-neutral-600">
          <Clock className="w-4 h-4 text-blue-500" />
          <span>{serviceTimeline} delivery</span>
        </div>
        <div class="flex items-center gap-2 text-sm text-neutral-600">
          <Users className="w-4 h-4 text-purple-500" />
          <span>Free consultation included</span>
        </div>
      </div>
    </CardHeader>
    
    <CardContent>
      <form 
        id={formId}
        class="space-y-6"
        action="/api/service-inquiry"
        method="POST"
        data-service-slug={serviceSlug}
      >
        <!-- Hidden fields for tracking -->
        <input type="hidden" name="service" value={serviceSlug} />
        <input type="hidden" name="serviceName" value={serviceName} />
        <input type="hidden" name="source" value="service-page-cta" />
        
        <!-- Contact Information -->
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div class="flex flex-col">
            <label for={`${formId}-name`} class="text-sm font-medium mb-2 text-neutral-700">
              Your Name <span class="text-red-500">*</span>
            </label>
            <input
              type="text"
              id={`${formId}-name`}
              name="name"
              class="form-input px-4 py-3 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-brand-blue-500 focus:border-transparent transition-all duration-200"
              required
              placeholder="John Doe"
              aria-label="Your full name"
            />
            <div class="validation-message text-red-500 text-xs mt-1 hidden" role="alert"></div>
          </div>
          
          <div class="flex flex-col">
            <label for={`${formId}-email`} class="text-sm font-medium mb-2 text-neutral-700">
              Email Address <span class="text-red-500">*</span>
            </label>
            <input
              type="email"
              id={`${formId}-email`}
              name="email"
              class="form-input px-4 py-3 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-brand-blue-500 focus:border-transparent transition-all duration-200"
              required
              placeholder="john@example.com"
              aria-label="Your email address"
            />
            <div class="validation-message text-red-500 text-xs mt-1 hidden" role="alert"></div>
          </div>
        </div>
        
        <!-- Service-Specific Fields -->
        {config.formFields.map((field) => (
          <div class="flex flex-col">
            <label for={`${formId}-${field.id}`} class="text-sm font-medium mb-2 text-neutral-700">
              {field.label} {field.required && <span class="text-red-500">*</span>}
            </label>
            
            {field.type === 'select' && (
              <select
                id={`${formId}-${field.id}`}
                name={field.id}
                class="form-select px-4 py-3 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-brand-blue-500 focus:border-transparent transition-all duration-200"
                required={field.required}
              >
                <option value="" disabled selected>{field.placeholder}</option>
                {field.options?.map(option => (
                  <option value={option}>{option}</option>
                ))}
              </select>
            )}
            
            {field.type === 'textarea' && (
              <textarea
                id={`${formId}-${field.id}`}
                name={field.id}
                class="form-textarea px-4 py-3 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-brand-blue-500 focus:border-transparent transition-all duration-200 resize-vertical"
                required={field.required}
                placeholder={field.placeholder}
                rows="4"
              ></textarea>
            )}
            
            {field.type === 'checkbox' && (
              <div class="space-y-2">
                {field.options?.map(option => (
                  <label class="flex items-center gap-2">
                    <input
                      type="checkbox"
                      name={field.id}
                      value={option}
                      class="w-4 h-4 text-brand-blue-600 border-neutral-300 rounded focus:ring-brand-blue-500"
                    />
                    <span class="text-sm text-neutral-700">{option}</span>
                  </label>
                ))}
              </div>
            )}
            
            {field.type === 'text' && (
              <input
                type="text"
                id={`${formId}-${field.id}`}
                name={field.id}
                class="form-input px-4 py-3 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-brand-blue-500 focus:border-transparent transition-all duration-200"
                required={field.required}
                placeholder={field.placeholder}
              />
            )}
            
            <div class="validation-message text-red-500 text-xs mt-1 hidden" role="alert"></div>
          </div>
        ))}
        
        <!-- Additional Message -->
        <div class="flex flex-col">
          <label for={`${formId}-message`} class="text-sm font-medium mb-2 text-neutral-700">
            Additional Details
          </label>
          <textarea
            id={`${formId}-message`}
            name="message"
            class="form-textarea px-4 py-3 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-brand-blue-500 focus:border-transparent transition-all duration-200 resize-vertical"
            placeholder="Any additional details about your project or requirements..."
            rows="3"
          ></textarea>
        </div>
        
        <!-- Submit Button -->
        <div class="flex flex-col space-y-4">
          <Button
            type="submit"
            variant="primary"
            size="lg"
            class="w-full submit-button"
            animated={true}
          >
            <span>{config.ctaText}</span>
            <ArrowRight className="w-5 h-5 ml-2" />
          </Button>
          
          <p class="text-xs text-neutral-500 text-center">
            We'll respond within 24 hours with a detailed proposal
          </p>
        </div>
        
        <!-- Form Status Message -->
        <div class="form-message mt-4 px-4 py-3 rounded-lg text-sm font-medium text-center hidden" role="alert" aria-live="polite"></div>
      </form>
    </CardContent>
  </Card>
  
  <!-- Social Proof Section -->
  {showSocialProof && testimonial && (
    <div class="mt-8 p-6 bg-gradient-to-r from-gray-50 to-blue-50 rounded-lg border border-gray-200">
      <div class="flex items-start gap-4">
        <img 
          src={testimonial.avatar} 
          alt={`${testimonial.author} headshot`}
          class="w-12 h-12 rounded-full object-cover flex-shrink-0"
          loading="lazy"
        />
        <div class="flex-1">
          <div class="flex items-center gap-1 mb-2">
            {Array.from({ length: testimonial.rating }).map((_, i) => (
              <Star className="w-4 h-4 text-yellow-400 fill-current" />
            ))}
          </div>
          <blockquote class="text-sm text-gray-700 italic mb-2">
            "{testimonial.quote}"
          </blockquote>
          <div class="text-xs text-gray-600">
            <strong>{testimonial.author}</strong>, {testimonial.role} at {testimonial.company}
          </div>
          {testimonial.results && (
            <div class="flex flex-wrap gap-2 mt-2">
              {testimonial.results.map(result => (
                <span class="px-2 py-1 bg-green-100 text-green-700 text-xs rounded-full">
                  {result}
                </span>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  )}
</div>

<!-- JavaScript for form handling -->
<script define:vars={{ formId, serviceSlug, serviceName }}>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById(formId);
    const formMessage = form?.querySelector('.form-message');
    const submitButton = form?.querySelector('.submit-button');
    
    if (!form || !formMessage || !submitButton) return;
    
    // Form validation
    const validateField = (field) => {
      const errorElement = field.parentElement.querySelector('.validation-message');
      let isValid = true;
      let errorMessage = '';
      
      // Clear previous validation
      field.classList.remove('border-red-500', 'border-green-500');
      if (errorElement) {
        errorElement.textContent = '';
        errorElement.classList.add('hidden');
      }
      
      // Required field validation
      if (field.hasAttribute('required') && !field.value.trim()) {
        errorMessage = 'This field is required';
        isValid = false;
      }
      // Email validation
      else if (field.type === 'email' && field.value.trim()) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(field.value.trim())) {
          errorMessage = 'Please enter a valid email address';
          isValid = false;
        }
      }
      // Name validation
      else if (field.name === 'name' && field.value.trim() && field.value.trim().length < 2) {
        errorMessage = 'Name must be at least 2 characters long';
        isValid = false;
      }
      
      // Apply validation styling
      if (!isValid) {
        field.classList.add('border-red-500');
        if (errorElement) {
          errorElement.textContent = errorMessage;
          errorElement.classList.remove('hidden');
        }
      } else if (field.value.trim()) {
        field.classList.add('border-green-500');
      }
      
      return isValid;
    };
    
    // Real-time validation
    const inputs = form.querySelectorAll('input, textarea, select');
    inputs.forEach(input => {
      input.addEventListener('blur', () => validateField(input));
      input.addEventListener('input', () => {
        if (input.classList.contains('border-red-500')) {
          validateField(input);
        }
      });
    });
    
    // Form submission
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Validate all fields
      let isFormValid = true;
      inputs.forEach(input => {
        if (!validateField(input)) {
          isFormValid = false;
        }
      });
      
      if (!isFormValid) {
        const firstError = form.querySelector('.border-red-500');
        if (firstError) {
          firstError.focus();
          firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
        return;
      }
      
      // Show loading state
      const originalButtonText = submitButton.innerHTML;
      submitButton.innerHTML = '<span>Sending...</span><svg class="animate-spin w-5 h-5 ml-2" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>';
      submitButton.disabled = true;
      
      try {
        const formData = new FormData(form);
        
        // Add additional tracking data
        formData.append('timestamp', new Date().toISOString());
        formData.append('userAgent', navigator.userAgent);
        formData.append('referrer', document.referrer);
        
        const response = await fetch('/api/service-inquiry', {
          method: 'POST',
          body: formData
        });
        
        const result = await response.json();
        
        if (!response.ok || !result.success) {
          throw new Error(result.error || 'Failed to submit form');
        }
        
        // Success
        formMessage.textContent = result.message || 'Thank you! We\'ll get back to you within 24 hours.';
        formMessage.className = 'form-message mt-4 px-4 py-3 rounded-lg text-sm font-medium text-center bg-green-50 border border-green-200 text-green-800';
        formMessage.classList.remove('hidden');
        
        // Reset form
        form.reset();
        inputs.forEach(input => {
          input.classList.remove('border-red-500', 'border-green-500');
        });
        
        // Track conversion
        if (typeof gtag !== 'undefined') {
          gtag('event', 'conversion', {
            event_category: 'Service Inquiry',
            event_label: serviceName,
            value: 1
          });
        }
        
      } catch (error) {
        console.error('Form submission error:', error);
        formMessage.textContent = 'There was an error submitting your request. Please try again.';
        formMessage.className = 'form-message mt-4 px-4 py-3 rounded-lg text-sm font-medium text-center bg-red-50 border border-red-200 text-red-800';
        formMessage.classList.remove('hidden');
      } finally {
        // Reset button
        submitButton.innerHTML = originalButtonText;
        submitButton.disabled = false;
        
        // Scroll to message
        formMessage.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
      }
    });
  });
</script>

<!-- CSS for enhanced styling -->
<style>
  .service-cta-form {
    position: relative;
  }
  
  .form-input, .form-textarea, .form-select {
    transition: all 0.2s ease;
  }
  
  .form-input:focus, .form-textarea:focus, .form-select:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
  }
  
  .submit-button {
    position: relative;
    overflow: hidden;
  }
  
  .submit-button:hover {
    transform: translateY(-1px);
    box-shadow: 0 10px 25px -5px rgba(0, 123, 255, 0.25);
  }
  
  .submit-button:disabled {
    cursor: not-allowed;
    opacity: 0.7;
    transform: none;
  }
  
  .validation-message {
    font-size: 0.75rem;
    line-height: 1.25;
  }
  
  /* Loading spinner animation */
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
  
  .animate-spin {
    animation: spin 1s linear infinite;
  }
</style>