---
// Modern floating elements for enhanced visual appeal
interface Props {
  elementCount?: number;
  theme?: 'purple' | 'orange' | 'mixed';
  intensity?: 'subtle' | 'medium' | 'strong';
}

const { 
  elementCount = 12, 
  theme = 'mixed',
  intensity = 'medium' 
} = Astro.props;
---

<div class="floating-elements absolute inset-0 overflow-hidden pointer-events-none">
  <div id="floating-container" class="relative w-full h-full">
    <!-- Floating elements will be generated by JavaScript -->
  </div>
</div>

<style>
  @keyframes float-gentle {
    0%, 100% { 
      transform: translateY(0px) translateX(0px) rotate(0deg) scale(1);
      opacity: 0.3;
    }
    25% { 
      transform: translateY(-15px) translateX(8px) rotate(45deg) scale(1.1);
      opacity: 0.6;
    }
    50% { 
      transform: translateY(-8px) translateX(-12px) rotate(90deg) scale(0.9);
      opacity: 0.4;
    }
    75% { 
      transform: translateY(-20px) translateX(5px) rotate(135deg) scale(1.05);
      opacity: 0.7;
    }
  }

  @keyframes float-medium {
    0%, 100% { 
      transform: translateY(0px) translateX(0px) rotate(0deg) scale(1);
      opacity: 0.4;
    }
    25% { 
      transform: translateY(-25px) translateX(15px) rotate(60deg) scale(1.2);
      opacity: 0.8;
    }
    50% { 
      transform: translateY(-12px) translateX(-18px) rotate(120deg) scale(0.8);
      opacity: 0.5;
    }
    75% { 
      transform: translateY(-30px) translateX(10px) rotate(180deg) scale(1.1);
      opacity: 0.9;
    }
  }

  @keyframes float-strong {
    0%, 100% { 
      transform: translateY(0px) translateX(0px) rotate(0deg) scale(1);
      opacity: 0.5;
    }
    25% { 
      transform: translateY(-35px) translateX(20px) rotate(90deg) scale(1.3);
      opacity: 1;
    }
    50% { 
      transform: translateY(-18px) translateX(-25px) rotate(180deg) scale(0.7);
      opacity: 0.6;
    }
    75% { 
      transform: translateY(-40px) translateX(15px) rotate(270deg) scale(1.2);
      opacity: 0.9;
    }
  }

  .floating-element {
    position: absolute;
    border-radius: 50%;
    background: linear-gradient(45deg, currentColor, transparent);
    filter: blur(1px);
  }

  .floating-element.subtle {
    animation: float-gentle 10s ease-in-out infinite;
  }

  .floating-element.medium {
    animation: float-medium 8s ease-in-out infinite;
  }

  .floating-element.strong {
    animation: float-strong 6s ease-in-out infinite;
  }

  .floating-element:nth-child(even) {
    animation-direction: reverse;
  }

  .floating-element:nth-child(3n) {
    animation-delay: -3s;
  }

  .floating-element:nth-child(4n) {
    animation-delay: -6s;
  }

  .floating-element:nth-child(5n) {
    animation-delay: -9s;
  }

  /* Geometric shapes */
  .floating-element.triangle {
    border-radius: 0;
    width: 0;
    height: 0;
    background: none;
    border-left: 8px solid transparent;
    border-right: 8px solid transparent;
    border-bottom: 14px solid currentColor;
  }

  .floating-element.square {
    border-radius: 2px;
  }

  .floating-element.diamond {
    border-radius: 0;
    transform: rotate(45deg);
  }
</style>

<script define:vars={{ elementCount, theme, intensity }}>
  document.addEventListener('DOMContentLoaded', function() {
    const container = document.getElementById('floating-container');
    if (!container) return;

    const colors = {
      purple: ['#7c3aed', '#a855f7', '#8b5cf6'],
      orange: ['#ff6b35', '#ff8c42', '#f97316'],
      mixed: ['#7c3aed', '#ff6b35', '#a855f7', '#ff8c42', '#8b5cf6', '#f97316']
    };

    const shapes = ['circle', 'triangle', 'square', 'diamond'];
    const sizes = ['w-2 h-2', 'w-3 h-3', 'w-4 h-4', 'w-1 h-1'];

    // Create floating elements
    for (let i = 0; i < elementCount; i++) {
      const element = document.createElement('div');
      const shape = shapes[Math.floor(Math.random() * shapes.length)];
      const size = sizes[Math.floor(Math.random() * sizes.length)];
      const colorArray = colors[theme];
      const color = colorArray[Math.floor(Math.random() * colorArray.length)];

      element.className = `floating-element ${intensity} ${shape} ${size}`;
      element.style.color = color;
      element.style.left = Math.random() * 100 + '%';
      element.style.top = Math.random() * 100 + '%';
      element.style.animationDelay = Math.random() * 10 + 's';
      element.style.animationDuration = (6 + Math.random() * 6) + 's';
      
      container.appendChild(element);
    }
  });
</script>
