---
// YouTubeEmbed.astro
// Enhanced YouTube embed component with improved error handling and accessibility

export interface Props {
  videoId: string;
  title?: string;
  width?: string;
  height?: string;
  aspectRatio?: string;
  autoplay?: boolean;
  mute?: boolean;
  controls?: boolean;
  showInfo?: boolean;
  rel?: boolean;
  modestBranding?: boolean;
  enablejsapi?: boolean;
  loop?: boolean;
  start?: number;
  playsInline?: boolean;
  loading?: 'lazy' | 'eager';
  importance?: 'high' | 'low' | 'auto';
  className?: string;
}

const {
  videoId,
  title = `YouTube video ${videoId}`,
  width = "100%",
  height = "auto",
  aspectRatio = "16/9",
  autoplay = false,
  mute = false,
  controls = true,
  showInfo = false,
  rel = false,
  modestBranding = true,
  enablejsapi = true,
  loop = false,
  start = 0,
  playsInline = true,
  loading = 'lazy',
  importance = 'high',
  className = ''
} = Astro.props;

// Generate a unique ID for this embed
const embedId = `youtube-embed-${Math.random().toString(36).substring(2, 9)}`;

// Build the embed URL with parameters
let embedUrl = `https://www.youtube.com/embed/${videoId}?`;
const params = [];

if (autoplay) params.push('autoplay=1');
if (mute) params.push('mute=1');
if (!controls) params.push('controls=0');
if (!showInfo) params.push('showinfo=0');
if (!rel) params.push('rel=0');
if (modestBranding) params.push('modestbranding=1');
if (enablejsapi) params.push('enablejsapi=1');
if (loop) {
  params.push('loop=1');
  params.push(`playlist=${videoId}`); // Required for loop to work
}
if (start > 0) params.push(`start=${start}`);
if (playsInline) params.push('playsinline=1');

embedUrl += params.join('&');

// Direct link to the video on YouTube
const youtubeUrl = `https://www.youtube.com/watch?v=${videoId}`;
---

<div id={embedId} class={`youtube-embed-container ${className}`} style={`aspect-ratio: ${aspectRatio};`}>
  <!-- Fallback display when iframe fails to load -->
  <div class="youtube-fallback">
    <div class="fallback-content">
      <img
        src="/images/youtube-logo.png"
        alt="YouTube"
        class="fallback-logo"
        onerror="this.src='/images/placeholder.svg'; this.onerror=null;"
      />
      <h3 class="fallback-title">{title}</h3>
      <p class="fallback-message">
        <strong>The video cannot be displayed due to security restrictions.</strong>
        Please try refreshing the page or view it directly on YouTube.
      </p>
      <a
        href={youtubeUrl}
        target="_blank"
        rel="noopener noreferrer"
        class="fallback-link"
      >
        Watch on YouTube
      </a>
    </div>
  </div>

  <!-- The iframe with improved attributes and error handling -->
  <iframe
    src={embedUrl}
    title={title}
    width={width}
    height={height}
    frameborder="0"
    allowfullscreen="true"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    loading={loading}
    class="youtube-embed"
    sandbox="allow-scripts allow-same-origin allow-popups allow-presentation allow-forms"
    onload="try {
      if (this.contentWindow && this.contentDocument) {
        console.log('YouTube embed loaded successfully');
        this.style.display='block';
        this.previousElementSibling.style.display='none';
      } else {
        throw new Error('Cannot access iframe content');
      }
    } catch(e) {
      console.error('YouTube embed load error:', e);
      this.style.display='none';
      this.previousElementSibling.style.display='flex';
    }"
    onerror="try {
      console.error('YouTube embed error');
      this.style.display='none';
      this.previousElementSibling.style.display='flex';
    } catch(e) {
      console.error('YouTube embed error handler error:', e);
    }"
    referrerpolicy="origin"
    importance={importance}
  ></iframe>

  <!-- Refresh button for iframe -->
  <button id={`refresh-${embedId}`} class="youtube-refresh-button">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
    </svg>
    <span>Refresh Video</span>
  </button>
</div>

<style>
  .youtube-embed-container {
    position: relative;
    width: 100%;
    overflow: hidden;
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    background-color: #000;
    margin-bottom: 1.5rem;
  }

  .youtube-embed {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: none;
    border-radius: 0.5rem;
  }

  .youtube-fallback {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: rgba(0, 0, 0, 0.8);
    color: white;
    text-align: center;
    padding: 1rem;
    border-radius: 0.5rem;
    z-index: 5;
  }

  .fallback-content {
    max-width: 80%;
  }

  .fallback-logo {
    width: 100px;
    height: auto;
    margin: 0 auto 1rem;
  }

  .fallback-title {
    font-size: 1.25rem;
    font-weight: bold;
    margin-bottom: 0.5rem;
  }

  .fallback-message {
    margin-bottom: 1rem;
    font-size: 0.9rem;
    line-height: 1.4;
  }

  .fallback-link {
    display: inline-block;
    background-color: var(--nosyt-orange-main);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 0.25rem;
    font-weight: bold;
    text-decoration: none;
    transition: background-color 0.2s ease;
  }

  .fallback-link:hover {
    background-color: var(--nosyt-orange-dark);
  }

  .youtube-refresh-button {
    position: absolute;
    bottom: 1rem;
    right: 1rem;
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    border: none;
    border-radius: 0.25rem;
    padding: 0.5rem 0.75rem;
    font-size: 0.8rem;
    display: flex;
    align-items: center;
    gap: 0.25rem;
    cursor: pointer;
    z-index: 10;
    opacity: 0;
    transition: opacity 0.3s ease, background-color 0.2s ease;
  }

  .youtube-embed-container:hover .youtube-refresh-button {
    opacity: 1;
  }

  .youtube-refresh-button:hover {
    background-color: rgba(0, 0, 0, 0.9);
  }

  /* Dark mode adjustments */
  :global(.dark) .youtube-fallback {
    background-color: rgba(0, 0, 0, 0.9);
  }

  :global(.dark) .fallback-link {
    background-color: var(--nosyt-orange-light);
  }

  :global(.dark) .fallback-link:hover {
    background-color: var(--nosyt-orange-main);
  }
</style>

<script define:vars={{ embedId }}>
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById(embedId);
    if (!container) return;

    const refreshButton = document.getElementById(`refresh-${embedId}`);
    const iframe = container.querySelector('iframe');
    const fallback = container.querySelector('.youtube-fallback');

    if (refreshButton && iframe && fallback) {
      // Initial check if iframe loaded correctly
      setTimeout(() => {
        try {
          if (iframe.contentWindow && iframe.contentDocument) {
            console.log('YouTube embed initial check passed');
          } else {
            console.warn('YouTube embed may not be loaded correctly');
            iframe.style.display = 'none';
            fallback.style.display = 'flex';
          }
        } catch (e) {
          console.error('YouTube embed access error:', e);
          iframe.style.display = 'none';
          fallback.style.display = 'flex';
        }
      }, 3000); // Check after 3 seconds

      refreshButton.addEventListener('click', () => {
        // Add rotation animation to the refresh button
        refreshButton.style.transition = 'transform 1s ease';
        refreshButton.style.transform = 'rotate(360deg)';
        
        // Show loading state
        refreshButton.textContent = 'Loading...';
        refreshButton.disabled = true;
        
        // Reset rotation after animation completes
        setTimeout(() => {
          refreshButton.style.transition = 'none';
          refreshButton.style.transform = 'rotate(0deg)';
          setTimeout(() => {
            refreshButton.style.transition = 'transform 1s ease';
          }, 50);
        }, 1000);
        
        // Reload the iframe with a new cache-busting parameter
        const originalSrc = iframe.src.split('?')[0];
        const params = new URLSearchParams(iframe.src.split('?')[1]);
        const cacheBuster = Date.now();
        params.set('cache', cacheBuster.toString());
        iframe.src = `${originalSrc}?${params.toString()}`;
        
        // Show iframe, hide fallback
        iframe.style.display = 'block';
        fallback.style.display = 'none';
        
        // Reset button after 2 seconds
        setTimeout(() => {
          refreshButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
            <span>Refresh Video</span>
          `;
          refreshButton.disabled = false;
        }, 2000);
      });
    }
  });
</script>
