---
/**
 * Modern Header Component for NosytLabs
 * A clean, professional header with responsive navigation
 */

// Define props interface
interface Props {
  currentPath?: string;
}

// Get current path from props or Astro.url
const { currentPath = Astro.url.pathname } = Astro.props;

// Navigation items
const navItems = [
  { name: "Home", path: "/" },
  { name: "Projects", path: "/projects" },
  { name: "Content Creation", path: "/content-creation" },
  { name: "3D Printing", path: "/3d-printing" },
  { name: "Passive Income", path: "/passive-income" },
  { name: "Home", path: "/" },
  { name: "NosytOS95", path: "/nosytos95" },
  { name: "Contact", path: "/contact" }
];

// Check if a nav item is active
const isActive = (path: string) => {
  if (path === "/" && currentPath === "/") return true;
  if (path !== "/" && currentPath.startsWith(path)) return true;
  return false;
};
---

<header class="site-header bg-white dark:bg-gray-900 shadow-md">
  <div class="container mx-auto px-4">
    <div class="flex items-center justify-between py-4">
      <!-- Logo -->
      <a href="/" class="flex items-center space-x-2 group">
        <div class="w-10 h-10 flex items-center justify-center overflow-hidden">
          <img
            src="/images/nosytlabs-logo-2025.svg"
            alt="NosytLabs Logo"
            width="40"
            height="40"
            class="transition-transform duration-300 group-hover:scale-110"
          />
        </div>
        <span class="text-xl font-bold text-primary dark:text-primary-light transition-colors duration-300">
          NosytLabs
        </span>
      </a>

      <!-- Desktop Navigation -->
      <nav class="hidden md:flex items-center space-x-6">
        {navItems.map((item) => (
          <a
            href={item.path}
            class={`
              text-sm font-medium transition-colors duration-300 relative
              ${isActive(item.path)
                ? 'text-primary dark:text-primary-light'
                : 'text-gray-700 hover:text-primary dark:text-gray-300 dark:hover:text-primary-light'}
            `}
          >
            {item.name}
            {isActive(item.path) && (
              <span class="absolute -bottom-1.5 left-0 w-full h-0.5 bg-accent rounded-full"></span>
            )}
          </a>
        ))}
      </nav>

      <!-- Mobile Menu Button -->
      <button
        id="mobile-menu-button"
        class="md:hidden flex items-center p-2 rounded-md text-gray-700 hover:text-primary dark:text-gray-300 dark:hover:text-primary-light"
        aria-label="Toggle mobile menu"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>
    </div>
  </div>

  <!-- Mobile Navigation -->
  <div id="mobile-menu" class="md:hidden hidden bg-white dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700">
    <div class="container mx-auto px-4 py-3">
      <nav class="flex flex-col space-y-3">
        {navItems.map((item) => (
          <a
            href={item.path}
            class={`
              py-2 px-3 rounded-md transition-colors duration-300
              ${isActive(item.path)
                ? 'bg-gray-100 dark:bg-gray-800 text-primary dark:text-primary-light'
                : 'text-gray-700 hover:bg-gray-50 dark:text-gray-300 dark:hover:bg-gray-800'}
            `}
          >
            {item.name}
          </a>
        ))}
      </nav>
    </div>
  </div>
</header>

<script>
  // Mobile menu toggle
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');

    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', () => {
        // Toggle mobile menu
        mobileMenu.classList.toggle('hidden');

        // Toggle button icon between menu and close
        const svg = mobileMenuButton.querySelector('svg');
        if (svg) {
          if (mobileMenu.classList.contains('hidden')) {
            svg.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />';
          } else {
            svg.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />';
          }
        }
      });

      // Close mobile menu when clicking outside
      document.addEventListener('click', (event) => {
        if (!mobileMenuButton.contains(event.target as Node) &&
            !mobileMenu.contains(event.target as Node) &&
            !mobileMenu.classList.contains('hidden')) {
          mobileMenu.classList.add('hidden');
          const svg = mobileMenuButton.querySelector('svg');
          if (svg) {
            svg.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />';
          }
        }
      });
    }
  });
</script>

<style>
  .site-header {
    position: sticky;
    top: 0;
    z-index: 50;
    width: 100%;
    transition: all 0.3s ease-in-out;
  }

  /* Header scroll effect */
  .header-scrolled {
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }

  .header-hidden {
    transform: translateY(-100%);
  }

  /* Mobile menu animation */
  #mobile-menu {
    transition: all 0.3s ease-in-out;
    max-height: 0;
    overflow: hidden;
  }

  #mobile-menu:not(.hidden) {
    max-height: 500px;
  }
</style>
