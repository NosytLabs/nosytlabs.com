---
/**
 * Performance Dashboard Component
 * Real-time Core Web Vitals monitoring and optimization insights
 */

interface Props {
  /** Show dashboard in development mode only */
  devOnly?: boolean;
  /** Position of the dashboard */
  position?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
  /** Compact mode */
  compact?: boolean;
}

const {
  devOnly = true,
  position = 'bottom-right',
  compact = false
} = Astro.props;

// Only show in development or when explicitly enabled
const isDev = import.meta.env.DEV;
const shouldShow = !devOnly || isDev;
---

{shouldShow && (
  <div 
    id="performance-dashboard"
    class={`performance-dashboard ${position} ${compact ? 'compact' : ''}`}
    data-position={position}
    data-compact={compact}
  >
    <!-- Dashboard Header -->
    <div class="dashboard-header">
      <div class="dashboard-title">
        <span class="title-text">Performance</span>
        <div class="status-indicator" id="status-indicator">
          <div class="status-dot"></div>
        </div>
      </div>
      <button class="toggle-button" id="dashboard-toggle" aria-label="Toggle performance dashboard">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="6,9 12,15 18,9"></polyline>
        </svg>
      </button>
    </div>

    <!-- Dashboard Content -->
    <div class="dashboard-content" id="dashboard-content">
      <!-- Core Web Vitals -->
      <div class="metrics-section">
        <h3 class="section-title">Core Web Vitals</h3>
        <div class="metrics-grid">
          <div class="metric-card" data-metric="lcp">
            <div class="metric-label">LCP</div>
            <div class="metric-value" id="lcp-value">-</div>
            <div class="metric-status" id="lcp-status"></div>
          </div>
          <div class="metric-card" data-metric="fid">
            <div class="metric-label">FID</div>
            <div class="metric-value" id="fid-value">-</div>
            <div class="metric-status" id="fid-status"></div>
          </div>
          <div class="metric-card" data-metric="cls">
            <div class="metric-label">CLS</div>
            <div class="metric-value" id="cls-value">-</div>
            <div class="metric-status" id="cls-status"></div>
          </div>
        </div>
      </div>

      <!-- Performance Score -->
      <div class="score-section">
        <h3 class="section-title">Performance Score</h3>
        <div class="score-display">
          <div class="score-circle" id="score-circle">
            <div class="score-value" id="score-value">-</div>
          </div>
          <div class="score-grade" id="score-grade">-</div>
        </div>
      </div>

      <!-- Additional Metrics -->
      <div class="additional-metrics">
        <h3 class="section-title">Additional Metrics</h3>
        <div class="metric-list">
          <div class="metric-item">
            <span class="metric-name">FCP</span>
            <span class="metric-value" id="fcp-value">-</span>
          </div>
          <div class="metric-item">
            <span class="metric-name">TTFB</span>
            <span class="metric-value" id="ttfb-value">-</span>
          </div>
          <div class="metric-item">
            <span class="metric-name">Images</span>
            <span class="metric-value" id="images-value">-</span>
          </div>
        </div>
      </div>

      <!-- Recommendations -->
      <div class="recommendations-section" id="recommendations-section" style="display: none;">
        <h3 class="section-title">Recommendations</h3>
        <div class="recommendations-list" id="recommendations-list"></div>
      </div>
    </div>
  </div>
)}

<style>
  .performance-dashboard {
    position: fixed;
    z-index: 9999;
    background: rgba(0, 0, 0, 0.9);
    backdrop-filter: blur(10px);
    border-radius: 8px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    color: white;
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    font-size: 12px;
    min-width: 280px;
    max-width: 320px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    transition: all 0.3s ease;
  }

  .performance-dashboard.top-left {
    top: 20px;
    left: 20px;
  }

  .performance-dashboard.top-right {
    top: 20px;
    right: 20px;
  }

  .performance-dashboard.bottom-left {
    bottom: 20px;
    left: 20px;
  }

  .performance-dashboard.bottom-right {
    bottom: 20px;
    right: 20px;
  }

  .performance-dashboard.compact {
    min-width: 200px;
    max-width: 240px;
  }

  .dashboard-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 12px 16px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    cursor: pointer;
  }

  .dashboard-title {
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .title-text {
    font-weight: 600;
    font-size: 14px;
  }

  .status-indicator {
    display: flex;
    align-items: center;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: #10b981;
    animation: pulse 2s infinite;
  }

  .status-dot.warning {
    background: #f59e0b;
  }

  .status-dot.error {
    background: #ef4444;
  }

  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
  }

  .toggle-button {
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    padding: 4px;
    border-radius: 4px;
    transition: background 0.2s ease;
  }

  .toggle-button:hover {
    background: rgba(255, 255, 255, 0.1);
  }

  .toggle-button svg {
    transition: transform 0.3s ease;
  }

  .dashboard-content {
    padding: 16px;
    max-height: 400px;
    overflow-y: auto;
  }

  .dashboard-content.collapsed {
    display: none;
  }

  .section-title {
    margin: 0 0 12px 0;
    font-size: 12px;
    font-weight: 600;
    color: #9ca3af;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .metrics-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 8px;
    margin-bottom: 20px;
  }

  .metric-card {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 6px;
    padding: 12px 8px;
    text-align: center;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .metric-label {
    font-size: 10px;
    color: #9ca3af;
    margin-bottom: 4px;
    font-weight: 500;
  }

  .metric-value {
    font-size: 16px;
    font-weight: 700;
    margin-bottom: 4px;
  }

  .metric-status {
    width: 12px;
    height: 3px;
    border-radius: 2px;
    margin: 0 auto;
    background: #6b7280;
  }

  .metric-status.good {
    background: #10b981;
  }

  .metric-status.needs-improvement {
    background: #f59e0b;
  }

  .metric-status.poor {
    background: #ef4444;
  }

  .score-section {
    margin-bottom: 20px;
  }

  .score-display {
    display: flex;
    align-items: center;
    gap: 16px;
  }

  .score-circle {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background: conic-gradient(#10b981 0deg, #6b7280 0deg);
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .score-circle::before {
    content: '';
    position: absolute;
    inset: 4px;
    border-radius: 50%;
    background: rgba(0, 0, 0, 0.9);
  }

  .score-value {
    position: relative;
    z-index: 1;
    font-size: 18px;
    font-weight: 700;
  }

  .score-grade {
    font-size: 24px;
    font-weight: 700;
  }

  .score-grade.A { color: #10b981; }
  .score-grade.B { color: #3b82f6; }
  .score-grade.C { color: #f59e0b; }
  .score-grade.D { color: #f97316; }
  .score-grade.F { color: #ef4444; }

  .metric-list {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .metric-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px 12px;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 4px;
  }

  .metric-name {
    color: #9ca3af;
    font-size: 11px;
  }

  .recommendations-list {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .recommendation-item {
    padding: 8px 12px;
    background: rgba(239, 68, 68, 0.1);
    border: 1px solid rgba(239, 68, 68, 0.2);
    border-radius: 4px;
    font-size: 11px;
    line-height: 1.4;
  }

  /* Compact mode adjustments */
  .performance-dashboard.compact .metrics-grid {
    grid-template-columns: repeat(2, 1fr);
  }

  .performance-dashboard.compact .metric-card {
    padding: 8px 6px;
  }

  .performance-dashboard.compact .score-circle {
    width: 50px;
    height: 50px;
  }

  .performance-dashboard.compact .score-value {
    font-size: 14px;
  }

  .performance-dashboard.compact .score-grade {
    font-size: 20px;
  }

  /* Mobile responsiveness */
  @media (max-width: 640px) {
    .performance-dashboard {
      position: relative;
      top: auto !important;
      right: auto !important;
      bottom: auto !important;
      left: auto !important;
      margin: 20px;
      max-width: calc(100vw - 40px);
    }
  }

  /* Hide in print */
  @media print {
    .performance-dashboard {
      display: none !important;
    }
  }
</style>

<script>
  class PerformanceDashboard {
    constructor() {
      this.dashboard = document.getElementById('performance-dashboard');
      this.content = document.getElementById('dashboard-content');
      this.toggle = document.getElementById('dashboard-toggle');
      this.statusIndicator = document.getElementById('status-indicator');
      
      this.metrics = {};
      this.isCollapsed = false;
      
      this.init();
    }

    init() {
      if (!this.dashboard) return;

      // Set up toggle functionality
      this.setupToggle();
      
      // Connect to performance monitor
      this.connectToPerformanceMonitor();
      
      // Update dashboard periodically
      this.startPeriodicUpdates();
      
      // Handle keyboard shortcuts
      this.setupKeyboardShortcuts();
    }

    setupToggle() {
      this.toggle?.addEventListener('click', () => {
        this.toggleDashboard();
      });

      // Also toggle on header click
      const header = this.dashboard?.querySelector('.dashboard-header');
      header?.addEventListener('click', (e) => {
        if (e.target !== this.toggle) {
          this.toggleDashboard();
        }
      });
    }

    toggleDashboard() {
      this.isCollapsed = !this.isCollapsed;
      
      if (this.content) {
        this.content.classList.toggle('collapsed', this.isCollapsed);
      }
      
      if (this.toggle) {
        const svg = this.toggle.querySelector('svg');
        if (svg) {
          svg.style.transform = this.isCollapsed ? 'rotate(-90deg)' : 'rotate(0deg)';
        }
      }
    }

    connectToPerformanceMonitor() {
      // Connect to existing performance monitor
      if (window.NosytLabsPerformance) {
        this.updateMetrics(window.NosytLabsPerformance.getMetrics());
      }

      // Listen for performance updates
      window.addEventListener('performance-update', (event) => {
        this.updateMetrics(event.detail);
      });
    }

    updateMetrics(metrics) {
      this.metrics = { ...this.metrics, ...metrics };
      
      // Update Core Web Vitals
      this.updateMetric('lcp', metrics.lcp, { good: 2500, poor: 4000 });
      this.updateMetric('fid', metrics.fid, { good: 100, poor: 300 });
      this.updateMetric('cls', metrics.cls, { good: 0.1, poor: 0.25 });
      
      // Update additional metrics
      this.updateAdditionalMetric('fcp', metrics.fcp);
      this.updateAdditionalMetric('ttfb', metrics.ttfb);
      
      // Update image stats
      if (window.OptimizedImageLoader) {
        const imageStats = window.OptimizedImageLoader.getStats();
        this.updateAdditionalMetric('images', `${imageStats.loadedImages}/${imageStats.totalImages}`);
      }
      
      // Calculate and update score
      this.updateScore();
      
      // Update status indicator
      this.updateStatusIndicator();
      
      // Update recommendations
      this.updateRecommendations();
    }

    updateMetric(name, value, thresholds) {
      const valueEl = document.getElementById(`${name}-value`);
      const statusEl = document.getElementById(`${name}-status`);
      
      if (valueEl && value !== undefined) {
        if (name === 'cls') {
          valueEl.textContent = value.toFixed(3);
        } else {
          valueEl.textContent = Math.round(value) + 'ms';
        }
      }
      
      if (statusEl && value !== undefined) {
        let status = 'good';
        if (value > thresholds.poor) status = 'poor';
        else if (value > thresholds.good) status = 'needs-improvement';
        
        statusEl.className = `metric-status ${status}`;
      }
    }

    updateAdditionalMetric(name, value) {
      const el = document.getElementById(`${name}-value`);
      if (el && value !== undefined) {
        if (typeof value === 'number') {
          el.textContent = Math.round(value) + 'ms';
        } else {
          el.textContent = value;
        }
      }
    }

    updateScore() {
      const scoreEl = document.getElementById('score-value');
      const gradeEl = document.getElementById('score-grade');
      const circleEl = document.getElementById('score-circle');
      
      if (window.NosytLabsPerformanceOptimizer) {
        const report = window.NosytLabsPerformanceOptimizer.getPerformanceReport();
        const score = report.score;
        
        if (scoreEl) scoreEl.textContent = score;
        
        // Update grade
        let grade = 'F';
        if (score >= 90) grade = 'A';
        else if (score >= 80) grade = 'B';
        else if (score >= 70) grade = 'C';
        else if (score >= 60) grade = 'D';
        
        if (gradeEl) {
          gradeEl.textContent = grade;
          gradeEl.className = `score-grade ${grade}`;
        }
        
        // Update circle progress
        if (circleEl) {
          const percentage = score / 100;
          const degrees = percentage * 360;
          circleEl.style.background = `conic-gradient(#10b981 ${degrees}deg, #6b7280 ${degrees}deg)`;
        }
      }
    }

    updateStatusIndicator() {
      const dot = this.statusIndicator?.querySelector('.status-dot');
      if (!dot) return;
      
      const hasIssues = Object.values(this.metrics).some(value => {
        return value !== undefined && value > 2500; // Simplified check
      });
      
      dot.className = hasIssues ? 'status-dot warning' : 'status-dot';
    }

    updateRecommendations() {
      if (!window.NosytLabsPerformanceOptimizer) return;
      
      const report = window.NosytLabsPerformanceOptimizer.getPerformanceReport();
      const recommendations = report.recommendations;
      
      const section = document.getElementById('recommendations-section');
      const list = document.getElementById('recommendations-list');
      
      if (recommendations.length > 0) {
        section.style.display = 'block';
        list.innerHTML = recommendations
          .map(rec => `<div class="recommendation-item">${rec}</div>`)
          .join('');
      } else {
        section.style.display = 'none';
      }
    }

    startPeriodicUpdates() {
      setInterval(() => {
        if (window.NosytLabsPerformance) {
          this.updateMetrics(window.NosytLabsPerformance.getMetrics());
        }
      }, 2000);
    }

    setupKeyboardShortcuts() {
      document.addEventListener('keydown', (e) => {
        // Ctrl/Cmd + Shift + P to toggle dashboard
        if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'P') {
          e.preventDefault();
          this.toggleDashboard();
        }
      });
    }
  }

  // Initialize dashboard when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new PerformanceDashboard();
    });
  } else {
    new PerformanceDashboard();
  }
</script>
