---
import type { CollectionEntry } from 'astro:content';
import EnhancedProjectCard from './EnhancedProjectCard.astro';
import AstroIcon from './ui/AstroIcon.astro';
import Button from './ui/Button.astro';
import Input from './ui/Input.astro';

interface Props {
  projects: CollectionEntry<'projects'>[];
  showFilters?: boolean;
  showSearch?: boolean;
  showStats?: boolean;
  maxProjects?: number;
}

const { 
  projects, 
  showFilters = true, 
  showSearch = true, 
  showStats = true,
  maxProjects 
} = Astro.props;

// Filter and sort projects
const activeProjects = projects.filter(
  project => !project.data.draft && project.data.status !== 'archived'
);

// Sort by featured first, then by published date
const sortedProjects = activeProjects.sort((a, b) => {
  if (a.data.featured && !b.data.featured) return -1;
  if (!a.data.featured && b.data.featured) return 1;
  return b.data.publishedAt.getTime() - a.data.publishedAt.getTime();
});

// Limit projects if specified
const displayProjects = maxProjects ? sortedProjects.slice(0, maxProjects) : sortedProjects;

// Get unique categories
const categories = [...new Set(activeProjects.map(p => p.data.category))];

// Category display names and icons
const categoryConfig: Record<string, { name: string; icon: string; color: string }> = {
  'web-development': {
    name: 'Web Development',
    icon: 'tabler:world-www',
    color: 'blue'
  },
  'ai-integration': {
    name: 'AI Integration',
    icon: 'tabler:brain',
    color: 'purple'
  },
  'consulting': {
    name: 'Technical Consulting',
    icon: 'tabler:users',
    color: 'green'
  },
  'mobile-development': {
    name: 'Mobile Development',
    icon: 'tabler:device-mobile',
    color: 'orange'
  },
  'automation': {
    name: 'Automation',
    icon: 'tabler:robot',
    color: 'teal'
  }
};

// Calculate stats
const stats = {
  total: activeProjects.length,
  featured: activeProjects.filter(p => p.data.featured).length,
  completed: activeProjects.filter(p => p.data.status === 'completed').length,
  categories: categories.length
};
---

<section class="enhanced-portfolio-showcase relative">
  <!-- Stats Section -->
  {showStats && (
    <div class="mb-12">
      <div class="grid grid-cols-2 md:grid-cols-4 gap-6">
        <div class="text-center p-6 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm rounded-2xl border border-gray-200/50 dark:border-gray-700/50 hover:shadow-lg transition-all duration-300">
          <div class="text-3xl font-bold text-primary mb-2 counter" data-target={stats.total}>0</div>
          <div class="text-sm text-gray-600 dark:text-gray-400 font-medium">Total Projects</div>
        </div>
        <div class="text-center p-6 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm rounded-2xl border border-gray-200/50 dark:border-gray-700/50 hover:shadow-lg transition-all duration-300">
          <div class="text-3xl font-bold text-yellow-500 mb-2 counter" data-target={stats.featured}>0</div>
          <div class="text-sm text-gray-600 dark:text-gray-400 font-medium">Featured</div>
        </div>
        <div class="text-center p-6 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm rounded-2xl border border-gray-200/50 dark:border-gray-700/50 hover:shadow-lg transition-all duration-300">
          <div class="text-3xl font-bold text-green-500 mb-2 counter" data-target={stats.completed}>0</div>
          <div class="text-sm text-gray-600 dark:text-gray-400 font-medium">Completed</div>
        </div>
        <div class="text-center p-6 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm rounded-2xl border border-gray-200/50 dark:border-gray-700/50 hover:shadow-lg transition-all duration-300">
          <div class="text-3xl font-bold text-purple-500 mb-2 counter" data-target={stats.categories}>0</div>
          <div class="text-sm text-gray-600 dark:text-gray-400 font-medium">Categories</div>
        </div>
      </div>
    </div>
  )}

  <!-- Search and Filters -->
  {(showSearch || showFilters) && (
    <div class="mb-12 space-y-6">
      <!-- Search Bar -->
      {showSearch && (
        <div class="relative max-w-md mx-auto">
          <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
            <AstroIcon name="tabler:search" class="w-5 h-5 text-gray-400" />
          </div>
          <Input
            type="text"
            id="project-search"
            placeholder="Search projects..."
            class="w-full pl-12 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm"
          />
        </div>
      )}

      <!-- Category Filters -->
      {showFilters && categories.length > 1 && (
        <div class="flex flex-wrap justify-center gap-3">
          <Button
            variant="gradient"
            size="sm"
            class="filter-btn active transform hover:scale-105"
            data-filter="all"
          >
            <AstroIcon name="tabler:apps" class="w-4 h-4 inline mr-2" />
            All Projects
          </Button>
          {categories.map((category) => {
            const config = categoryConfig[category] || { name: category, icon: 'tabler:folder', color: 'gray' };
            return (
              <Button
                variant="outline"
                size="sm"
                class="filter-btn transform hover:scale-105 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm"
                data-filter={category}
              >
                <AstroIcon name={config.icon} class="w-4 h-4 inline mr-2" />
                {config.name}
              </Button>
            );
          })}
        </div>
      )}
    </div>
  )}

  <!-- Projects Grid -->
  <div class="projects-grid grid md:grid-cols-2 lg:grid-cols-3 gap-8 lg:gap-10">
    {displayProjects.map((project, index) => (
      <div 
        class="project-item entrance-fade" 
        data-category={project.data.category}
        data-title={project.data.title.toLowerCase()}
        data-description={project.data.excerpt.toLowerCase()}
        data-client={project.data.client.name.toLowerCase()}
        data-technologies={project.data.scope.technologies.join(' ').toLowerCase()}
        style={`animation-delay: ${index * 100}ms`}
      >
        <EnhancedProjectCard 
          project={project} 
          featured={project.data.featured}
          showStats={true}
        />
      </div>
    ))}
  </div>

  <!-- No Results Message -->
  <div id="no-results" class="hidden text-center py-16">
    <div class="max-w-md mx-auto">
      <div class="w-24 h-24 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-6">
        <AstroIcon name="tabler:search-off" class="w-12 h-12 text-gray-400" />
      </div>
      <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">No projects found</h3>
      <p class="text-gray-600 dark:text-gray-400 mb-6">Try adjusting your search or filter criteria</p>
      <Button 
        id="clear-filters"
        variant="primary"
        size="sm"
        class="transform hover:scale-105"
      >
        <AstroIcon name="tabler:refresh" class="w-4 h-4" />
        Clear Filters
      </Button>
    </div>
  </div>

  <!-- Load More Button (if maxProjects is set) -->
  {maxProjects && sortedProjects.length > maxProjects && (
    <div class="text-center mt-12">
      <Button 
        href="/projects"
        variant="gradient"
        size="lg"
        class="transform hover:scale-105 hover:shadow-xl hover:shadow-primary/25"
      >
        <span>View All Projects</span>
        <AstroIcon name="tabler:arrow-right" class="w-5 h-5" />
      </Button>
    </div>
  )}
</section>

<script>
  // Counter Animation
  function animateCounters() {
    const counters = document.querySelectorAll('.counter');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const counter = entry.target as HTMLElement;
          const target = parseInt(counter.dataset.target || '0');
          const duration = 2000;
          const step = target / (duration / 16);
          let current = 0;
          
          const timer = setInterval(() => {
            current += step;
            if (current >= target) {
              counter.textContent = target.toString();
              clearInterval(timer);
            } else {
              counter.textContent = Math.floor(current).toString();
            }
          }, 16);
          
          observer.unobserve(counter);
        }
      });
    });
    
    counters.forEach(counter => observer.observe(counter));
  }

  // Search Functionality
  function initializeSearch() {
    const searchInput = document.getElementById('project-search') as HTMLInputElement;
    if (!searchInput) return;

    searchInput.addEventListener('input', (e) => {
      const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
      filterProjects(searchTerm, getCurrentFilter());
    });
  }

  // Filter Functionality
  function initializeFilters() {
    const filterButtons = document.querySelectorAll('.filter-btn');
    
    filterButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        const target = e.currentTarget as HTMLButtonElement;
        const filter = target.dataset.filter || 'all';
        
        // Update active state
        filterButtons.forEach(btn => btn.classList.remove('active'));
        target.classList.add('active');
        
        // Update button styles
        filterButtons.forEach(btn => {
          if (btn === target) {
            btn.className = 'filter-btn active px-6 py-3 bg-gradient-to-r from-primary to-secondary text-white rounded-xl font-semibold text-sm transition-all duration-300 hover:shadow-lg hover:scale-105 transform';
          } else {
            btn.className = 'filter-btn px-6 py-3 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm border border-gray-200/50 dark:border-gray-700/50 text-gray-700 dark:text-gray-300 rounded-xl font-semibold text-sm transition-all duration-300 hover:shadow-lg hover:scale-105 transform hover:bg-gray-50 dark:hover:bg-gray-800';
          }
        });
        
        const searchInput = document.getElementById('project-search') as HTMLInputElement;
        const searchTerm = searchInput ? searchInput.value.toLowerCase() : '';
        filterProjects(searchTerm, filter);
      });
    });
  }

  // Get current active filter
  function getCurrentFilter(): string {
    const activeFilter = document.querySelector('.filter-btn.active') as HTMLButtonElement;
    return activeFilter ? activeFilter.dataset.filter || 'all' : 'all';
  }

  // Filter projects based on search and category
  function filterProjects(searchTerm: string, categoryFilter: string) {
    const projectItems = document.querySelectorAll('.project-item');
    const noResults = document.getElementById('no-results');
    let visibleCount = 0;

    projectItems.forEach((item, index) => {
      const element = item as HTMLElement;
      const category = element.dataset.category || '';
      const title = element.dataset.title || '';
      const description = element.dataset.description || '';
      const client = element.dataset.client || '';
      const technologies = element.dataset.technologies || '';
      
      const matchesSearch = !searchTerm || 
        title.includes(searchTerm) || 
        description.includes(searchTerm) || 
        client.includes(searchTerm) || 
        technologies.includes(searchTerm);
      
      const matchesCategory = categoryFilter === 'all' || category === categoryFilter;
      
      if (matchesSearch && matchesCategory) {
        element.style.display = 'block';
        element.style.animationDelay = `${visibleCount * 100}ms`;
        element.classList.remove('entrance-fade', 'entrance-slide-up');
        requestAnimationFrame(() => element.classList.add('entrance-fade'));
        visibleCount++;
      } else {
        element.style.display = 'none';
        element.classList.remove('animate-fade-in');
      }
    });

    // Show/hide no results message
    if (noResults) {
      if (visibleCount === 0) {
        noResults.classList.remove('hidden');
      } else {
        noResults.classList.add('hidden');
      }
    }
  }

  // Clear filters
  function initializeClearFilters() {
    const clearButton = document.getElementById('clear-filters');
    if (!clearButton) return;

    clearButton.addEventListener('click', () => {
      // Reset search
      const searchInput = document.getElementById('project-search') as HTMLInputElement;
      if (searchInput) {
        searchInput.value = '';
      }

      // Reset filter to 'all'
      const allButton = document.querySelector('[data-filter="all"]') as HTMLButtonElement;
      if (allButton) {
        allButton.click();
      }
    });
  }

  // Initialize all functionality
  document.addEventListener('DOMContentLoaded', () => {
    animateCounters();
    initializeSearch();
    initializeFilters();
    initializeClearFilters();
  });
</script>

<style>
  
  .project-item {
    transition: all 0.3s ease;
  }
  
  .filter-btn {
    position: relative;
    overflow: hidden;
  }
  
  .filter-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgb(var(--background-rgb) / 0.2), transparent);
    transition: left 0.5s;
  }
  
  .filter-btn:hover::before {
    left: 100%;
  }
</style>