---
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";

const layoutVariants = cva("relative", {
  variants: {
    type: {
      container: "container mx-auto px-4 sm:px-6 lg:px-8",
      section: "w-full py-16 md:py-20",
      grid: "grid",
      spacer: "block",
    },
    background: {
      primary: "bg-gradient-to-br from-brand-blue-700 to-brand-blue-900 text-white",
      secondary: "bg-gradient-to-br from-brand-orange-500 to-brand-orange-600 text-white",
      tertiary: "bg-neutral-100 dark:bg-neutral-800",
      accent: "bg-brand-blue-500 text-white",
      electric: "bg-gradient-to-br from-brand-ethereal-500 to-brand-blue-600 text-white",
      fire: "bg-gradient-to-br from-brand-red-500 to-brand-orange-500 text-white",
      nature: "bg-gradient-to-br from-brand-green-500 to-brand-ethereal-500 text-white",
      white: "bg-white dark:bg-neutral-900",
      gray: "bg-neutral-100 dark:bg-neutral-800",
      none: "",
    },
    size: {
      sm: "max-w-screen-sm",
      md: "max-w-screen-md",
      lg: "max-w-screen-lg",
      xl: "max-w-screen-xl",
      "2xl": "max-w-screen-2xl",
      full: "max-w-full",
    },
    gap: {
      none: "gap-0",
      sm: "gap-2",
      md: "gap-4",
      lg: "gap-8",
      xl: "gap-12",
    },
    padding: {
      none: "p-0",
      sm: "p-2",
      md: "p-4",
      lg: "p-8",
      xl: "p-12",
    },
    align: {
      start: "items-start",
      center: "items-center",
      end: "items-end",
      stretch: "items-stretch",
    },
    justify: {
      start: "justify-start",
      center: "justify-center",
      end: "justify-end",
      between: "justify-between",
      around: "justify-around",
    },
    spacer: {
      xs: "h-2",
      sm: "h-4",
      md: "h-8",
      lg: "h-12",
      xl: "h-16",
      "2xl": "h-24",
      "3xl": "h-32",
      "4xl": "h-40",
    },
  },
});

export interface Props extends VariantProps<typeof layoutVariants> {
  id?: string;
  fullWidth?: boolean;
  class?: string;
  columns?: {
    default?: number;
    sm?: number;
    md?: number;
    lg?: number;
    xl?: number;
  };
}

const {
  type = 'container',
  size,
  id,
  background,
  spacer,
  gap,
  padding,
  align,
  justify,
  fullWidth = false,
  class: className,
  columns,
} = Astro.props;

const ElementTag = type === 'section' ? 'section' : 'div';

const gridCols = columns
  ? Object.entries(columns)
      .map(([bp, cols]) => (bp === 'default' ? `grid-cols-${cols}` : `${bp}:grid-cols-${cols}`))
      .join(" ")
  : "";

const classes = cn(
  layoutVariants({ type, background, size: type === 'container' ? size : null, gap, padding, align, justify, spacer }),
  gridCols,
  className
);

const shouldUseContainer = type === 'section' && !fullWidth;
---

{type === 'spacer' ? (
  <div class={classes} aria-hidden="true"></div>
) : (
  <ElementTag id={id} class={classes}>
    {shouldUseContainer ? (
      <div class="container mx-auto px-4 sm:px-6 lg:px-8">
        <slot />
      </div>
    ) : (
      <slot />
    )}
  </ElementTag>
)}