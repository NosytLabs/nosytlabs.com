---
/**
 * Unified Layout Component
 * Consolidated container, section, grid, and spacer functionality
 */

export interface Props {
  // Type of layout component
  type?: 'container' | 'section' | 'grid' | 'spacer';
  
  // Container props
  size?: 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'full';
  
  // Section props
  id?: string;
  background?: 'primary' | 'secondary' | 'tertiary' | 'accent' | 'white' | 'gray' | 'none';
  paddingTop?: boolean;
  paddingBottom?: boolean;
  
  // Grid props
  columns?: {
    default?: number;
    sm?: number;
    md?: number;
    lg?: number;
    xl?: number;
  };
  
  // Spacer props
  spacer?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl';
  
  // Common props
  gap?: 'none' | 'sm' | 'md' | 'lg' | 'xl';
  padding?: 'none' | 'sm' | 'md' | 'lg' | 'xl';
  align?: 'start' | 'center' | 'end' | 'stretch';
  justify?: 'start' | 'center' | 'end' | 'between' | 'around';
  fullWidth?: boolean;
  class?: string;
}

const {
  type = 'container',
  size = 'lg',
  id,
  background = 'none',
  paddingTop = true,
  paddingBottom = true,
  columns = { default: 1, sm: 1, md: 2, lg: 3, xl: 4 },
  spacer = 'md',
  gap = 'md',
  padding = 'md',
  align = 'stretch',
  justify = 'start',
  fullWidth = false,
  class: className = '',
} = Astro.props;

// Get utility classes based on type
function getClasses() {
  const baseClasses = ['unified-layout'];
  
  switch (type) {
    case 'container':
      return [
        ...baseClasses,
        'container',
        `container-${size}`,
        padding !== 'none' ? `p-${padding}` : '',
        className
      ].filter(Boolean).join(' ');
      
    case 'section':
      const bgClasses = {
        primary: 'gradient-primary text-inverse',
        secondary: 'gradient-orange text-inverse',
        tertiary: 'bg-neutral-100',
        accent: 'gradient-purple text-inverse',
        white: 'bg-white',
        gray: 'bg-neutral-100',
        none: '',
      };
      
      return [
        ...baseClasses,
        'section-standard',
        bgClasses[background],
        paddingTop ? 'pt-20' : '',
        paddingBottom ? 'pb-20' : '',
        className
      ].filter(Boolean).join(' ');
      
    case 'grid':
      const gridClasses = [
        ...baseClasses,
        'grid-responsive',
        gap !== 'none' ? `gap-${gap}` : '',
        align !== 'stretch' ? `items-${align}` : '',
        justify !== 'start' ? `justify-${justify}` : '',
        className
      ].filter(Boolean);
      
      // Add responsive columns
      if (columns.default) gridClasses.push(`grid-cols-${columns.default}`);
      if (columns.sm) gridClasses.push(`sm:grid-cols-${columns.sm}`);
      if (columns.md) gridClasses.push(`md:grid-cols-${columns.md}`);
      if (columns.lg) gridClasses.push(`lg:grid-cols-${columns.lg}`);
      if (columns.xl) gridClasses.push(`xl:grid-cols-${columns.xl}`);
      
      return gridClasses.join(' ');
      
    case 'spacer':
      const spacerSizes = {
        xs: 'h-2',
        sm: 'h-4',
        md: 'h-8',
        lg: 'h-12',
        xl: 'h-16',
        '2xl': 'h-24',
        '3xl': 'h-32',
        '4xl': 'h-40',
      };
      
      return [
        ...baseClasses,
        spacerSizes[spacer],
        className
      ].filter(Boolean).join(' ');
      
    default:
      return baseClasses.join(' ');
  }
}

const ElementTag = type === 'section' ? 'section' : 'div';
const classes = getClasses();
const shouldUseContainer = type === 'section' && !fullWidth;
---

{type === 'spacer' ? (
  <div class={classes} aria-hidden="true"></div>
) : (
  <ElementTag id={id} class={classes}>
    {shouldUseContainer ? (
      <div class="container">
        <slot />
      </div>
    ) : (
      <slot />
    )}
  </ElementTag>
)}

<style>
  .unified-layout {
    position: relative;
  }
  
  /* Height utilities for spacer */
  .h-2 { height: 0.5rem; }
  .h-4 { height: 1rem; }
  .h-8 { height: 2rem; }
  .h-12 { height: 3rem; }
  .h-16 { height: 4rem; }
  .h-24 { height: 6rem; }
  .h-32 { height: 8rem; }
  .h-40 { height: 10rem; }
</style>