---
// Removed server-side logger import for inline usage
/**
 * NavigationToggle Component
 *
 * A modern, accessible mobile menu toggle button with smooth animations
 * and proper ARIA attributes for screen readers.
 */

export interface Props {
  /**
   * Optional additional CSS classes
   */
  className?: string;
}

const { className = '' } = Astro.props;

// Base button classes
const buttonClasses = [
  'relative flex items-center justify-center p-2',
  'text-text dark:text-text-dark',
  'hover:text-primary dark:hover:text-primary',
  'focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 dark:focus:ring-offset-background-dark',
  'rounded-lg transition-colors duration-200',
  className,
];
---

<button
  type="button"
  id="mobile-menu-button"
  class:list={buttonClasses}
  aria-controls="mobile-menu"
  aria-expanded="false"
  aria-label="Toggle navigation menu"
>
  <span class="sr-only">Open main menu</span>

  <!-- Hamburger icon -->
  <svg
    class="block w-6 h-6"
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
    aria-hidden="true"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M4 6h16M4 12h16M4 18h16"
      class="origin-center transition-transform duration-200 ease-out menu-icon-bars"></path>
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M6 18L18 6M6 6l12 12"
      class="origin-center transition-transform duration-200 ease-out menu-icon-close hidden"
    ></path>
  </svg>
</button>

<script is:inline>
  // Dev-only logger for inline scripts
  const __isDev = typeof window !== 'undefined' && typeof location !== 'undefined' && ['localhost', '127.0.0.1'].includes(location.hostname);
  const devLogger = {
    error: (...args) => { if (__isDev) console.error(...args); },
    warn: (...args) => { if (__isDev) console.warn(...args); },
    info: (...args) => { if (__isDev) console.info?.(...args); },
    debug: (...args) => { if (__isDev) console.debug?.(...args); },
  };
  // Initialize mobile menu toggle functionality
  document.addEventListener('DOMContentLoaded', () => {
    try {
      const button = document.getElementById('mobile-menu-button');
      const menu = document.getElementById('mobile-menu');
      const iconBars = document.querySelector('.menu-icon-bars');
      const iconClose = document.querySelector('.menu-icon-close');

      if (button && menu && iconBars && iconClose) {
        let isOpen = false;
        let previousFocus = null;

        const toggleMenu = () => {
          isOpen = !isOpen;
          button.setAttribute('aria-expanded', String(isOpen));

          if (isOpen) {
            previousFocus = document.activeElement;
            menu.classList.add('open');
            menu.setAttribute('aria-hidden', 'false');
            document.body.style.overflow = 'hidden';
            iconBars.classList.add('hidden');
            iconClose.classList.remove('hidden');

            setTimeout(() => {
              const firstFocusable = menu.querySelector(
                'a, button, [tabindex]:not([tabindex="-1"]'
              );
              firstFocusable?.focus();
            }, 100);
          } else {
            menu.classList.remove('open');
            menu.setAttribute('aria-hidden', 'true');
            document.body.style.overflow = '';
            iconBars.classList.remove('hidden');
            iconClose.classList.add('hidden');
            previousFocus?.focus();
          }
        };

        button.addEventListener('click', toggleMenu);
        document.addEventListener('keydown', e => {
          if (e.key === 'Escape' && isOpen) toggleMenu();
        });

        window.addEventListener('resize', () => {
          if (window.innerWidth >= 1024 && isOpen) {
            toggleMenu();
          }
        });

        document.addEventListener('click', e => {
          if (isOpen && !menu.contains(e.target) && !button.contains(e.target)) {
            toggleMenu();
          }
        });
      } else {
        devLogger.warn('Navigation toggle elements not found');
      }
    } catch (error) {
      devLogger.error('Error initializing navigation toggle:', error);
    }
  });
</script>
