---
import { getBlogIndexPath, getServicesIndexPath } from '@/utils/pathResolvers';
import { Icon } from '@/components/ui/icon';

interface Props {
  currentPath?: string;
  variant?: 'modern' | 'retro' | 'minimal';
  isRetroMode?: boolean;
  className?: string;
}

const {
  currentPath = '/',
  variant = 'modern',
  isRetroMode = false,
  className = ''
} = Astro.props;

// Professional navigation items - consistent across all components
export const navItems = [
  { name: 'Home', href: '/', icon: 'home' },
  { name: 'Services', href: '/services', icon: 'briefcase' },
  { name: 'Blog', href: '/blog', icon: 'book-open' },
  { name: 'Projects', href: '/projects', icon: 'folder' },
  { name: 'Contact', href: '/contact', icon: 'mail' }
];
---

<nav class={`relative z-[1030] ${variant} ${className}`} data-variant={variant} data-retro={isRetroMode} aria-label="Main navigation">
  <!-- Modern Clean Navigation Header -->
  <div class="nav-header fixed top-0 left-0 right-0 bg-white/95 dark:bg-neutral-900/95 backdrop-blur-xl border-b border-neutral-200/80 dark:border-neutral-700/80 transition-all duration-300 z-[1030]">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-3 sm:py-4 flex items-center justify-between">
      <!-- Clean Logo Design -->
      <div class="flex items-center">
        <a href="/" class="flex items-center no-underline text-neutral-900 dark:text-white font-bold text-xl transition-all duration-300 hover:text-primary-600 dark:hover:text-primary-400 group" aria-label="NosytLabs Home">
          <div class="flex items-center gap-3">
            <div class="w-8 h-8 bg-gradient-to-br from-primary-500 to-secondary-500 rounded-lg flex items-center justify-center transition-all duration-300 group-hover:scale-110 group-hover:rotate-3">
              <span class="text-white font-bold text-sm">N</span>
            </div>
            <span class="transition-all duration-300 group-hover:tracking-wide">NosytLabs</span>
          </div>
        </a>
      </div>

      <!-- Clean Desktop Navigation Links -->
      <ul class="hidden md:flex gap-1" role="list">
        {navItems.map(item => (
          <li>
            <a href={item.href} class={`inline-flex items-center px-4 py-2 text-sm font-medium rounded-lg transition-all duration-200 hover:bg-neutral-100 dark:hover:bg-neutral-800 ${currentPath === item.href ? 'text-primary-600 dark:text-primary-400 bg-primary-50 dark:bg-primary-900/20' : 'text-neutral-700 dark:text-neutral-300 hover:text-neutral-900 dark:hover:text-white'}`}>
              {item.name}
            </a>
          </li>
        ))}
      </ul>

      <!-- Modern Mobile Menu Toggle -->
      <button class="md:hidden p-2 mobile-menu-toggle rounded-lg transition-all duration-200 hover:bg-neutral-100 dark:hover:bg-neutral-800 text-neutral-700 dark:text-neutral-300" aria-label="Toggle menu" aria-expanded="false" aria-controls="mobile-menu-overlay" aria-haspopup="true">
        <span class="sr-only">Open main menu</span>
        <Icon name="menu" size={20} className="hamburger-icon transition-transform duration-200" />
        <Icon name="x" size={20} className="close-icon hidden transition-transform duration-200" />
      </button>
    </div>
  </div>

  <!-- Clean Mobile Menu Overlay -->
  <div id="mobile-menu-overlay" class="mobile-menu-overlay fixed top-[72px] left-0 right-0 bottom-0 bg-white/95 dark:bg-neutral-900/95 backdrop-blur-xl transform translate-x-full transition-transform duration-300 ease-in-out z-[1020]" role="navigation" aria-label="Mobile navigation menu" aria-hidden="true">
    <div class="p-6">
      <ul class="space-y-2" role="menu">
        {navItems.map((item, index) => (
          <li role="none">
            <a href={item.href} class={`block px-4 py-3 text-base font-medium rounded-lg transition-all duration-200 mobile-menu-item ${currentPath === item.href ? 'text-primary-600 dark:text-primary-400 bg-primary-50 dark:bg-primary-900/20' : 'text-neutral-700 dark:text-neutral-300 hover:text-neutral-900 dark:hover:text-white hover:bg-neutral-100 dark:hover:bg-neutral-800'}`} role="menuitem" tabindex="-1" data-menu-index={index}>{item.name}</a>
          </li>
        ))}
      </ul>
    </div>
  </div>
</nav>

<style>
  /* Only keep custom styles for mobile menu interactions that can't be easily done with Tailwind */
  .mobile-menu-toggle.active .hamburger-icon {
    display: none;
  }
  .mobile-menu-toggle.active .close-icon {
    display: block;
  }
  .mobile-menu-overlay.active {
    transform: translateX(0) !important;
  }
  .nav-header.scrolled {
    background: rgba(18, 18, 18, 0.9);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }
</style>

<script is:inline>
  class UnifiedNavigation {
    constructor() {
      this.navHeader = document.querySelector('.nav-header');
      this.scrollThreshold = 50;
      this.mobileMenuToggle = document.querySelector('.mobile-menu-toggle');
      this.mobileMenuOverlay = document.querySelector('.mobile-menu-overlay');
      this.mobileMenuItems = [];
      this.currentFocusIndex = 0;
      this.previouslyFocusedElement = null;
      this.isMenuOpen = false;

      this.init();
    }

    init() {
      this.setupScrollHandler();
      this.setupMobileMenu();
      this.setupKeyboardNavigation();
    }

    setupScrollHandler() {
      let ticking = false;
      window.addEventListener('scroll', () => {
        if (!ticking) {
          requestAnimationFrame(() => {
            if (window.scrollY > this.scrollThreshold) {
              this.navHeader?.classList.add('scrolled');
            } else {
              this.navHeader?.classList.remove('scrolled');
            }
            ticking = false;
          });
          ticking = true;
        }
      });
    }

    setupMobileMenu() {
      if (!this.mobileMenuToggle || !this.mobileMenuOverlay) {
        return;
      }
      
      // Cache menu items
      this.mobileMenuItems = Array.from(this.mobileMenuOverlay.querySelectorAll('.mobile-menu-item'));
      
      // Add click event listener
      this.mobileMenuToggle.addEventListener('click', () => {
        this.toggleMobileMenu();
      });

      // Handle clicks outside menu to close it
      document.addEventListener('click', (e) => {
        if (this.isMenuOpen && !this.mobileMenuOverlay.contains(e.target) && e.target !== this.mobileMenuToggle) {
          this.closeMobileMenu();
        }
      });

      // Handle menu item clicks
      this.mobileMenuItems.forEach((item, index) => {
        item.addEventListener('click', () => {
          this.closeMobileMenu();
        });
      });
    }

    setupKeyboardNavigation() {
      document.addEventListener('keydown', (e) => {
        if (!this.isMenuOpen) return;

        switch (e.key) {
          case 'Escape':
            e.preventDefault();
            this.closeMobileMenu();
            break;
          case 'ArrowDown':
            e.preventDefault();
            this.navigateMenu(1);
            break;
          case 'ArrowUp':
            e.preventDefault();
            this.navigateMenu(-1);
            break;
        }
      });
    }

    toggleMobileMenu() {
      if (this.isMenuOpen) {
        this.closeMobileMenu();
      } else {
        this.openMobileMenu();
      }
    }

    openMobileMenu() {
      // Store previously focused element
      this.previouslyFocusedElement = document.activeElement;
      
      // Update states
      this.isMenuOpen = true;
      this.mobileMenuToggle.setAttribute('aria-expanded', 'true');
      this.mobileMenuToggle.classList.add('active');
      
      // Show menu
      this.mobileMenuOverlay.classList.remove('translate-x-full');
      this.mobileMenuOverlay.classList.add('translate-x-0');
      this.mobileMenuOverlay.setAttribute('aria-hidden', 'false');
      
      // Focus first menu item
      if (this.mobileMenuItems.length > 0) {
        this.currentFocusIndex = 0;
        this.mobileMenuItems[0].focus();
      }
    }

    closeMobileMenu() {
      // Update states
      this.isMenuOpen = false;
      this.mobileMenuToggle.setAttribute('aria-expanded', 'false');
      this.mobileMenuToggle.classList.remove('active');
      
      // Hide menu
      this.mobileMenuOverlay.classList.add('translate-x-full');
      this.mobileMenuOverlay.classList.remove('translate-x-0');
      this.mobileMenuOverlay.setAttribute('aria-hidden', 'true');
      
      // Restore focus to previously focused element
      if (this.previouslyFocusedElement && document.body.contains(this.previouslyFocusedElement)) {
        this.previouslyFocusedElement.focus();
      } else {
        this.mobileMenuToggle.focus();
      }
      
      this.previouslyFocusedElement = null;
      this.currentFocusIndex = 0;
    }

    navigateMenu(direction) {
      if (this.mobileMenuItems.length === 0) return;
      
      const newIndex = this.currentFocusIndex + direction;
      
      if (newIndex >= 0 && newIndex < this.mobileMenuItems.length) {
        this.focusMenuItem(newIndex);
      } else if (direction > 0) {
        this.focusMenuItem(0);
      } else {
        this.focusMenuItem(this.mobileMenuItems.length - 1);
      }
    }

    focusMenuItem(index) {
      if (index < 0 || index >= this.mobileMenuItems.length) return;
      
      this.mobileMenuItems[index].focus();
      this.currentFocusIndex = index;
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    new UnifiedNavigation();
  });
</script>
