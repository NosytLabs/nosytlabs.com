---
/**
 * ContactForm Component
 *
 * A modern, accessible contact form with validation
 * and submission handling.
 */

interface Props {
  /**
   * Title for the contact form
   * @default "Contact Us"
   */
  title?: string;

  /**
   * Subtitle for the contact form
   */
  subtitle?: string;

  /**
   * Form submission endpoint
   * @default "/api/contact"
   */
  endpoint?: string;

  /**
   * Success message after form submission
   * @default "Thank you for your message! We'll get back to you soon."
   */
  successMessage?: string;

  /**
   * Error message if form submission fails
   * @default "There was an error submitting the form. Please try again."
   */
  errorMessage?: string;

  /**
   * Whether to show a file upload field
   * @default false
   */
  showFileUpload?: boolean;

  /**
   * Whether to show a budget field
   * @default false
   */
  showBudgetField?: boolean;

  /**
   * Whether to show a service selection field
   * @default true
   */
  showServiceField?: boolean;

  /**
   * Array of service options
   */
  serviceOptions?: string[];

  /**
   * Additional CSS classes
   */
  class?: string;
}

const {
  title = "Contact Us",
  subtitle = "Have a question or want to work together? Fill out the form below and we'll get back to you as soon as possible.",
  endpoint = "/api/contact",
  successMessage = "Thank you for your message! We'll get back to you soon.",
  errorMessage = "There was an error submitting the form. Please try again.",
  showFileUpload = false,
  showBudgetField = false,
  showServiceField = true,
  serviceOptions = [
    "Web Development",
    "AI Integration",
    "Technology Consulting",
    "E-commerce Solutions",
    "Custom Development",
    "Other"
  ],
  class: className = '',
} = Astro.props;
---

<section class={`py-16 ${className || ''}`}>
  <div class="max-w-4xl mx-auto px-4">
    <div class="text-center mb-10">
      <h2 class="text-4xl font-bold mb-4 text-brand-purple-600 dark:text-brand-purple-400">{title}</h2>
      {subtitle && <p class="text-lg text-neutral-600 dark:text-neutral-300 max-w-2xl mx-auto leading-relaxed">{subtitle}</p>}
    </div>

    <form id="contact-form" class="bg-white dark:bg-neutral-800 rounded-lg p-8 shadow-lg" action={endpoint} method="POST">
      <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6">
        <div class="flex flex-col">
          <label for="name" class="text-sm font-medium mb-2 text-neutral-700 dark:text-neutral-300">Name <span class="text-red-500">*</span></label>
          <input
            type="text"
            id="name"
            name="name"
            class="form-input"
            required
            placeholder="Your name"
            aria-label="Full Name"
            aria-describedby="name-help name-error"
            aria-required="true"
            aria-invalid="false">
          <div id="name-error" class="validation-message text-red-500 text-xs mt-1 hidden" role="alert" aria-live="polite"></div>
        </div>

        <div class="flex flex-col">
          <label for="email" class="text-sm font-medium mb-2 text-neutral-700 dark:text-neutral-300">Email <span class="text-red-500">*</span></label>
          <input
            type="email"
            id="email"
            name="email"
            class="form-input"
            required
            placeholder="your.email@example.com"
            aria-label="Email Address"
            aria-describedby="email-help email-error"
            aria-required="true"
            aria-invalid="false">
          <div id="email-error" class="validation-message text-red-500 text-xs mt-1 hidden" role="alert" aria-live="polite"></div>
        </div>

        {showServiceField && (
          <div class="flex flex-col sm:col-span-2">
            <label for="service" class="text-sm font-medium mb-2 text-neutral-700 dark:text-neutral-300">Service</label>
            <select id="service" name="service" class="form-select">
              <option value="" disabled selected>Select a service</option>
              {serviceOptions.map(option => (
                <option value={option}>{option}</option>
              ))}
            </select>
          </div>
        )}

        {showBudgetField && (
          <div class="flex flex-col sm:col-span-2">
            <label for="budget" class="text-sm font-medium mb-2 text-neutral-700 dark:text-neutral-300">Budget</label>
            <select id="budget" name="budget" class="form-select">
              <option value="" disabled selected>Select your budget range</option>
              <option value="Under $5,000">Under $5,000</option>
              <option value="$5,000 - $15,000">$5,000 - $15,000</option>
              <option value="$15,000 - $50,000">$15,000 - $50,000</option>
              <option value="$50,000+">$50,000+</option>
              <option value="Not sure yet">Not sure yet</option>
            </select>
          </div>
        )}

        <div class="flex flex-col sm:col-span-2">
          <label for="message" class="text-sm font-medium mb-2 text-neutral-700 dark:text-neutral-300">Message <span class="text-red-500">*</span></label>
          <textarea
            id="message"
            name="message"
            class="form-textarea"
            required
            placeholder="Your message"
            rows="5"
            aria-label="Message"
            aria-describedby="message-help message-error"
            aria-required="true"
            aria-invalid="false"></textarea>
          <div id="message-error" class="validation-message text-red-500 text-xs mt-1 hidden" role="alert" aria-live="polite"></div>
        </div>

        {showFileUpload && (
          <div class="flex flex-col sm:col-span-2">
            <label for="file" class="text-sm font-medium mb-2 text-neutral-700 dark:text-neutral-300">Attachment</label>
            <div class="flex items-center flex-wrap gap-3">
              <input type="file" id="file" name="file" class="sr-only file-input" />
              <label for="file" class="inline-flex items-center gap-2 px-4 py-2 bg-neutral-100 dark:bg-neutral-700 border border-neutral-300 dark:border-neutral-600 rounded-md text-sm font-medium cursor-pointer transition-all duration-300 hover:bg-neutral-200 dark:hover:bg-neutral-600 dark:text-white">
                <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />
                </svg>
                <span class="file-text">Choose a file</span>
              </label>
              <span class="file-name text-sm text-neutral-600 dark:text-neutral-400">No file chosen</span>
            </div>
            <p class="text-xs text-neutral-600 dark:text-neutral-400 mt-2">Max file size: 10MB. Accepted formats: .jpg, .png, .pdf, .stl</p>
          </div>
        )}
      </div>

      <div class="mt-8 flex justify-end">
        <button type="submit" class="form-button submit-button w-full sm:w-auto" aria-describedby="submit-help">
          <span>Send Message</span>
          <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
          </svg>
        </button>
      </div>

      <div class="form-message mt-6 px-3 py-3 rounded-md text-sm font-medium text-center hidden" aria-live="polite"></div>
    
<!-- Accessibility Helper Texts -->
<div id="name-help" class="sr-only">Enter your full name for contact purposes</div>
<div id="email-help" class="sr-only">Enter a valid email address where we can reach you</div>
<div id="message-help" class="sr-only">Describe your project or inquiry in detail</div>
<div id="submit-help" class="sr-only">Submit your contact form to send your message</div>

</form>
  </div>
</section>

<script define:vars={{ successMessage, errorMessage }}>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('contact-form');
    const formMessage = document.querySelector('.form-message');

    if (form) {
      // File upload handling
      const fileInput = document.querySelector('.file-input');
      const fileName = document.querySelector('.file-name');

      if (fileInput && fileName) {
        fileInput.addEventListener('change', (e) => {
          if (e.target.files.length > 0) {
            fileName.textContent = e.target.files[0].name;
          } else {
            fileName.textContent = 'No file chosen';
          }
        });
      }

      // Real-time field validation
      const validateField = (input) => {
        const errorElement = document.getElementById(input.id + '-error');
        let errorMessage = '';
        let isValid = true;

        // Clear previous validation state
        input.classList.remove('border-red-500', 'border-green-500');
        input.setAttribute('aria-invalid', 'false');
        
        if (errorElement) {
          errorElement.textContent = '';
          errorElement.classList.add('hidden');
        }

        // Check required fields
        if (input.hasAttribute('required') && !input.value.trim()) {
          errorMessage = 'This field is required';
          isValid = false;
        }
        // Validate email format
        else if (input.type === 'email' && input.value.trim()) {
          const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          if (!emailRegex.test(input.value.trim())) {
            errorMessage = 'Please enter a valid email address';
            isValid = false;
          }
        }
        // Validate name field (basic length check)
        else if (input.id === 'name' && input.value.trim() && input.value.trim().length < 2) {
          errorMessage = 'Name must be at least 2 characters long';
          isValid = false;
        }
        // Validate message field (minimum length)
        else if (input.id === 'message' && input.value.trim() && input.value.trim().length < 10) {
          errorMessage = 'Message must be at least 10 characters long';
          isValid = false;
        }
        // Validate file size and type if present
        else if (input.type === 'file' && input.files.length > 0) {
          const maxSize = 10 * 1024 * 1024; // 10MB
          if (input.files[0].size > maxSize) {
            errorMessage = 'File size exceeds 10MB limit';
            isValid = false;
          } else {
            // Validate file type
            const acceptedTypes = ['.jpg', '.jpeg', '.png', '.pdf', '.stl'];
            const fileName = input.files[0].name;
            const fileExtension = fileName.substring(fileName.lastIndexOf('.')).toLowerCase();

            if (!acceptedTypes.includes(fileExtension)) {
              errorMessage = 'File type not supported. Please use .jpg, .png, .pdf, or .stl';
              isValid = false;
            }
          }
        }

        // Apply validation results
        if (!isValid && errorMessage) {
          input.classList.add('border-red-500');
          input.setAttribute('aria-invalid', 'true');
          if (errorElement) {
            errorElement.textContent = errorMessage;
            errorElement.classList.remove('hidden');
          }
        } else if (input.value.trim()) {
          // Show success state for valid fields with content
          input.classList.add('border-green-500');
        }

        return isValid;
      };

      // Validate entire form
      const validateForm = () => {
        let isValid = true;
        const inputs = form.querySelectorAll('input[required], textarea[required], select[required]');

        inputs.forEach(input => {
          if (!validateField(input)) {
            isValid = false;
          }
        });

        return isValid;
      };

      // Set up real-time validation
      const setupRealTimeValidation = () => {
        const inputs = form.querySelectorAll('input, textarea, select');
        
        inputs.forEach(input => {
          // Validate on blur (when user leaves the field)
          input.addEventListener('blur', () => {
            if (input.value.trim() || input.hasAttribute('required')) {
              validateField(input);
            }
          });

          // Validate on input for immediate feedback (debounced)
          let validationTimeout;
          input.addEventListener('input', () => {
            clearTimeout(validationTimeout);
            validationTimeout = setTimeout(() => {
              // Only validate if field has content or was previously invalid
              if (input.value.trim() || input.getAttribute('aria-invalid') === 'true') {
                validateField(input);
              }
            }, 300); // 300ms debounce
          });

          // Validate on change for select elements
          if (input.tagName === 'SELECT') {
            input.addEventListener('change', () => {
              validateField(input);
            });
          }
        });
      };

      // Initialize real-time validation
      setupRealTimeValidation();

      // Form submission
      form.addEventListener('submit', async (e) => {
        e.preventDefault();

        // Validate form
        if (!validateForm()) {
          // Scroll to first error and focus it
          const firstError = form.querySelector('.border-red-500');
          if (firstError) {
            firstError.focus();
            firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
            
            // Announce validation error to screen readers
            if (typeof window.announceToScreenReader === 'function') {
              window.announceToScreenReader('Form contains validation errors. Please review and correct the highlighted fields.', 'assertive');
            }
          }
          return;
        }

        // Show loading state
        const submitButton = form.querySelector('.submit-button');
        const originalButtonText = submitButton.innerHTML;
        submitButton.innerHTML = '<span>Sending</span><svg class="animate-spin w-5 h-5 ml-2" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>';
        submitButton.disabled = true;

        try {
          const formData = new FormData(form);

          // Prepare data for API
          const submitData = {
            name: formData.get('name'),
            email: formData.get('email'),
            subject: formData.get('subject') || '',
            message: formData.get('message'),
            serviceType: formData.get('service') || '',
            budgetRange: formData.get('budget') || '',
            timeline: formData.get('timeline') || ''
          };

          // Submit to database API
          const response = await fetch('/api/contact', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(submitData)
          });

          const result = await response.json();

          if (!response.ok || !result.success) {
            throw new Error(result.error || 'Failed to submit form');
          }

          // Success
          formMessage.textContent = result.message || successMessage;
          formMessage.className = 'form-message mt-6 px-3 py-3 rounded-md text-sm font-medium text-center bg-green-50 dark:bg-green-900/20 text-green-800 dark:text-green-400 border border-green-200 dark:border-green-800';
          formMessage.classList.remove('hidden');
          form.reset();

          // Reset file name display if present
          if (fileName) {
            fileName.textContent = 'No file chosen';
          }

          // Show success animation
          const successAnimation = document.createElement('div');
          successAnimation.className = 'inline-block ml-2';
          successAnimation.innerHTML = '<svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>';
          formMessage.appendChild(successAnimation);

          // Announce success to screen readers
          if (typeof window.announceToScreenReader === 'function') {
            window.announceToScreenReader('Contact form submitted successfully. Thank you for your message!', 'polite');
          }
        } catch (error) {
          // Network or API error
          const errorMsg = error.message || errorMessage;
          formMessage.textContent = errorMsg;
          formMessage.className = 'form-message mt-6 px-3 py-3 rounded-md text-sm font-medium text-center bg-red-50 dark:bg-red-900/20 text-red-800 dark:text-red-400 border border-red-200 dark:border-red-800';
          formMessage.classList.remove('hidden');
          console.error('Form submission error:', error);

          // Announce error to screen readers
          if (typeof window.announceToScreenReader === 'function') {
            window.announceToScreenReader(`Error submitting form: ${errorMsg}`, 'assertive');
          }
        } finally {
          // Reset button state
          submitButton.innerHTML = originalButtonText;
          submitButton.disabled = false;

          // Scroll to message
          formMessage.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
      });
    }
  });
</script>

