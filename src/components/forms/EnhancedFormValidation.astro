---
/**
 * Enhanced Form Validation Component for NosytLabs - 2025
 * Comprehensive form validation with accessibility, real-time feedback, and modern UX
 * Features: WCAG 2.1 AA compliance, real-time validation, custom error messages, and progressive enhancement
 */

interface Props {
  formId?: string;
  enableRealTimeValidation?: boolean;
  enableAccessibilityFeatures?: boolean;
  enableProgressiveEnhancement?: boolean;
  customValidationRules?: Record<string, any>;
  className?: string;
}

const {
  formId = 'enhanced-form',
  enableRealTimeValidation = true,
  enableAccessibilityFeatures = true,
  enableProgressiveEnhancement = true,
  customValidationRules = {},
  className = ''
} = Astro.props;
---

<!-- Enhanced Form Validation Container -->
<div class={`form-validation-enhancer ${className}`} data-form-enhancer>
  <!-- Form Validation Styles and Indicators -->
  <div class="validation-indicators" aria-live="polite" aria-atomic="true">
    <!-- Success Indicator -->
    <div class="validation-success" data-validation-success role="status" aria-hidden="true">
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true">
        <polyline points="20,6 9,17 4,12"/>
      </svg>
      <span class="validation-message">Field is valid</span>
    </div>

    <!-- Error Indicator -->
    <div class="validation-error" data-validation-error role="alert" aria-hidden="true">
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true">
        <circle cx="12" cy="12" r="10"/>
        <line x1="15" y1="9" x2="9" y2="15"/>
        <line x1="9" y1="9" x2="15" y2="15"/>
      </svg>
      <span class="validation-message">Please correct this field</span>
    </div>

    <!-- Loading Indicator -->
    <div class="validation-loading" data-validation-loading aria-hidden="true">
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true">
        <path d="M21 12a9 9 0 11-6.219-8.56"/>
      </svg>
      <span class="validation-message">Validating...</span>
    </div>
  </div>

  <!-- Form Progress Indicator -->
  <div class="form-progress" data-form-progress role="progressbar" aria-label="Form completion progress">
    <div class="form-progress-bar" data-form-progress-bar></div>
    <span class="form-progress-text" data-form-progress-text>0% Complete</span>
  </div>

  <!-- Accessibility Announcements -->
  <div class="sr-announcements" aria-live="assertive" aria-atomic="true" data-form-announcements></div>
</div>

<style>
  /* Form Validation Enhancer Styles */
  .form-validation-enhancer {
    position: relative;
  }

  /* ========== VALIDATION INDICATORS ========== */

  .validation-indicators {
    position: relative;
  }

  .validation-success,
  .validation-error,
  .validation-loading {
    display: none;
    align-items: center;
    gap: var(--space-2);
    padding: var(--space-2) var(--space-3);
    border-radius: var(--radius-md);
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-medium);
    margin-top: var(--space-2);
    animation: validation-fade-in 0.3s ease;
  }

  .validation-success {
    background: var(--color-success-50);
    color: var(--color-success-700);
    border: 1px solid var(--color-success-200);
  }

  .validation-error {
    background: var(--color-error-50);
    color: var(--color-error-700);
    border: 1px solid var(--color-error-200);
  }

  .validation-loading {
    background: var(--color-info-50);
    color: var(--color-info-700);
    border: 1px solid var(--color-info-200);
  }

  .validation-loading svg {
    animation: spin 1s linear infinite;
  }

  .validation-success.show,
  .validation-error.show,
  .validation-loading.show {
    display: flex;
  }

  @keyframes validation-fade-in {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  /* ========== FORM FIELD STATES ========== */

  /* Enhanced Input Styles */
  .form-field {
    position: relative;
    margin-bottom: var(--space-6);
  }

  .form-input {
    width: 100%;
    padding: var(--space-4);
    border: 2px solid var(--color-neutral-300);
    border-radius: var(--radius-lg);
    font-size: var(--font-size-base);
    background: var(--glass-white-soft);
    transition: all var(--duration-normal) var(--ease-out);
    position: relative;
  }

  .form-input:focus {
    outline: none;
    border-color: var(--color-primary-500);
    background: var(--glass-white-medium);
    box-shadow: 0 0 0 3px rgba(124, 58, 237, 0.1);
  }

  /* Validation States */
  .form-input.valid {
    border-color: var(--color-success-500);
    background: var(--color-success-50);
  }

  .form-input.invalid {
    border-color: var(--color-error-500);
    background: var(--color-error-50);
  }

  .form-input.validating {
    border-color: var(--color-info-500);
    background: var(--color-info-50);
  }

  /* Enhanced Labels */
  .form-label {
    display: block;
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-medium);
    color: var(--color-neutral-700);
    margin-bottom: var(--space-2);
    transition: color var(--duration-fast) var(--ease-out);
  }

  .form-field.focused .form-label,
  .form-field.has-value .form-label {
    color: var(--color-primary-600);
  }

  .form-field.invalid .form-label {
    color: var(--color-error-600);
  }

  .form-field.valid .form-label {
    color: var(--color-success-600);
  }

  /* Required Field Indicator */
  .form-label .required {
    color: var(--color-error-500);
    margin-left: var(--space-1);
  }

  /* Help Text */
  .form-help {
    font-size: var(--font-size-xs);
    color: var(--color-neutral-600);
    margin-top: var(--space-1);
    line-height: var(--line-height-normal);
  }

  /* Error Messages */
  .form-error {
    font-size: var(--font-size-xs);
    color: var(--color-error-600);
    margin-top: var(--space-1);
    display: none;
    animation: error-slide-in 0.3s ease;
  }

  .form-field.invalid .form-error {
    display: block;
  }

  @keyframes error-slide-in {
    from {
      opacity: 0;
      transform: translateY(-5px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* ========== FORM PROGRESS ========== */

  .form-progress {
    background: var(--color-neutral-200);
    border-radius: var(--radius-full);
    height: 6px;
    margin: var(--space-4) 0;
    overflow: hidden;
    position: relative;
  }

  .form-progress-bar {
    height: 100%;
    background: var(--gradient-primary);
    border-radius: var(--radius-full);
    width: 0%;
    transition: width 0.5s ease;
    position: relative;
  }

  .form-progress-bar::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.4),
      transparent
    );
    animation: progress-shimmer 2s infinite;
  }

  @keyframes progress-shimmer {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
  }

  .form-progress-text {
    font-size: var(--font-size-xs);
    color: var(--color-neutral-600);
    text-align: center;
    display: block;
    margin-top: var(--space-2);
  }

  /* ========== ENHANCED FORM ELEMENTS ========== */

  /* Floating Labels */
  .form-field.floating {
    position: relative;
  }

  .form-field.floating .form-label {
    position: absolute;
    top: var(--space-4);
    left: var(--space-4);
    background: white;
    padding: 0 var(--space-1);
    transition: all var(--duration-normal) var(--ease-out);
    pointer-events: none;
    z-index: 1;
  }

  .form-field.floating.focused .form-label,
  .form-field.floating.has-value .form-label {
    top: -8px;
    font-size: var(--font-size-xs);
    color: var(--color-primary-600);
  }

  /* Custom Checkbox/Radio */
  .form-checkbox,
  .form-radio {
    position: relative;
    display: inline-flex;
    align-items: center;
    gap: var(--space-3);
    cursor: pointer;
    font-size: var(--font-size-base);
    color: var(--color-neutral-700);
    margin-bottom: var(--space-3);
  }

  .form-checkbox input,
  .form-radio input {
    position: absolute;
    opacity: 0;
    width: 0;
    height: 0;
  }

  .form-checkbox .checkmark,
  .form-radio .checkmark {
    width: 20px;
    height: 20px;
    border: 2px solid var(--color-neutral-400);
    background: white;
    transition: all var(--duration-fast) var(--ease-out);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .form-checkbox .checkmark {
    border-radius: var(--radius-sm);
  }

  .form-radio .checkmark {
    border-radius: 50%;
  }

  .form-checkbox input:checked + .checkmark,
  .form-radio input:checked + .checkmark {
    background: var(--color-primary-500);
    border-color: var(--color-primary-500);
  }

  .form-checkbox input:checked + .checkmark::after {
    content: 'âœ“';
    color: white;
    font-size: 12px;
    font-weight: bold;
  }

  .form-radio input:checked + .checkmark::after {
    content: '';
    width: 8px;
    height: 8px;
    background: white;
    border-radius: 50%;
  }

  .form-checkbox input:focus + .checkmark,
  .form-radio input:focus + .checkmark {
    outline: 2px solid var(--color-primary-500);
    outline-offset: 2px;
  }

  /* ========== ACCESSIBILITY ENHANCEMENTS ========== */

  .sr-announcements {
    position: absolute;
    left: -10000px;
    width: 1px;
    height: 1px;
    overflow: hidden;
  }

  /* High Contrast Mode */
  @media (prefers-contrast: high) {
    .form-input {
      border-width: 3px;
    }

    .validation-success,
    .validation-error,
    .validation-loading {
      border-width: 2px;
    }

    .form-checkbox .checkmark,
    .form-radio .checkmark {
      border-width: 3px;
    }
  }

  /* Reduced Motion */
  @media (prefers-reduced-motion: reduce) {
    .form-input,
    .form-label,
    .validation-success,
    .validation-error,
    .validation-loading,
    .form-progress-bar,
    .form-checkbox .checkmark,
    .form-radio .checkmark {
      transition: none;
      animation: none;
    }

    .form-progress-bar::after {
      animation: none;
    }
  }

  /* Dark Theme */
  [data-theme="dark"] .form-input {
    background: var(--glass-dark-soft);
    border-color: var(--color-neutral-600);
    color: var(--color-neutral-100);
  }

  [data-theme="dark"] .form-input:focus {
    background: var(--glass-dark-medium);
    border-color: var(--color-primary-400);
  }

  [data-theme="dark"] .form-label {
    color: var(--color-neutral-300);
  }

  [data-theme="dark"] .form-help {
    color: var(--color-neutral-400);
  }

  [data-theme="dark"] .validation-success {
    background: rgba(16, 185, 129, 0.1);
    color: var(--color-success-400);
    border-color: var(--color-success-600);
  }

  [data-theme="dark"] .validation-error {
    background: rgba(239, 68, 68, 0.1);
    color: var(--color-error-400);
    border-color: var(--color-error-600);
  }

  [data-theme="dark"] .validation-loading {
    background: rgba(59, 130, 246, 0.1);
    color: var(--color-info-400);
    border-color: var(--color-info-600);
  }

  [data-theme="dark"] .form-checkbox .checkmark,
  [data-theme="dark"] .form-radio .checkmark {
    background: var(--color-neutral-800);
    border-color: var(--color-neutral-500);
  }

  /* Mobile Responsive */
  @media (max-width: 768px) {
    .form-input {
      padding: var(--space-3);
      font-size: var(--font-size-lg);
      min-height: 48px;
    }

    .form-checkbox,
    .form-radio {
      gap: var(--space-4);
    }

    .form-checkbox .checkmark,
    .form-radio .checkmark {
      width: 24px;
      height: 24px;
    }
  }
</style>

<script>
  // Enhanced Form Validation Controller
  class EnhancedFormValidation {
    constructor() {
      this.forms = new Map();
      this.validationRules = {
        required: (value) => value.trim() !== '',
        email: (value) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value),
        phone: (value) => /^[\+]?[1-9][\d]{0,15}$/.test(value.replace(/\s/g, '')),
        url: (value) => {
          try {
            new URL(value);
            return true;
          } catch {
            return false;
          }
        },
        minLength: (value, min) => value.length >= min,
        maxLength: (value, max) => value.length <= max,
        pattern: (value, pattern) => new RegExp(pattern).test(value)
      };
      
      this.init();
    }

    init() {
      this.setupFormEnhancement();
      this.setupRealTimeValidation();
      this.setupAccessibilityFeatures();
      this.setupProgressTracking();
    }

    setupFormEnhancement() {
      document.querySelectorAll('form').forEach(form => {
        this.enhanceForm(form);
      });
    }

    enhanceForm(form) {
      const formId = form.id || `form-${Date.now()}`;
      form.id = formId;
      
      this.forms.set(formId, {
        element: form,
        fields: new Map(),
        isValid: false,
        progress: 0
      });

      // Enhance form fields
      form.querySelectorAll('input, textarea, select').forEach(field => {
        this.enhanceField(field, formId);
      });

      // Add form submission handling
      form.addEventListener('submit', (e) => {
        this.handleFormSubmission(e, formId);
      });
    }

    enhanceField(field, formId) {
      const fieldContainer = field.closest('.form-field') || this.createFieldContainer(field);
      const fieldId = field.id || `field-${Date.now()}`;
      field.id = fieldId;

      // Add ARIA attributes
      field.setAttribute('aria-describedby', `${fieldId}-help ${fieldId}-error`);
      
      // Add validation attributes
      if (field.hasAttribute('required')) {
        field.setAttribute('aria-required', 'true');
      }

      // Store field info
      const formData = this.forms.get(formId);
      formData.fields.set(fieldId, {
        element: field,
        container: fieldContainer,
        isValid: false,
        isDirty: false,
        validationRules: this.getFieldValidationRules(field)
      });

      // Setup event listeners
      this.setupFieldEventListeners(field, formId, fieldId);
    }

    createFieldContainer(field) {
      const container = document.createElement('div');
      container.className = 'form-field';
      field.parentNode.insertBefore(container, field);
      container.appendChild(field);
      return container;
    }

    getFieldValidationRules(field) {
      const rules = [];
      
      if (field.hasAttribute('required')) {
        rules.push({ type: 'required', message: 'This field is required' });
      }
      
      if (field.type === 'email') {
        rules.push({ type: 'email', message: 'Please enter a valid email address' });
      }
      
      if (field.type === 'tel') {
        rules.push({ type: 'phone', message: 'Please enter a valid phone number' });
      }
      
      if (field.type === 'url') {
        rules.push({ type: 'url', message: 'Please enter a valid URL' });
      }
      
      if (field.hasAttribute('minlength')) {
        const min = parseInt(field.getAttribute('minlength'));
        rules.push({ 
          type: 'minLength', 
          value: min, 
          message: `Must be at least ${min} characters` 
        });
      }
      
      if (field.hasAttribute('maxlength')) {
        const max = parseInt(field.getAttribute('maxlength'));
        rules.push({ 
          type: 'maxLength', 
          value: max, 
          message: `Must be no more than ${max} characters` 
        });
      }
      
      if (field.hasAttribute('pattern')) {
        const pattern = field.getAttribute('pattern');
        rules.push({ 
          type: 'pattern', 
          value: pattern, 
          message: 'Please match the required format' 
        });
      }
      
      return rules;
    }

    setupFieldEventListeners(field, formId, fieldId) {
      // Focus events
      field.addEventListener('focus', () => {
        this.handleFieldFocus(formId, fieldId);
      });

      field.addEventListener('blur', () => {
        this.handleFieldBlur(formId, fieldId);
      });

      // Input events for real-time validation
      field.addEventListener('input', () => {
        this.handleFieldInput(formId, fieldId);
      });

      // Change events
      field.addEventListener('change', () => {
        this.handleFieldChange(formId, fieldId);
      });
    }

    handleFieldFocus(formId, fieldId) {
      const formData = this.forms.get(formId);
      const fieldData = formData.fields.get(fieldId);
      
      fieldData.container.classList.add('focused');
      this.announceToScreenReader(`Focused on ${fieldData.element.name || fieldData.element.type} field`);
    }

    handleFieldBlur(formId, fieldId) {
      const formData = this.forms.get(formId);
      const fieldData = formData.fields.get(fieldId);
      
      fieldData.container.classList.remove('focused');
      
      if (fieldData.isDirty) {
        this.validateField(formId, fieldId);
      }
    }

    handleFieldInput(formId, fieldId) {
      const formData = this.forms.get(formId);
      const fieldData = formData.fields.get(fieldId);
      
      fieldData.isDirty = true;
      
      // Update has-value class
      if (fieldData.element.value.trim()) {
        fieldData.container.classList.add('has-value');
      } else {
        fieldData.container.classList.remove('has-value');
      }

      // Real-time validation (debounced)
      clearTimeout(fieldData.validationTimeout);
      fieldData.validationTimeout = setTimeout(() => {
        this.validateField(formId, fieldId);
      }, 500);
    }

    handleFieldChange(formId, fieldId) {
      this.validateField(formId, fieldId);
      this.updateFormProgress(formId);
    }

    validateField(formId, fieldId) {
      const formData = this.forms.get(formId);
      const fieldData = formData.fields.get(fieldId);
      const field = fieldData.element;
      const value = field.value;

      // Clear previous validation state
      this.clearFieldValidation(fieldData);

      // Show loading state
      this.showFieldValidation(fieldData, 'loading');

      // Validate against rules
      const errors = [];
      for (const rule of fieldData.validationRules) {
        const validator = this.validationRules[rule.type];
        if (validator && !validator(value, rule.value)) {
          errors.push(rule.message);
        }
      }

      // Update validation state
      setTimeout(() => {
        if (errors.length > 0) {
          this.showFieldValidation(fieldData, 'error', errors[0]);
          fieldData.isValid = false;
        } else {
          this.showFieldValidation(fieldData, 'success');
          fieldData.isValid = true;
        }

        this.updateFormValidation(formId);
      }, 300); // Simulate async validation
    }

    clearFieldValidation(fieldData) {
      fieldData.container.classList.remove('valid', 'invalid', 'validating');
      fieldData.element.classList.remove('valid', 'invalid', 'validating');
    }

    showFieldValidation(fieldData, type, message = '') {
      this.clearFieldValidation(fieldData);
      
      fieldData.container.classList.add(type === 'loading' ? 'validating' : type === 'error' ? 'invalid' : 'valid');
      fieldData.element.classList.add(type === 'loading' ? 'validating' : type === 'error' ? 'invalid' : 'valid');

      // Update error message
      let errorElement = fieldData.container.querySelector('.form-error');
      if (!errorElement && type === 'error') {
        errorElement = document.createElement('div');
        errorElement.className = 'form-error';
        errorElement.id = `${fieldData.element.id}-error`;
        errorElement.setAttribute('role', 'alert');
        fieldData.container.appendChild(errorElement);
      }

      if (errorElement) {
        errorElement.textContent = message;
        errorElement.style.display = type === 'error' ? 'block' : 'none';
      }

      // Announce to screen reader
      if (type === 'error' && message) {
        this.announceToScreenReader(`Error: ${message}`);
      } else if (type === 'success') {
        this.announceToScreenReader('Field is valid');
      }
    }

    updateFormValidation(formId) {
      const formData = this.forms.get(formId);
      const allFieldsValid = Array.from(formData.fields.values()).every(field => field.isValid);
      
      formData.isValid = allFieldsValid;
      
      // Update submit button state
      const submitButton = formData.element.querySelector('button[type="submit"], input[type="submit"]');
      if (submitButton) {
        submitButton.disabled = !allFieldsValid;
        submitButton.setAttribute('aria-disabled', !allFieldsValid);
      }
    }

    updateFormProgress(formId) {
      const formData = this.forms.get(formId);
      const totalFields = formData.fields.size;
      const validFields = Array.from(formData.fields.values()).filter(field => field.isValid).length;
      const progress = totalFields > 0 ? (validFields / totalFields) * 100 : 0;
      
      formData.progress = progress;
      
      // Update progress bar
      const progressBar = document.querySelector('[data-form-progress-bar]');
      const progressText = document.querySelector('[data-form-progress-text]');
      
      if (progressBar) {
        progressBar.style.width = `${progress}%`;
      }
      
      if (progressText) {
        progressText.textContent = `${Math.round(progress)}% Complete`;
      }
    }

    handleFormSubmission(event, formId) {
      const formData = this.forms.get(formId);
      
      // Validate all fields
      formData.fields.forEach((fieldData, fieldId) => {
        this.validateField(formId, fieldId);
      });

      // Prevent submission if invalid
      if (!formData.isValid) {
        event.preventDefault();
        this.announceToScreenReader('Form has errors. Please correct them before submitting.');
        
        // Focus first invalid field
        const firstInvalidField = Array.from(formData.fields.values())
          .find(field => !field.isValid);
        
        if (firstInvalidField) {
          firstInvalidField.element.focus();
        }
      } else {
        this.announceToScreenReader('Form submitted successfully');
      }
    }

    setupRealTimeValidation() {
      // Already implemented in field event listeners
    }

    setupAccessibilityFeatures() {
      // Add keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Tab') {
          // Enhanced tab navigation is handled by browser
        }
      });
    }

    setupProgressTracking() {
      // Progress tracking is implemented in updateFormProgress
    }

    announceToScreenReader(message) {
      const announcer = document.querySelector('[data-form-announcements]');
      if (announcer) {
        announcer.textContent = message;
        setTimeout(() => {
          announcer.textContent = '';
        }, 1000);
      }
    }
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    window.formValidation = new EnhancedFormValidation();
  });
</script>
