---
export interface Props {
  variant?: 'inline' | 'block' | 'terminal' | 'snippet';
  language?: string;
  theme?: 'light' | 'dark' | 'auto';
  showLineNumbers?: boolean;
  copyable?: boolean;
  class?: string;
}

const {
  variant = 'inline',
  language = 'plaintext',
  theme = 'auto',
  showLineNumbers = false,
  copyable = true,
  class: className
} = Astro.props;
---

<div class={`brand-code-wrapper variant-${variant} theme-${theme} ${className || ''}`}>
  {copyable && (<button class="copy-button" aria-label="Copy code to clipboard">Copy</button>)}
  <code class={`brand-code lang-${language} ${showLineNumbers ? 'with-lines' : ''}`}>
    <slot />
  </code>
</div>

<style>
  .brand-code {
    font-family: var(--font-mono);
    color: var(--color-text-primary);
    -webkit-font-smoothing: antialiased;
    text-rendering: optimizeLegibility;
    background: transparent;
  }

  .variant-inline .brand-code {
    background: color-mix(in srgb, var(--color-brand-primary), transparent 90%);
    padding: 0.125rem 0.25rem;
    border-radius: 4px;
  }  .variant-block .brand-code {
    display: block;
    padding: 1rem;
    border-radius: 8px;
    background: color-mix(in srgb, var(--color-brand-primary), transparent 95%);
  }

  .variant-terminal .brand-code {
    background: var(--color-surface-tertiary, #333333);
  color: var(--color-brand-text-secondary, #e5e7eb);
    border-radius: 8px;
    padding: 1rem;
    font-size: 0.95rem;
  }

  .variant-snippet .brand-code {
    display: block;
    padding: 0.75rem 1rem;
    border-left: 3px solid var(--color-brand-primary);
  }

  .brand-code :global(.token.keyword) {
    color: var(--color-brand-accent-muted, #0099CC);
    font-weight: var(--font-weight-semibold);
    padding: var(--spacing-xs) var(--spacing-sm);
    border-radius: var(--border-radius-sm);
  }

  .brand-code :global(.token.string) {
    color: var(--color-brand-highlight, #00F0FF);
    padding: var(--spacing-md);
    border-radius: var(--border-radius-md);
    background: var(--color-surface-secondary);
  }

  .brand-code :global(.token.comment) {
    color: var(--color-brand-text-muted, #808080);
    font-style: italic;
    padding: var(--spacing-lg) var(--spacing-md);
    border-radius: var(--border-radius-md);
  }

  .brand-code :global(.token.operator) {
    margin-left: var(--spacing-sm);
    color: var(--color-brand-accent);
    font-weight: var(--font-weight-medium);
    padding: var(--spacing-sm) var(--spacing-sm);
    border-radius: var(--border-radius-sm);
  }

  .copy-button {
    margin-left: var(--spacing-sm);
    color: var(--color-brand-accent);
    font-weight: var(--font-weight-medium);
    padding: var(--spacing-sm) var(--spacing-sm);
    border-radius: var(--border-radius-sm);
  }

  .copy-button:focus-visible {
    outline: 2px solid var(--color-brand-primary);
    outline-offset: 2px;
  }

  @media print {
    .brand-code { color: var(--color-brand-secondary, #000) !important; background: transparent !important; }
  }
</style>

<script>
  const btn = document.currentScript?.previousElementSibling?.previousElementSibling?.querySelector('.copy-button');
  if (btn) {
    btn.addEventListener('click', async () => {
      const code = btn.nextElementSibling?.textContent || '';
      try {
        await navigator.clipboard.writeText(code);
        btn.textContent = 'Copied!';
        setTimeout(() => (btn.textContent = 'Copy'), 1500);
      } catch (e) {
        console.error('Copy failed', e);
      }
    });
  }
</script>
