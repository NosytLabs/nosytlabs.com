/**
 * CORE JavaScript Bundle - Auto-generated
 * Priority: critical
 * Files: 3
 */

/* === src/scripts/core-init.ts === */
/** * NosytLabs Core Initialization Module * Consolidated core functionality for better performance and maintainability */ class NosytLabsManager {config ={features:{darkMode: true, animations: true, lazyLoading: true, serviceWorker: false } };init(): void{try{this.initTheme();this.initCore();} catch (error){console.warn('NosytLabs init error:', error);} } initCore(): void{window.addEventListener('error', (event) =>{console.warn('Global error:', event.error);if (typeof window !== 'undefined' && (window as any).gtag){(window as any).gtag('event', 'exception',{description: event.error?.message || 'Unknown error', fatal: false });} });window.addEventListener('unhandledrejection', (event) =>{console.warn('Unhandled promise rejection:', event.reason);if (typeof window !== 'undefined' && (window as any).gtag){(window as any).gtag('event', 'exception',{description: event.reason?.message || 'Unhandled promise rejection', fatal: false });} });this.initPerformanceMonitoring();} initTheme(): void{try{const savedTheme = localStorage.getItem('theme');const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;if (savedTheme){document.documentElement.classList.toggle('dark', savedTheme === 'dark');} else{document.documentElement.classList.toggle('dark', prefersDark);} this.setupThemeToggles();window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) =>{if (!localStorage.getItem('theme')){document.documentElement.classList.toggle('dark', e.matches);} });} catch (error){console.warn('Theme init error:', error);} } private setupThemeToggles(): void{const themeToggles = document.querySelectorAll('[data-theme-toggle], [data-toggle="dark-mode"]');themeToggles.forEach(toggle =>{toggle.addEventListener('click', () =>{document.documentElement.classList.toggle('dark');const isDark = document.documentElement.classList.contains('dark');localStorage.setItem('theme', isDark ? 'dark' : 'light');this.updateToggleButtons();if ((window as any).announceToScreenReader){(window as any).announceToScreenReader( `Switched to ${isDark ? 'dark' : 'light'} mode` );} });});this.updateToggleButtons();} private updateToggleButtons(): void{const darkModeToggles = document.querySelectorAll('[data-theme-toggle], [data-toggle="dark-mode"]');const isDark = document.documentElement.classList.contains('dark');darkModeToggles.forEach(toggle =>{const lightIcon = toggle.querySelector('.theme-icon-light') as HTMLElement;const darkIcon = toggle.querySelector('.theme-icon-dark') as HTMLElement;if (lightIcon && darkIcon){lightIcon.style.display = isDark ? 'none' : 'block';darkIcon.style.display = isDark ? 'block' : 'none';} const icon = toggle.querySelector('span');if (icon && !lightIcon && !darkIcon){icon.textContent = isDark ? '☀️' : '🌙';} toggle.setAttribute('aria-label', isDark ? 'Switch to light mode' : 'Switch to dark mode');});} private initPerformanceMonitoring(): void{if ('web-vital' in window){console.log('Performance monitoring initialized');} window.addEventListener('load', () =>{const perfData = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;if (perfData){const loadTime = perfData.loadEventEnd - perfData.loadEventStart;console.log(`Page load time: ${loadTime}ms`);} });} } const nosytLabs = new NosytLabsManager();if (document.readyState === 'loading'){document.addEventListener('DOMContentLoaded', () => nosytLabs.init());} else{nosytLabs.init();} (window as any).NosytLabs = nosytLabs;export default nosytLabs;

/* === src/scripts/accessibility-manager.ts === */
/** * Advanced Accessibility Manager * Comprehensive accessibility features and keyboard navigation support * * @fileoverview Enterprise-level accessibility management system * @module scripts/accessibility-manager * @version 2.0.0 * @author NosytLabs Team * @since 2025-06-16 * * @description Provides comprehensive accessibility features including * keyboard navigation, focus management, ARIA live regions, and motion * preference handling. Ensures WCAG AA compliance. */ export class AccessibilityManager{private liveRegion: HTMLElement | null = null;constructor(){this.init();} init(): void{this.setupKeyboardNavigation();this.setupFocusManagement();this.setupAriaLiveRegions();this.setupMotionPreferences();} private setupKeyboardNavigation(): void{document.addEventListener('keydown', (e) =>{if (e.key === 'Escape'){this.closeModals();this.closeMobileMenu();} if (e.key === 'Tab'){document.body.classList.add('keyboard-navigation');} if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key)){this.handleArrowNavigation(e);} });document.addEventListener('mousedown', () =>{document.body.classList.remove('keyboard-navigation');});} private setupFocusManagement(): void{const modals = document.querySelectorAll('[role="dialog"]');modals.forEach(modal =>{this.createFocusTrap(modal as HTMLElement);});} private setupAriaLiveRegions(): void{this.liveRegion = document.createElement('div');this.liveRegion.setAttribute('aria-live', 'polite');this.liveRegion.setAttribute('aria-atomic', 'true');this.liveRegion.className = 'live-region sr-only';this.liveRegion.style.cssText = ` position: absolute;left: -10000px;width: 1px;height: 1px;overflow: hidden;`;document.body.appendChild(this.liveRegion);(window as any).announceToScreenReader = (message: string) =>{if (this.liveRegion){this.liveRegion.textContent = message;setTimeout(() =>{if (this.liveRegion){this.liveRegion.textContent = '';} }, 1000);} };} private setupMotionPreferences(): void{const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)');const updateMotionPreferences = (matches: boolean) =>{if (matches){document.body.classList.add('respect-motion-preferences');document.documentElement.style.setProperty('--animation-duration', '0.01ms');document.documentElement.style.setProperty('--transition-duration', '0.01ms');} else{document.body.classList.remove('respect-motion-preferences');document.documentElement.style.removeProperty('--animation-duration');document.documentElement.style.removeProperty('--transition-duration');} };updateMotionPreferences(prefersReducedMotion.matches);prefersReducedMotion.addEventListener('change', (e) =>{updateMotionPreferences(e.matches);});} private closeModals(): void{const openModals = document.querySelectorAll('[role="dialog"][aria-hidden="false"]');openModals.forEach(modal =>{modal.setAttribute('aria-hidden', 'true');(modal as HTMLElement).style.display = 'none';});} private closeMobileMenu(): void{const mobileMenu = document.querySelector('.mobile-menu') as HTMLElement;if (mobileMenu && mobileMenu.classList.contains('open')){mobileMenu.classList.remove('open');mobileMenu.setAttribute('aria-hidden', 'true');} } private handleArrowNavigation(e: KeyboardEvent): void{const focusedElement = document.activeElement;const menuItems = Array.from(document.querySelectorAll('[role="menuitem"], .nav-link')) as HTMLElement[];const currentIndex = menuItems.indexOf(focusedElement as HTMLElement);if (currentIndex === -1) return;let nextIndex: number | undefined;if (e.key === 'ArrowDown' || e.key === 'ArrowRight'){nextIndex = (currentIndex + 1) % menuItems.length;} else if (e.key === 'ArrowUp' || e.key === 'ArrowLeft'){nextIndex = (currentIndex - 1 + menuItems.length) % menuItems.length;} if (nextIndex !== undefined){e.preventDefault();menuItems[nextIndex].focus();} } private createFocusTrap(element: HTMLElement): void{const focusableElements = element.querySelectorAll( 'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])' ) as NodeListOf<HTMLElement>;if (focusableElements.length === 0) return;const firstElement = focusableElements[0];const lastElement = focusableElements[focusableElements.length - 1];element.addEventListener('keydown', (e) =>{if (e.key === 'Tab'){if (e.shiftKey){if (document.activeElement === firstElement){e.preventDefault();lastElement.focus();} } else{if (document.activeElement === lastElement){e.preventDefault();firstElement.focus();} } } });} public announce(message: string): void{if ((window as any).announceToScreenReader){(window as any).announceToScreenReader(message);} } public addFocusTrap(element: HTMLElement): void{this.createFocusTrap(element);} } let accessibilityManager: AccessibilityManager;if (document.readyState === 'loading'){document.addEventListener('DOMContentLoaded', () =>{accessibilityManager = new AccessibilityManager();});} else{accessibilityManager = new AccessibilityManager();} export default accessibilityManager;

/* === src/scripts/service-worker-manager.ts === */
/** * Service Worker Manager * Handles service worker registration and updates with proper error handling */ export class ServiceWorkerManager{private registration: ServiceWorkerRegistration | null = null;constructor(){this.init();} private async init(): Promise<void>{if (!('serviceWorker' in navigator)){console.log('Service Worker not supported');return;} if (document.readyState === 'loading'){window.addEventListener('load', () => this.register());} else{this.register();} } private async register(): Promise<void>{try{this.registration = await navigator.serviceWorker.register('/sw.js',{scope: '/' });console.log('SW registered:', this.registration);this.setupUpdateHandling();this.checkForUpdates();setInterval(() => this.checkForUpdates(), 30 * 60 * 1000);} catch (error){console.error('SW registration failed:', error);if (typeof window !== 'undefined' && (window as any).gtag){(window as any).gtag('event', 'exception',{description: 'Service Worker registration failed', fatal: false });} } } private setupUpdateHandling(): void{if (!this.registration) return;this.registration.addEventListener('updatefound', () =>{const newWorker = this.registration!.installing;if (newWorker){newWorker.addEventListener('statechange', () =>{if (newWorker.state === 'installed' && navigator.serviceWorker.controller){this.handleUpdate();} });} });navigator.serviceWorker.addEventListener('message', (event) =>{if (event.data && event.data.type === 'SKIP_WAITING'){this.handleSkipWaiting();} });} private handleUpdate(): void{if ((window as any).announceToScreenReader){(window as any).announceToScreenReader('New content available. Refresh to update.');} console.log('New content available. Please refresh the page.');this.showUpdatePrompt();} private showUpdatePrompt(): void{const notification = document.createElement('div');notification.className = 'update-notification';notification.innerHTML = ` <div class="update-content"> <p>New content is available!</p> <button id="update-btn" class="update-button">Update Now</button> <button id="dismiss-btn" class="dismiss-button">Later</button> </div> `;notification.style.cssText = ` position: fixed;top: 20px;right: 20px;background: #7c3aed;color: white;padding: 16px;border-radius: 8px;box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);z-index: 10000;max-width: 300px;font-family: inherit;`;document.body.appendChild(notification);const updateBtn = notification.querySelector('#update-btn');const dismissBtn = notification.querySelector('#dismiss-btn');updateBtn?.addEventListener('click', () =>{this.applyUpdate();notification.remove();});dismissBtn?.addEventListener('click', () =>{notification.remove();});setTimeout(() =>{if (notification.parentNode){notification.remove();} }, 10000);} private handleSkipWaiting(): void{window.location.reload();} private async checkForUpdates(): Promise<void>{if (this.registration){try{await this.registration.update();} catch (error){console.warn('Failed to check for SW updates:', error);} } } private async applyUpdate(): Promise<void>{if (this.registration && this.registration.waiting){this.registration.waiting.postMessage({type: 'SKIP_WAITING' });} } public async unregister(): Promise<boolean>{if (this.registration){return await this.registration.unregister();} return false;} public getRegistration(): ServiceWorkerRegistration | null{return this.registration;} public async getActiveWorker(): Promise<ServiceWorker | null>{if (this.registration){return this.registration.active;} return null;} } let serviceWorkerManager: ServiceWorkerManager;const shouldEnableServiceWorker = true;if (shouldEnableServiceWorker){serviceWorkerManager = new ServiceWorkerManager();} export default serviceWorkerManager;

